
B-L475E-IOT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d50  080080e8  080080e8  000180e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e38  08008e38  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  08008e38  08008e38  00018e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e40  08008e40  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008e40  08008e40  00018e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08008e48  08008e48  00018e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  08008e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c84  20000260  080090b0  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00017004  20000ee4  080090b0  00020ee4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e888  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003962  00000000  00000000  0003eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000137d9  00000000  00000000  0004247a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  00055c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015b0  00000000  00000000  00056d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ca2  00000000  00000000  000582c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e213  00000000  00000000  00080f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2bbf  00000000  00000000  0009f17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00191d3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046ac  00000000  00000000  00191d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000260 	.word	0x20000260
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080cc 	.word	0x080080cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000264 	.word	0x20000264
 80001cc:	080080cc 	.word	0x080080cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000eb0:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
  uint8_t  MAC_Addr[6] = {0};
 8000eb4:	2400      	movs	r4, #0
 8000eb6:	940d      	str	r4, [sp, #52]	; 0x34
 8000eb8:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
  uint8_t  IP_Addr[4] = {0};
 8000ebc:	940c      	str	r4, [sp, #48]	; 0x30


  char data_str[512]; // string buffer to hold converted data
  int len; // length of data string
  int16_t acc_xyz[3]; // array to hold acceleration data
  BSP_ACCELERO_Init(); // initialize accelerometer module
 8000ebe:	f001 fa45 	bl	800234c <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8000ec2:	f001 fa61 	bl	8002388 <BSP_GYRO_Init>
  float gyro_xyz[3]; // array to hold gyroscope data
  BSP_GYRO_Init(); // initialize gyroscope module
 8000ec6:	f001 fa5f 	bl	8002388 <BSP_GYRO_Init>

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eca:	f001 fbcf 	bl	800266c <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ece:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ed0:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ed2:	e9cd 421d 	strd	r4, r2, [sp, #116]	; 0x74
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ed6:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed8:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000eda:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000edc:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ee0:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ee2:	9322      	str	r3, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ee4:	2328      	movs	r3, #40	; 0x28
 8000ee6:	9323      	str	r3, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ee8:	2404      	movs	r4, #4
 8000eea:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eec:	a816      	add	r0, sp, #88	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eee:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ef2:	9226      	str	r2, [sp, #152]	; 0x98
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f002 f97a 	bl	80031ec <HAL_RCC_OscConfig>
 8000ef8:	b100      	cbz	r0, 8000efc <main+0x50>
  {
    /* Initialization Error */
    while(1);
 8000efa:	e7fe      	b.n	8000efa <main+0x4e>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efc:	210f      	movs	r1, #15
 8000efe:	2303      	movs	r3, #3
 8000f00:	e9cd 1311 	strd	r1, r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f04:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f08:	9015      	str	r0, [sp, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f0a:	4621      	mov	r1, r4
 8000f0c:	a811      	add	r0, sp, #68	; 0x44
 8000f0e:	f002 fbed 	bl	80036ec <HAL_RCC_ClockConfig>
 8000f12:	4604      	mov	r4, r0
 8000f14:	b100      	cbz	r0, 8000f18 <main+0x6c>
  {
    /* Initialization Error */
    while(1);
 8000f16:	e7fe      	b.n	8000f16 <main+0x6a>
  BSP_LED_Init(LED2);
 8000f18:	f001 f954 	bl	80021c4 <BSP_LED_Init>
  hDiscoUart.Instance = DISCOVERY_COM1;
 8000f1c:	497b      	ldr	r1, [pc, #492]	; (800110c <main+0x260>)
  hDiscoUart.Init.BaudRate = 115200;
 8000f1e:	4a7c      	ldr	r2, [pc, #496]	; (8001110 <main+0x264>)
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8000f20:	610c      	str	r4, [r1, #16]
  hDiscoUart.Init.BaudRate = 115200;
 8000f22:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f26:	e9c1 2300 	strd	r2, r3, [r1]
  BSP_COM_Init(COM1, &hDiscoUart);
 8000f2a:	4620      	mov	r0, r4
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	230c      	movs	r3, #12
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8000f2e:	e9c1 4402 	strd	r4, r4, [r1, #8]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	e9c1 3405 	strd	r3, r4, [r1, #20]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f36:	e9c1 4407 	strd	r4, r4, [r1, #28]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3a:	624c      	str	r4, [r1, #36]	; 0x24
  BSP_COM_Init(COM1, &hDiscoUart);
 8000f3c:	f001 f96e 	bl	800221c <BSP_COM_Init>
  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\n");
 8000f40:	4874      	ldr	r0, [pc, #464]	; (8001114 <main+0x268>)
 8000f42:	f004 fdbf 	bl	8005ac4 <puts>
  TERMOUT("TCP Client Instructions :\n");
 8000f46:	4874      	ldr	r0, [pc, #464]	; (8001118 <main+0x26c>)
 8000f48:	f004 fdbc 	bl	8005ac4 <puts>
  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 8000f4c:	4873      	ldr	r0, [pc, #460]	; (800111c <main+0x270>)
 8000f4e:	f004 fdb9 	bl	8005ac4 <puts>
  TERMOUT("   you configured using the Configuration Access Point.\n");
 8000f52:	4873      	ldr	r0, [pc, #460]	; (8001120 <main+0x274>)
 8000f54:	f004 fdb6 	bl	8005ac4 <puts>
  TERMOUT("2- Create a server by using the android application TCP Server\n");
 8000f58:	4872      	ldr	r0, [pc, #456]	; (8001124 <main+0x278>)
 8000f5a:	f004 fdb3 	bl	8005ac4 <puts>
  TERMOUT("   with port(8002).\n");
 8000f5e:	4872      	ldr	r0, [pc, #456]	; (8001128 <main+0x27c>)
 8000f60:	f004 fdb0 	bl	8005ac4 <puts>
  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 8000f64:	4871      	ldr	r0, [pc, #452]	; (800112c <main+0x280>)
 8000f66:	f004 fdad 	bl	8005ac4 <puts>
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8000f6a:	f001 f823 	bl	8001fb4 <WIFI_Init>
 8000f6e:	4605      	mov	r5, r0
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d17a      	bne.n	800106a <main+0x1be>
    TERMOUT("> WIFI Module Initialized.\n");
 8000f74:	486e      	ldr	r0, [pc, #440]	; (8001130 <main+0x284>)
 8000f76:	f004 fda5 	bl	8005ac4 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 8000f7a:	2106      	movs	r1, #6
 8000f7c:	a80d      	add	r0, sp, #52	; 0x34
 8000f7e:	f001 f851 	bl	8002024 <WIFI_GetMAC_Address>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	d14a      	bne.n	800101c <main+0x170>
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8000f86:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8000f9c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 8000fa0:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8000fa4:	4863      	ldr	r0, [pc, #396]	; (8001134 <main+0x288>)
 8000fa6:	f004 fd07 	bl	80059b8 <iprintf>
    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK){
 8000faa:	4963      	ldr	r1, [pc, #396]	; (8001138 <main+0x28c>)
 8000fac:	4863      	ldr	r0, [pc, #396]	; (800113c <main+0x290>)
 8000fae:	2203      	movs	r2, #3
 8000fb0:	f001 f824 	bl	8001ffc <WIFI_Connect>
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	2800      	cmp	r0, #0
 8000fb8:	d155      	bne.n	8001066 <main+0x1ba>
      TERMOUT("> es-wifi module connected \n");
 8000fba:	4861      	ldr	r0, [pc, #388]	; (8001140 <main+0x294>)
 8000fbc:	f004 fd82 	bl	8005ac4 <puts>
      if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	a80c      	add	r0, sp, #48	; 0x30
 8000fc4:	f001 f83e 	bl	8002044 <WIFI_GetIP_Address>
 8000fc8:	4607      	mov	r7, r0
 8000fca:	2800      	cmp	r0, #0
 8000fcc:	d146      	bne.n	800105c <main+0x1b0>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8000fce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8000fd2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 8000fd6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4859      	ldr	r0, [pc, #356]	; (8001144 <main+0x298>)
 8000fde:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 8000fe2:	4e59      	ldr	r6, [pc, #356]	; (8001148 <main+0x29c>)
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 8000fe4:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8001174 <main+0x2c8>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 8000fe8:	f004 fce6 	bl	80059b8 <iprintf>
        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 8000fec:	f64f 7397 	movw	r3, #65431	; 0xff97
 8000ff0:	9301      	str	r3, [sp, #4]
 8000ff2:	78f3      	ldrb	r3, [r6, #3]
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	78b3      	ldrb	r3, [r6, #2]
 8000ff8:	7872      	ldrb	r2, [r6, #1]
 8000ffa:	7831      	ldrb	r1, [r6, #0]
 8000ffc:	4853      	ldr	r0, [pc, #332]	; (800114c <main+0x2a0>)
 8000ffe:	f004 fcdb 	bl	80059b8 <iprintf>
        while (Trials--)
 8001002:	250b      	movs	r5, #11
 8001004:	3d01      	subs	r5, #1
 8001006:	b2ad      	uxth	r5, r5
 8001008:	b97d      	cbnz	r5, 800102a <main+0x17e>
          TERMOUT("> ERROR : Cannot open Connection\n");
 800100a:	4851      	ldr	r0, [pc, #324]	; (8001150 <main+0x2a4>)
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 800100c:	f004 fd5a 	bl	8005ac4 <puts>
      BSP_LED_On(LED2);
 8001010:	2000      	movs	r0, #0
    BSP_LED_On(LED2);
 8001012:	f001 f8f9 	bl	8002208 <BSP_LED_On>
  int32_t Socket = -1;
 8001016:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800101a:	e016      	b.n	800104a <main+0x19e>
      TERMOUT("> ERROR : CANNOT get MAC address\n");
 800101c:	484d      	ldr	r0, [pc, #308]	; (8001154 <main+0x2a8>)
 800101e:	f004 fd51 	bl	8005ac4 <puts>
      BSP_LED_On(LED2);
 8001022:	4628      	mov	r0, r5
 8001024:	f001 f8f0 	bl	8002208 <BSP_LED_On>
 8001028:	e7bf      	b.n	8000faa <main+0xfe>
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 800102a:	f64f 7397 	movw	r3, #65431	; 0xff97
 800102e:	2100      	movs	r1, #0
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	9701      	str	r7, [sp, #4]
 8001034:	4633      	mov	r3, r6
 8001036:	4642      	mov	r2, r8
 8001038:	4608      	mov	r0, r1
 800103a:	f001 f817 	bl	800206c <WIFI_OpenClientConnection>
 800103e:	4604      	mov	r4, r0
 8001040:	2800      	cmp	r0, #0
 8001042:	d1df      	bne.n	8001004 <main+0x158>
            TERMOUT("> TCP Connection opened successfully.\n");
 8001044:	4844      	ldr	r0, [pc, #272]	; (8001158 <main+0x2ac>)
 8001046:	f004 fd3d 	bl	8005ac4 <puts>
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 800104a:	4f44      	ldr	r7, [pc, #272]	; (800115c <main+0x2b0>)
          TERMOUT("Received: %s\n",RxData);
 800104c:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8001178 <main+0x2cc>
          len = sprintf(data_str, "{\"Gyro\":{\"x\":%f,\"y\":%f,\"z\":%f},\"Acce\":{\"x\":%d,\"y\":%d,\"z\":%d}}", gyro_xyz[0], gyro_xyz[1], gyro_xyz[2], acc_xyz[0], acc_xyz[1], acc_xyz[2]); // convert data to string
 8001050:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800117c <main+0x2d0>
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 8001054:	f242 7610 	movw	r6, #10000	; 0x2710
    if(Socket != -1)
 8001058:	b14c      	cbz	r4, 800106e <main+0x1c2>
 800105a:	e7fe      	b.n	800105a <main+0x1ae>
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 800105c:	4840      	ldr	r0, [pc, #256]	; (8001160 <main+0x2b4>)
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 800105e:	f004 fd31 	bl	8005ac4 <puts>
    BSP_LED_On(LED2);
 8001062:	4620      	mov	r0, r4
 8001064:	e7d5      	b.n	8001012 <main+0x166>
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 8001066:	483f      	ldr	r0, [pc, #252]	; (8001164 <main+0x2b8>)
 8001068:	e7d0      	b.n	800100c <main+0x160>
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 800106a:	483f      	ldr	r0, [pc, #252]	; (8001168 <main+0x2bc>)
 800106c:	e7f7      	b.n	800105e <main+0x1b2>
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 800106e:	493b      	ldr	r1, [pc, #236]	; (800115c <main+0x2b0>)
 8001070:	9600      	str	r6, [sp, #0]
 8001072:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8001076:	f240 12f3 	movw	r2, #499	; 0x1f3
 800107a:	2000      	movs	r0, #0
 800107c:	f001 f830 	bl	80020e0 <WIFI_ReceiveData>
      if(ret == WIFI_STATUS_OK)
 8001080:	4605      	mov	r5, r0
 8001082:	2800      	cmp	r0, #0
 8001084:	d140      	bne.n	8001108 <main+0x25c>
        if(Datalen > 0)
 8001086:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800108a:	2b00      	cmp	r3, #0
 800108c:	d0e4      	beq.n	8001058 <main+0x1ac>
          RxData[Datalen]=0;
 800108e:	54f8      	strb	r0, [r7, r3]
          TERMOUT("Received: %s\n",RxData);
 8001090:	4639      	mov	r1, r7
 8001092:	4648      	mov	r0, r9
 8001094:	f004 fc90 	bl	80059b8 <iprintf>
    	  BSP_ACCELERO_AccGetXYZ(acc_xyz); // read acceleration data
 8001098:	a80f      	add	r0, sp, #60	; 0x3c
 800109a:	f001 f96b 	bl	8002374 <BSP_ACCELERO_AccGetXYZ>
    	  BSP_GYRO_GetXYZ(gyro_xyz); // read gyroscope data
 800109e:	a811      	add	r0, sp, #68	; 0x44
 80010a0:	f001 f986 	bl	80023b0 <BSP_GYRO_GetXYZ>
          len = sprintf(data_str, "{\"Gyro\":{\"x\":%f,\"y\":%f,\"z\":%f},\"Acce\":{\"x\":%d,\"y\":%d,\"z\":%d}}", gyro_xyz[0], gyro_xyz[1], gyro_xyz[2], acc_xyz[0], acc_xyz[1], acc_xyz[2]); // convert data to string
 80010a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80010a6:	f7ff fa4f 	bl	8000548 <__aeabi_f2d>
 80010aa:	460b      	mov	r3, r1
 80010ac:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80010b0:	9106      	str	r1, [sp, #24]
 80010b2:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 80010b6:	9105      	str	r1, [sp, #20]
 80010b8:	4602      	mov	r2, r0
 80010ba:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80010be:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80010c0:	9104      	str	r1, [sp, #16]
 80010c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80010c6:	f7ff fa3f 	bl	8000548 <__aeabi_f2d>
 80010ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80010ce:	9812      	ldr	r0, [sp, #72]	; 0x48
 80010d0:	f7ff fa3a 	bl	8000548 <__aeabi_f2d>
 80010d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80010d8:	e9cd 0100 	strd	r0, r1, [sp]
 80010dc:	4641      	mov	r1, r8
 80010de:	a816      	add	r0, sp, #88	; 0x58
 80010e0:	f004 fcf8 	bl	8005ad4 <siprintf>
          ret = WIFI_SendData(Socket, (uint8_t *)data_str, len, &Datalen, WIFI_WRITE_TIMEOUT); // send string over Wi-Fi
 80010e4:	9600      	str	r6, [sp, #0]
 80010e6:	b282      	uxth	r2, r0
 80010e8:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80010ec:	a916      	add	r1, sp, #88	; 0x58
 80010ee:	4628      	mov	r0, r5
 80010f0:	f000 ffe4 	bl	80020bc <WIFI_SendData>
          if (ret != WIFI_STATUS_OK)
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d0ad      	beq.n	8001054 <main+0x1a8>
            TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 80010f8:	481c      	ldr	r0, [pc, #112]	; (800116c <main+0x2c0>)
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 80010fa:	f004 fce3 	bl	8005ac4 <puts>
}
 80010fe:	2000      	movs	r0, #0
 8001100:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8001104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 8001108:	4819      	ldr	r0, [pc, #100]	; (8001170 <main+0x2c4>)
 800110a:	e7f6      	b.n	80010fa <main+0x24e>
 800110c:	20000e3c 	.word	0x20000e3c
 8001110:	40013800 	.word	0x40013800
 8001114:	080081a8 	.word	0x080081a8
 8001118:	080081e5 	.word	0x080081e5
 800111c:	080081ff 	.word	0x080081ff
 8001120:	0800823d 	.word	0x0800823d
 8001124:	08008275 	.word	0x08008275
 8001128:	080082b4 	.word	0x080082b4
 800112c:	080082c8 	.word	0x080082c8
 8001130:	08008310 	.word	0x08008310
 8001134:	0800832b 	.word	0x0800832b
 8001138:	0800837e 	.word	0x0800837e
 800113c:	08008387 	.word	0x08008387
 8001140:	08008393 	.word	0x08008393
 8001144:	080083af 	.word	0x080083af
 8001148:	20000000 	.word	0x20000000
 800114c:	080083de 	.word	0x080083de
 8001150:	08008442 	.word	0x08008442
 8001154:	0800835d 	.word	0x0800835d
 8001158:	0800841c 	.word	0x0800841c
 800115c:	2000027c 	.word	0x2000027c
 8001160:	08008463 	.word	0x08008463
 8001164:	08008492 	.word	0x08008492
 8001168:	080084b9 	.word	0x080084b9
 800116c:	08008532 	.word	0x08008532
 8001170:	08008563 	.word	0x08008563
 8001174:	08008411 	.word	0x08008411
 8001178:	080084e6 	.word	0x080084e6
 800117c:	080084f4 	.word	0x080084f4

08001180 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001180:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8001182:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8001186:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8001188:	2201      	movs	r2, #1
 800118a:	a901      	add	r1, sp, #4
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <__io_putchar+0x1c>)
 800118e:	f003 fe39 	bl	8004e04 <HAL_UART_Transmit>

  return ch;
}
 8001192:	9801      	ldr	r0, [sp, #4]
 8001194:	b003      	add	sp, #12
 8001196:	f85d fb04 	ldr.w	pc, [sp], #4
 800119a:	bf00      	nop
 800119c:	20000e3c 	.word	0x20000e3c

080011a0 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 80011a0:	2802      	cmp	r0, #2
 80011a2:	d101      	bne.n	80011a8 <HAL_GPIO_EXTI_Callback+0x8>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 80011a4:	f000 befc 	b.w	8001fa0 <SPI_WIFI_ISR>
    default:
    {
      break;
    }
  }
}
 80011a8:	4770      	bx	lr
	...

080011ac <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi);
 80011ac:	4801      	ldr	r0, [pc, #4]	; (80011b4 <SPI3_IRQHandler+0x8>)
 80011ae:	f003 bba1 	b.w	80048f4 <HAL_SPI_IRQHandler>
 80011b2:	bf00      	nop
 80011b4:	2000047c 	.word	0x2000047c

080011b8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80011b8:	4770      	bx	lr

080011ba <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <HardFault_Handler>

080011bc <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler>

080011be <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80011be:	e7fe      	b.n	80011be <BusFault_Handler>

080011c0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler>

080011c2 <SVC_Handler>:
 80011c2:	4770      	bx	lr

080011c4 <DebugMon_Handler>:
 80011c4:	4770      	bx	lr

080011c6 <PendSV_Handler>:
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80011c8:	f001 ba60 	b.w	800268c <HAL_IncTick>

080011cc <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80011cc:	2002      	movs	r0, #2
 80011ce:	f001 bbf9 	b.w	80029c4 <HAL_GPIO_EXTI_IRQHandler>

080011d2 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 80011d2:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0;
    uint8_t done_count = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                      /* Check for minus character */
 80011d4:	7803      	ldrb	r3, [r0, #0]
 80011d6:	2b2d      	cmp	r3, #45	; 0x2d
 80011d8:	d115      	bne.n	8001206 <ParseNumber+0x34>
        minus = 1;
        ptr++;
 80011da:	3001      	adds	r0, #1
        minus = 1;
 80011dc:	2501      	movs	r5, #1
 80011de:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0;
 80011e0:	462a      	mov	r2, r5
 80011e2:	2000      	movs	r0, #0
        done_count++;
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 80011e4:	270a      	movs	r7, #10
 80011e6:	e003      	b.n	80011f0 <ParseNumber+0x1e>
        ptr++;
        done_count++;
 80011e8:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 80011ea:	fb07 4000 	mla	r0, r7, r0, r4
        done_count++;
 80011ee:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 80011f0:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80011f4:	3c30      	subs	r4, #48	; 0x30
 80011f6:	b2e6      	uxtb	r6, r4
 80011f8:	2e09      	cmp	r6, #9
 80011fa:	d9f5      	bls.n	80011e8 <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80011fc:	b101      	cbz	r1, 8001200 <ParseNumber+0x2e>
        *cnt = done_count;
 80011fe:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                            /* Minus detected */
 8001200:	b105      	cbz	r5, 8001204 <ParseNumber+0x32>
        return 0 - sum;
 8001202:	4240      	negs	r0, r0
    }
    return sum;                                             /* Return number */
}
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0;
 8001206:	2500      	movs	r5, #0
 8001208:	e7e9      	b.n	80011de <ParseNumber+0xc>
	...

0800120c <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 800120c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001210:	4605      	mov	r5, r0
  uint16_t cmd_len = 0;
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 8001212:	4608      	mov	r0, r1
{
 8001214:	4689      	mov	r9, r1
 8001216:	4692      	mov	sl, r2
 8001218:	4698      	mov	r8, r3
  cmd_len = strlen((char*)cmd);
 800121a:	f7fe ffd9 	bl	80001d0 <strlen>

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 800121e:	f010 0401 	ands.w	r4, r0, #1
{
 8001222:	9f08      	ldr	r7, [sp, #32]
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8001224:	d12f      	bne.n	8001286 <AT_RequestSendData+0x7a>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001226:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 800122a:	b913      	cbnz	r3, 8001232 <AT_RequestSendData+0x26>
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 800122c:	2004      	movs	r0, #4
}
 800122e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001232:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 8001236:	2a00      	cmp	r2, #0
 8001238:	d0f8      	beq.n	800122c <AT_RequestSendData+0x20>
  cmd_len = strlen((char*)cmd);
 800123a:	b286      	uxth	r6, r0
  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800123c:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8001240:	4631      	mov	r1, r6
 8001242:	4648      	mov	r0, r9
 8001244:	4798      	blx	r3
  if (n == cmd_len)
 8001246:	b280      	uxth	r0, r0
 8001248:	4286      	cmp	r6, r0
 800124a:	d1ef      	bne.n	800122c <AT_RequestSendData+0x20>
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 800124c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8001250:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8001254:	4641      	mov	r1, r8
 8001256:	4650      	mov	r0, sl
 8001258:	4798      	blx	r3
    if (send_len == len)
 800125a:	4540      	cmp	r0, r8
 800125c:	d113      	bne.n	8001286 <AT_RequestSendData+0x7a>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 800125e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8001262:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8001266:	4621      	mov	r1, r4
 8001268:	4638      	mov	r0, r7
 800126a:	4798      	blx	r3
      if (recv_len > 0)
 800126c:	2800      	cmp	r0, #0
 800126e:	dd0c      	ble.n	800128a <AT_RequestSendData+0x7e>
        *(pdata + recv_len) = 0;
 8001270:	543c      	strb	r4, [r7, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001272:	490a      	ldr	r1, [pc, #40]	; (800129c <AT_RequestSendData+0x90>)
 8001274:	4638      	mov	r0, r7
 8001276:	f004 fc68 	bl	8005b4a <strstr>
 800127a:	b950      	cbnz	r0, 8001292 <AT_RequestSendData+0x86>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800127c:	4908      	ldr	r1, [pc, #32]	; (80012a0 <AT_RequestSendData+0x94>)
 800127e:	4638      	mov	r0, r7
 8001280:	f004 fc63 	bl	8005b4a <strstr>
 8001284:	b938      	cbnz	r0, 8001296 <AT_RequestSendData+0x8a>
          return ES_WIFI_STATUS_ERROR;
 8001286:	2002      	movs	r0, #2
 8001288:	e7d1      	b.n	800122e <AT_RequestSendData+0x22>
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 800128a:	3004      	adds	r0, #4
 800128c:	d1fb      	bne.n	8001286 <AT_RequestSendData+0x7a>
        return ES_WIFI_STATUS_MODULE_CRASH;
 800128e:	2006      	movs	r0, #6
 8001290:	e7cd      	b.n	800122e <AT_RequestSendData+0x22>
          return ES_WIFI_STATUS_OK;
 8001292:	4620      	mov	r0, r4
 8001294:	e7cb      	b.n	800122e <AT_RequestSendData+0x22>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001296:	2005      	movs	r0, #5
 8001298:	e7c9      	b.n	800122e <AT_RequestSendData+0x22>
 800129a:	bf00      	nop
 800129c:	08008597 	.word	0x08008597
 80012a0:	080085a0 	.word	0x080085a0

080012a4 <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80012a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int len;
  uint8_t *p=Obj->CmdData;

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80012a8:	f8d0 4120 	ldr.w	r4, [r0, #288]	; 0x120
{
 80012ac:	9e08      	ldr	r6, [sp, #32]
 80012ae:	4680      	mov	r8, r0
 80012b0:	4689      	mov	r9, r1
 80012b2:	4615      	mov	r5, r2
 80012b4:	461f      	mov	r7, r3
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80012b6:	b914      	cbnz	r4, 80012be <AT_RequestReceiveData+0x1a>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80012b8:	2004      	movs	r0, #4
}
 80012ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80012be:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f8      	beq.n	80012b8 <AT_RequestReceiveData+0x14>
  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 80012c6:	4608      	mov	r0, r1
 80012c8:	f7fe ff82 	bl	80001d0 <strlen>
 80012cc:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
 80012d0:	b281      	uxth	r1, r0
 80012d2:	4648      	mov	r0, r9
 80012d4:	47a0      	blx	r4
 80012d6:	2800      	cmp	r0, #0
 80012d8:	ddee      	ble.n	80012b8 <AT_RequestReceiveData+0x14>
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 80012da:	f8d8 3124 	ldr.w	r3, [r8, #292]	; 0x124
 80012de:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
 80012e2:	2100      	movs	r1, #0
 80012e4:	f508 7094 	add.w	r0, r8, #296	; 0x128
 80012e8:	4798      	blx	r3
    if ((p[0] != '\r') || (p[1] != '\n'))
 80012ea:	f898 3128 	ldrb.w	r3, [r8, #296]	; 0x128
 80012ee:	2b0d      	cmp	r3, #13
 80012f0:	d1e2      	bne.n	80012b8 <AT_RequestReceiveData+0x14>
 80012f2:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 80012f6:	2b0a      	cmp	r3, #10
 80012f8:	d1de      	bne.n	80012b8 <AT_RequestReceiveData+0x14>
    len -= 2;
 80012fa:	1e81      	subs	r1, r0, #2
    if (len >= AT_OK_STRING_LEN)
 80012fc:	2907      	cmp	r1, #7
 80012fe:	d9db      	bls.n	80012b8 <AT_RequestReceiveData+0x14>
    p += 2;
 8001300:	f508 7995 	add.w	r9, r8, #298	; 0x12a
     while(len && (p[len - 1] == 0x15)) len--;
 8001304:	f208 1829 	addw	r8, r8, #297	; 0x129
 8001308:	b119      	cbz	r1, 8001312 <AT_RequestReceiveData+0x6e>
 800130a:	f818 3001 	ldrb.w	r3, [r8, r1]
 800130e:	2b15      	cmp	r3, #21
 8001310:	d017      	beq.n	8001342 <AT_RequestReceiveData+0x9e>
     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001312:	f1a1 0408 	sub.w	r4, r1, #8
     p[len] = '\0';
 8001316:	f04f 0800 	mov.w	r8, #0
 800131a:	f809 8001 	strb.w	r8, [r9, r1]
     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 800131e:	eb09 0004 	add.w	r0, r9, r4
 8001322:	490a      	ldr	r1, [pc, #40]	; (800134c <AT_RequestReceiveData+0xa8>)
 8001324:	f004 fc11 	bl	8005b4a <strstr>
 8001328:	b168      	cbz	r0, 8001346 <AT_RequestReceiveData+0xa2>
       if (*ReadData > Reqlen)
 800132a:	b2a1      	uxth	r1, r4
 800132c:	42b9      	cmp	r1, r7
 800132e:	460a      	mov	r2, r1
 8001330:	bf28      	it	cs
 8001332:	463a      	movcs	r2, r7
 8001334:	8032      	strh	r2, [r6, #0]
       memcpy(pdata, p, *ReadData);
 8001336:	4649      	mov	r1, r9
 8001338:	4628      	mov	r0, r5
 800133a:	f003 febd 	bl	80050b8 <memcpy>
       return ES_WIFI_STATUS_OK;
 800133e:	4640      	mov	r0, r8
 8001340:	e7bb      	b.n	80012ba <AT_RequestReceiveData+0x16>
     while(len && (p[len - 1] == 0x15)) len--;
 8001342:	3901      	subs	r1, #1
 8001344:	e7e0      	b.n	8001308 <AT_RequestReceiveData+0x64>
       *ReadData = 0;
 8001346:	8030      	strh	r0, [r6, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001348:	2005      	movs	r0, #5
 800134a:	e7b6      	b.n	80012ba <AT_RequestReceiveData+0x16>
 800134c:	08008597 	.word	0x08008597

08001350 <ParseIP>:
{
 8001350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001352:	460e      	mov	r6, r1
  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8001354:	4604      	mov	r4, r0
 8001356:	b110      	cbz	r0, 800135e <ParseIP+0xe>
 8001358:	b109      	cbz	r1, 800135e <ParseIP+0xe>
 800135a:	2a03      	cmp	r2, #3
 800135c:	d816      	bhi.n	800138c <ParseIP+0x3c>
}
 800135e:	b003      	add	sp, #12
 8001360:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (*ptr != '.')
 8001362:	2b2e      	cmp	r3, #46	; 0x2e
    uint8_t done_count = 1;
 8001364:	f88d 7007 	strb.w	r7, [sp, #7]
    if (*ptr != '.')
 8001368:	d007      	beq.n	800137a <ParseIP+0x2a>
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 800136a:	f10d 0107 	add.w	r1, sp, #7
 800136e:	4620      	mov	r0, r4
 8001370:	f7ff ff2f 	bl	80011d2 <ParseNumber>
 8001374:	1c6b      	adds	r3, r5, #1
 8001376:	5570      	strb	r0, [r6, r5]
 8001378:	b2dd      	uxtb	r5, r3
    ptr = ptr + done_count;
 800137a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 800137e:	2d04      	cmp	r5, #4
    ptr = ptr + done_count;
 8001380:	441c      	add	r4, r3
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001382:	d0ec      	beq.n	800135e <ParseIP+0xe>
 8001384:	7823      	ldrb	r3, [r4, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1eb      	bne.n	8001362 <ParseIP+0x12>
 800138a:	e7e8      	b.n	800135e <ParseIP+0xe>
  uint8_t hex_8bits_count = 0;
 800138c:	2500      	movs	r5, #0
    uint8_t done_count = 1;
 800138e:	2701      	movs	r7, #1
 8001390:	e7f8      	b.n	8001384 <ParseIP+0x34>
	...

08001394 <AT_ExecuteCommand>:
{
 8001394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8001396:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
{
 800139a:	4604      	mov	r4, r0
 800139c:	460e      	mov	r6, r1
 800139e:	4615      	mov	r5, r2
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80013a0:	b38f      	cbz	r7, 8001406 <AT_ExecuteCommand+0x72>
 80013a2:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 80013a6:	b373      	cbz	r3, 8001406 <AT_ExecuteCommand+0x72>
  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 80013a8:	4608      	mov	r0, r1
 80013aa:	f7fe ff11 	bl	80001d0 <strlen>
 80013ae:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 80013b2:	b281      	uxth	r1, r0
 80013b4:	4630      	mov	r0, r6
 80013b6:	47b8      	blx	r7
  if( ret > 0)
 80013b8:	2800      	cmp	r0, #0
 80013ba:	dd24      	ble.n	8001406 <AT_ExecuteCommand+0x72>
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80013bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80013c0:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 80013c4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80013c8:	4628      	mov	r0, r5
 80013ca:	4798      	blx	r3
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 80013cc:	1e43      	subs	r3, r0, #1
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013d4:	d211      	bcs.n	80013fa <AT_ExecuteCommand+0x66>
      if (recv_len == ES_WIFI_DATA_SIZE)
 80013d6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
        recv_len--;
 80013da:	bf08      	it	eq
 80013dc:	b218      	sxtheq	r0, r3
      *(pdata + recv_len) = 0;
 80013de:	2400      	movs	r4, #0
 80013e0:	542c      	strb	r4, [r5, r0]
      if (strstr((char *)pdata, AT_OK_STRING))
 80013e2:	490a      	ldr	r1, [pc, #40]	; (800140c <AT_ExecuteCommand+0x78>)
 80013e4:	4628      	mov	r0, r5
 80013e6:	f004 fbb0 	bl	8005b4a <strstr>
 80013ea:	b950      	cbnz	r0, 8001402 <AT_ExecuteCommand+0x6e>
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 80013ec:	4908      	ldr	r1, [pc, #32]	; (8001410 <AT_ExecuteCommand+0x7c>)
 80013ee:	4628      	mov	r0, r5
 80013f0:	f004 fbab 	bl	8005b4a <strstr>
 80013f4:	b138      	cbz	r0, 8001406 <AT_ExecuteCommand+0x72>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80013f6:	2005      	movs	r0, #5
 80013f8:	e002      	b.n	8001400 <AT_ExecuteCommand+0x6c>
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 80013fa:	3004      	adds	r0, #4
 80013fc:	d103      	bne.n	8001406 <AT_ExecuteCommand+0x72>
      return ES_WIFI_STATUS_MODULE_CRASH;
 80013fe:	2006      	movs	r0, #6
}
 8001400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return ES_WIFI_STATUS_OK;
 8001402:	4620      	mov	r0, r4
 8001404:	e7fc      	b.n	8001400 <AT_ExecuteCommand+0x6c>
  return ES_WIFI_STATUS_IO_ERROR;
 8001406:	2004      	movs	r0, #4
 8001408:	e7fa      	b.n	8001400 <AT_ExecuteCommand+0x6c>
 800140a:	bf00      	nop
 800140c:	08008597 	.word	0x08008597
 8001410:	080085a0 	.word	0x080085a0

08001414 <ParseMAC>:
{
 8001414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((ptr != NULL) && (Mac != NULL))
 8001418:	b108      	cbz	r0, 800141e <ParseMAC+0xa>
 800141a:	2900      	cmp	r1, #0
 800141c:	d140      	bne.n	80014a0 <ParseMAC+0x8c>
}
 800141e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*ptr != ':')
 8001422:	2b3a      	cmp	r3, #58	; 0x3a
 8001424:	d039      	beq.n	800149a <ParseMAC+0x86>
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8001426:	3501      	adds	r5, #1
 8001428:	2600      	movs	r6, #0
 800142a:	b2ed      	uxtb	r5, r5
    uint8_t sum = 0;
 800142c:	4634      	mov	r4, r6
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 800142e:	f810 c006 	ldrb.w	ip, [r0, r6]
 8001432:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b09      	cmp	r3, #9
 800143a:	fa5f fe86 	uxtb.w	lr, r6
 800143e:	d906      	bls.n	800144e <ParseMAC+0x3a>
 8001440:	f02c 0820 	bic.w	r8, ip, #32
 8001444:	f1a8 0841 	sub.w	r8, r8, #65	; 0x41
 8001448:	f1b8 0f05 	cmp.w	r8, #5
 800144c:	d802      	bhi.n	8001454 <ParseMAC+0x40>
 800144e:	2e02      	cmp	r6, #2
 8001450:	d10b      	bne.n	800146a <ParseMAC+0x56>
 8001452:	46b6      	mov	lr, r6
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8001454:	55cc      	strb	r4, [r1, r7]
    ptr = ptr + done_count;
 8001456:	4470      	add	r0, lr
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001458:	42aa      	cmp	r2, r5
 800145a:	462f      	mov	r7, r5
 800145c:	d9df      	bls.n	800141e <ParseMAC+0xa>
 800145e:	2d05      	cmp	r5, #5
 8001460:	d8dd      	bhi.n	800141e <ParseMAC+0xa>
 8001462:	7803      	ldrb	r3, [r0, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1dc      	bne.n	8001422 <ParseMAC+0xe>
 8001468:	e7d9      	b.n	800141e <ParseMAC+0xa>
        sum <<= 4;
 800146a:	0124      	lsls	r4, r4, #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 800146c:	2b09      	cmp	r3, #9
        sum <<= 4;
 800146e:	b2e4      	uxtb	r4, r4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001470:	d906      	bls.n	8001480 <ParseMAC+0x6c>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8001472:	f1ac 0361 	sub.w	r3, ip, #97	; 0x61
 8001476:	2b05      	cmp	r3, #5
 8001478:	d806      	bhi.n	8001488 <ParseMAC+0x74>
        return (a - 'a') + 10;
 800147a:	f1ac 0357 	sub.w	r3, ip, #87	; 0x57
        return (a - 'A') + 10;
 800147e:	b2db      	uxtb	r3, r3
        sum += Hex2Num(*ptr);
 8001480:	441c      	add	r4, r3
 8001482:	b2e4      	uxtb	r4, r4
        done_count++;
 8001484:	3601      	adds	r6, #1
 8001486:	e7d2      	b.n	800142e <ParseMAC+0x1a>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8001488:	f1ac 0341 	sub.w	r3, ip, #65	; 0x41
 800148c:	2b05      	cmp	r3, #5
 800148e:	d802      	bhi.n	8001496 <ParseMAC+0x82>
        return (a - 'A') + 10;
 8001490:	f1ac 0337 	sub.w	r3, ip, #55	; 0x37
 8001494:	e7f3      	b.n	800147e <ParseMAC+0x6a>
    return 0;
 8001496:	2300      	movs	r3, #0
 8001498:	e7f2      	b.n	8001480 <ParseMAC+0x6c>
    uint8_t done_count = 1;
 800149a:	f04f 0e01 	mov.w	lr, #1
 800149e:	e7da      	b.n	8001456 <ParseMAC+0x42>
  uint8_t hex_8bits_count = 0;
 80014a0:	2500      	movs	r5, #0
 80014a2:	e7d9      	b.n	8001458 <ParseMAC+0x44>

080014a4 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80014a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 80014a8:	f247 5330 	movw	r3, #30000	; 0x7530
 80014ac:	f8c0 38f8 	str.w	r3, [r0, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 80014b0:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
{
 80014b4:	4604      	mov	r4, r0
  if (Obj->fops.IO_Init != NULL) {
 80014b6:	b91b      	cbnz	r3, 80014c0 <ES_WIFI_Init+0x1c>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 80014b8:	2502      	movs	r5, #2
   }
  }

  UNLOCK_WIFI();
  return ret;
}
 80014ba:	4628      	mov	r0, r5
 80014bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 80014c0:	2000      	movs	r0, #0
 80014c2:	4798      	blx	r3
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d1f7      	bne.n	80014b8 <ES_WIFI_Init+0x14>
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 80014c8:	4932      	ldr	r1, [pc, #200]	; (8001594 <ES_WIFI_Init+0xf0>)
 80014ca:	f504 7294 	add.w	r2, r4, #296	; 0x128
 80014ce:	4620      	mov	r0, r4
 80014d0:	f7ff ff60 	bl	8001394 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 80014d4:	4605      	mov	r5, r0
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d1ef      	bne.n	80014ba <ES_WIFI_Init+0x16>
  ptr = strtok((char *)pdata + 2, ",");
 80014da:	492f      	ldr	r1, [pc, #188]	; (8001598 <ES_WIFI_Init+0xf4>)
      ptr = strtok(ptr, "\r");
 80014dc:	4f2f      	ldr	r7, [pc, #188]	; (800159c <ES_WIFI_Init+0xf8>)
    ptr = strtok(NULL, ",");
 80014de:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8001598 <ES_WIFI_Init+0xf4>
  ptr = strtok((char *)pdata + 2, ",");
 80014e2:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80014e6:	f004 fb47 	bl	8005b78 <strtok>
  while (ptr != NULL){
 80014ea:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 80014ec:	f104 0868 	add.w	r8, r4, #104	; 0x68
 80014f0:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d0e1      	beq.n	80014ba <ES_WIFI_Init+0x16>
    switch (num++) {
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d80c      	bhi.n	8001514 <ES_WIFI_Init+0x70>
 80014fa:	e8df f003 	tbb	[pc, r3]
 80014fe:	1104      	.short	0x1104
 8001500:	392f251b 	.word	0x392f251b
 8001504:	3f          	.byte	0x3f
 8001505:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8001506:	4601      	mov	r1, r0
 8001508:	221f      	movs	r2, #31
 800150a:	4620      	mov	r0, r4
 800150c:	f004 fb0a 	bl	8005b24 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8001510:	2300      	movs	r3, #0
 8001512:	77e3      	strb	r3, [r4, #31]
    ptr = strtok(NULL, ",");
 8001514:	4649      	mov	r1, r9
 8001516:	2000      	movs	r0, #0
 8001518:	f004 fb2e 	bl	8005b78 <strtok>
 800151c:	3601      	adds	r6, #1
 800151e:	e7e7      	b.n	80014f0 <ES_WIFI_Init+0x4c>
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8001520:	4601      	mov	r1, r0
 8001522:	2217      	movs	r2, #23
 8001524:	f104 0020 	add.w	r0, r4, #32
 8001528:	f004 fafc 	bl	8005b24 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 800152c:	2300      	movs	r3, #0
 800152e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
      break;
 8001532:	e7ef      	b.n	8001514 <ES_WIFI_Init+0x70>
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8001534:	4601      	mov	r1, r0
 8001536:	220f      	movs	r2, #15
 8001538:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800153c:	f004 faf2 	bl	8005b24 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8001540:	2300      	movs	r3, #0
 8001542:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
      break;
 8001546:	e7e5      	b.n	8001514 <ES_WIFI_Init+0x70>
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8001548:	4601      	mov	r1, r0
 800154a:	220f      	movs	r2, #15
 800154c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8001550:	f004 fae8 	bl	8005b24 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8001554:	2300      	movs	r3, #0
 8001556:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
      break;
 800155a:	e7db      	b.n	8001514 <ES_WIFI_Init+0x70>
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 800155c:	4601      	mov	r1, r0
 800155e:	220f      	movs	r2, #15
 8001560:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001564:	f004 fade 	bl	8005b24 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8001568:	2300      	movs	r3, #0
 800156a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      break;
 800156e:	e7d1      	b.n	8001514 <ES_WIFI_Init+0x70>
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8001570:	2100      	movs	r1, #0
 8001572:	f7ff fe2e 	bl	80011d2 <ParseNumber>
 8001576:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
      break;
 800157a:	e7cb      	b.n	8001514 <ES_WIFI_Init+0x70>
      ptr = strtok(ptr, "\r");
 800157c:	4639      	mov	r1, r7
 800157e:	f004 fafb 	bl	8005b78 <strtok>
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8001582:	221f      	movs	r2, #31
      ptr = strtok(ptr, "\r");
 8001584:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8001586:	4640      	mov	r0, r8
 8001588:	f004 facc 	bl	8005b24 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 800158c:	2300      	movs	r3, #0
 800158e:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
      break;
 8001592:	e7bf      	b.n	8001514 <ES_WIFI_Init+0x70>
 8001594:	080085c8 	.word	0x080085c8
 8001598:	080087d0 	.word	0x080087d0
 800159c:	08008697 	.word	0x08008697

080015a0 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 80015a0:	b530      	push	{r4, r5, lr}
 80015a2:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80015a6:	b158      	cbz	r0, 80015c0 <ES_WIFI_RegisterBusIO+0x20>
 80015a8:	b151      	cbz	r1, 80015c0 <ES_WIFI_RegisterBusIO+0x20>
 80015aa:	b14a      	cbz	r2, 80015c0 <ES_WIFI_RegisterBusIO+0x20>
 80015ac:	b145      	cbz	r5, 80015c0 <ES_WIFI_RegisterBusIO+0x20>
 80015ae:	b13c      	cbz	r4, 80015c0 <ES_WIFI_RegisterBusIO+0x20>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_DeInit = IO_DeInit;
 80015b0:	e9c0 1245 	strd	r1, r2, [r0, #276]	; 0x114
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 80015b4:	e9c0 5448 	strd	r5, r4, [r0, #288]	; 0x120
  Obj->fops.IO_Delay = IO_Delay;
 80015b8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80015bc:	2000      	movs	r0, #0
}
 80015be:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 80015c0:	2002      	movs	r0, #2
 80015c2:	e7fc      	b.n	80015be <ES_WIFI_RegisterBusIO+0x1e>

080015c4 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 80015c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 80015c6:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 80015ca:	4605      	mov	r5, r0
 80015cc:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 80015ce:	4620      	mov	r0, r4
 80015d0:	460a      	mov	r2, r1
 80015d2:	4918      	ldr	r1, [pc, #96]	; (8001634 <ES_WIFI_Connect+0x70>)
{
 80015d4:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 80015d6:	f004 fa7d 	bl	8005ad4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015da:	4622      	mov	r2, r4
 80015dc:	4621      	mov	r1, r4
 80015de:	4628      	mov	r0, r5
 80015e0:	f7ff fed8 	bl	8001394 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 80015e4:	bb20      	cbnz	r0, 8001630 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 80015e6:	4914      	ldr	r1, [pc, #80]	; (8001638 <ES_WIFI_Connect+0x74>)
 80015e8:	463a      	mov	r2, r7
 80015ea:	4620      	mov	r0, r4
 80015ec:	f004 fa72 	bl	8005ad4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80015f0:	4622      	mov	r2, r4
 80015f2:	4621      	mov	r1, r4
 80015f4:	4628      	mov	r0, r5
 80015f6:	f7ff fecd 	bl	8001394 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 80015fa:	b9c8      	cbnz	r0, 8001630 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 80015fc:	490f      	ldr	r1, [pc, #60]	; (800163c <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 80015fe:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8001602:	4632      	mov	r2, r6
 8001604:	4620      	mov	r0, r4
 8001606:	f004 fa65 	bl	8005ad4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800160a:	4622      	mov	r2, r4
 800160c:	4621      	mov	r1, r4
 800160e:	4628      	mov	r0, r5
 8001610:	f7ff fec0 	bl	8001394 <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 8001614:	b960      	cbnz	r0, 8001630 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001616:	490a      	ldr	r1, [pc, #40]	; (8001640 <ES_WIFI_Connect+0x7c>)
 8001618:	4620      	mov	r0, r4
 800161a:	f004 fa7b 	bl	8005b14 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800161e:	4622      	mov	r2, r4
 8001620:	4621      	mov	r1, r4
 8001622:	4628      	mov	r0, r5
 8001624:	f7ff feb6 	bl	8001394 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8001628:	b910      	cbnz	r0, 8001630 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 800162a:	2301      	movs	r3, #1
 800162c:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8001630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001632:	bf00      	nop
 8001634:	080085de 	.word	0x080085de
 8001638:	080085e5 	.word	0x080085e5
 800163c:	080085ec 	.word	0x080085ec
 8001640:	080085f3 	.word	0x080085f3

08001644 <ES_WIFI_IsConnected>:
{
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8001644:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8001648:	b510      	push	{r4, lr}
  sprintf((char *)Obj->CmdData, "CS\r");
 800164a:	490b      	ldr	r1, [pc, #44]	; (8001678 <ES_WIFI_IsConnected+0x34>)
{
 800164c:	4604      	mov	r4, r0
  sprintf((char *)Obj->CmdData, "CS\r");
 800164e:	4610      	mov	r0, r2
 8001650:	f004 fa60 	bl	8005b14 <strcpy>
 8001654:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001656:	4601      	mov	r1, r0
 8001658:	4620      	mov	r0, r4
 800165a:	f7ff fe9b 	bl	8001394 <AT_ExecuteCommand>
  if (ret == ES_WIFI_STATUS_OK)
 800165e:	b938      	cbnz	r0, 8001670 <ES_WIFI_IsConnected+0x2c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8001660:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8001664:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8001668:	4253      	negs	r3, r2
 800166a:	4153      	adcs	r3, r2
 800166c:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
}
 8001670:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8001674:	bd10      	pop	{r4, pc}
 8001676:	bf00      	nop
 8001678:	080085f7 	.word	0x080085f7

0800167c <ES_WIFI_GetNetworkSettings>:
{
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 800167c:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8001680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char *)Obj->CmdData, "C?\r");
 8001684:	493b      	ldr	r1, [pc, #236]	; (8001774 <ES_WIFI_GetNetworkSettings+0xf8>)
{
 8001686:	4604      	mov	r4, r0
  sprintf((char *)Obj->CmdData, "C?\r");
 8001688:	4610      	mov	r0, r2
 800168a:	f004 fa43 	bl	8005b14 <strcpy>
 800168e:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001690:	4601      	mov	r1, r0
 8001692:	4620      	mov	r0, r4
 8001694:	f7ff fe7e 	bl	8001394 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8001698:	4606      	mov	r6, r0
 800169a:	b960      	cbnz	r0, 80016b6 <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 800169c:	4936      	ldr	r1, [pc, #216]	; (8001778 <ES_WIFI_GetNetworkSettings+0xfc>)
    ptr = strtok(NULL, ",");
 800169e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8001778 <ES_WIFI_GetNetworkSettings+0xfc>
  ptr = strtok(pdata + 2, ",");
 80016a2:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80016a6:	f004 fa67 	bl	8005b78 <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80016aa:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 80016ae:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 80016b0:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 80016b4:	b910      	cbnz	r0, 80016bc <ES_WIFI_GetNetworkSettings+0x40>
  }

  UNLOCK_WIFI();

  return ret;
}
 80016b6:	4630      	mov	r0, r6
 80016b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 80016bc:	2d0b      	cmp	r5, #11
 80016be:	d80e      	bhi.n	80016de <ES_WIFI_GetNetworkSettings+0x62>
 80016c0:	e8df f005 	tbb	[pc, r5]
 80016c4:	2a241b06 	.word	0x2a241b06
 80016c8:	403c3630 	.word	0x403c3630
 80016cc:	514b4844 	.word	0x514b4844
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 80016d0:	4601      	mov	r1, r0
 80016d2:	2220      	movs	r2, #32
 80016d4:	4638      	mov	r0, r7
 80016d6:	f004 fa25 	bl	8005b24 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 80016da:	f884 60ad 	strb.w	r6, [r4, #173]	; 0xad
    ptr = strtok(NULL, ",");
 80016de:	4649      	mov	r1, r9
 80016e0:	2000      	movs	r0, #0
 80016e2:	f004 fa49 	bl	8005b78 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 80016e6:	2800      	cmp	r0, #0
 80016e8:	d0e5      	beq.n	80016b6 <ES_WIFI_GetNetworkSettings+0x3a>
 80016ea:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80016ee:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 80016f0:	bf14      	ite	ne
 80016f2:	3501      	addne	r5, #1
      num++;
 80016f4:	3502      	addeq	r5, #2
 80016f6:	b2ed      	uxtb	r5, r5
 80016f8:	e7dc      	b.n	80016b4 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 80016fa:	4601      	mov	r1, r0
 80016fc:	2220      	movs	r2, #32
 80016fe:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 8001702:	f004 fa0f 	bl	8005b24 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8001706:	f884 60ce 	strb.w	r6, [r4, #206]	; 0xce
      break;
 800170a:	e7e8      	b.n	80016de <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800170c:	2100      	movs	r1, #0
 800170e:	f7ff fd60 	bl	80011d2 <ParseNumber>
 8001712:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
        break;
 8001716:	e7e2      	b.n	80016de <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8001718:	2100      	movs	r1, #0
 800171a:	f7ff fd5a 	bl	80011d2 <ParseNumber>
 800171e:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
      break;
 8001722:	e7dc      	b.n	80016de <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8001724:	2100      	movs	r1, #0
 8001726:	f7ff fd54 	bl	80011d2 <ParseNumber>
 800172a:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
      break;
 800172e:	e7d6      	b.n	80016de <ES_WIFI_GetNetworkSettings+0x62>
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8001730:	2204      	movs	r2, #4
 8001732:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8001736:	f7ff fe0b 	bl	8001350 <ParseIP>
      break;
 800173a:	e7d0      	b.n	80016de <ES_WIFI_GetNetworkSettings+0x62>
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 800173c:	2204      	movs	r2, #4
 800173e:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8001742:	e7f8      	b.n	8001736 <ES_WIFI_GetNetworkSettings+0xba>
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8001744:	2204      	movs	r2, #4
 8001746:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 800174a:	e7f4      	b.n	8001736 <ES_WIFI_GetNetworkSettings+0xba>
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 800174c:	2204      	movs	r2, #4
 800174e:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 8001752:	e7f0      	b.n	8001736 <ES_WIFI_GetNetworkSettings+0xba>
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8001754:	2204      	movs	r2, #4
 8001756:	4641      	mov	r1, r8
 8001758:	e7ed      	b.n	8001736 <ES_WIFI_GetNetworkSettings+0xba>
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 800175a:	2100      	movs	r1, #0
 800175c:	f7ff fd39 	bl	80011d2 <ParseNumber>
 8001760:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
      break;
 8001764:	e7bb      	b.n	80016de <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8001766:	2100      	movs	r1, #0
 8001768:	f7ff fd33 	bl	80011d2 <ParseNumber>
 800176c:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
      break;
 8001770:	e7b5      	b.n	80016de <ES_WIFI_GetNetworkSettings+0x62>
 8001772:	bf00      	nop
 8001774:	080085ff 	.word	0x080085ff
 8001778:	080087d0 	.word	0x080087d0

0800177c <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 800177c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800177e:	4617      	mov	r7, r2
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8001780:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8001784:	4604      	mov	r4, r0
 8001786:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData, "Z5\r");
 8001788:	4610      	mov	r0, r2
 800178a:	490a      	ldr	r1, [pc, #40]	; (80017b4 <ES_WIFI_GetMACAddress+0x38>)
 800178c:	f004 f9c2 	bl	8005b14 <strcpy>
 8001790:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001792:	4601      	mov	r1, r0
 8001794:	4620      	mov	r0, r4
 8001796:	f7ff fdfd 	bl	8001394 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 800179a:	4605      	mov	r5, r0
 800179c:	b940      	cbnz	r0, 80017b0 <ES_WIFI_GetMACAddress+0x34>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 800179e:	4906      	ldr	r1, [pc, #24]	; (80017b8 <ES_WIFI_GetMACAddress+0x3c>)
 80017a0:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 80017a4:	f004 f9e8 	bl	8005b78 <strtok>
    ParseMAC(ptr, mac, MacLength);
 80017a8:	463a      	mov	r2, r7
 80017aa:	4631      	mov	r1, r6
 80017ac:	f7ff fe32 	bl	8001414 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
}
 80017b0:	4628      	mov	r0, r5
 80017b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017b4:	08008641 	.word	0x08008641
 80017b8:	0800888f 	.word	0x0800888f

080017bc <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80017bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80017be:	780b      	ldrb	r3, [r1, #0]
{
 80017c0:	4605      	mov	r5, r0
 80017c2:	460e      	mov	r6, r1
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 80017c4:	b10b      	cbz	r3, 80017ca <ES_WIFI_StartClientConnection+0xe>
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d102      	bne.n	80017d0 <ES_WIFI_StartClientConnection+0x14>
 80017ca:	8873      	ldrh	r3, [r6, #2]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d064      	beq.n	800189a <ES_WIFI_StartClientConnection+0xde>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80017d0:	f505 7494 	add.w	r4, r5, #296	; 0x128
 80017d4:	7872      	ldrb	r2, [r6, #1]
 80017d6:	4932      	ldr	r1, [pc, #200]	; (80018a0 <ES_WIFI_StartClientConnection+0xe4>)
 80017d8:	4620      	mov	r0, r4
 80017da:	f004 f97b 	bl	8005ad4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017de:	4622      	mov	r2, r4
 80017e0:	4621      	mov	r1, r4
 80017e2:	4628      	mov	r0, r5
 80017e4:	f7ff fdd6 	bl	8001394 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 80017e8:	2800      	cmp	r0, #0
 80017ea:	d146      	bne.n	800187a <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 80017ec:	7832      	ldrb	r2, [r6, #0]
 80017ee:	492d      	ldr	r1, [pc, #180]	; (80018a4 <ES_WIFI_StartClientConnection+0xe8>)
 80017f0:	4620      	mov	r0, r4
 80017f2:	f004 f96f 	bl	8005ad4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80017f6:	4622      	mov	r2, r4
 80017f8:	4621      	mov	r1, r4
 80017fa:	4628      	mov	r0, r5
 80017fc:	f7ff fdca 	bl	8001394 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001800:	2800      	cmp	r0, #0
 8001802:	d13a      	bne.n	800187a <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8001804:	88b2      	ldrh	r2, [r6, #4]
 8001806:	4928      	ldr	r1, [pc, #160]	; (80018a8 <ES_WIFI_StartClientConnection+0xec>)
 8001808:	4620      	mov	r0, r4
 800180a:	f004 f963 	bl	8005ad4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800180e:	4622      	mov	r2, r4
 8001810:	4621      	mov	r1, r4
 8001812:	4628      	mov	r0, r5
 8001814:	f7ff fdbe 	bl	8001394 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001818:	bb78      	cbnz	r0, 800187a <ES_WIFI_StartClientConnection+0xbe>
 800181a:	7833      	ldrb	r3, [r6, #0]
 800181c:	b30b      	cbz	r3, 8001862 <ES_WIFI_StartClientConnection+0xa6>
 800181e:	2b03      	cmp	r3, #3
 8001820:	d01f      	beq.n	8001862 <ES_WIFI_StartClientConnection+0xa6>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001822:	7833      	ldrb	r3, [r6, #0]
 8001824:	bb5b      	cbnz	r3, 800187e <ES_WIFI_StartClientConnection+0xc2>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8001826:	7a73      	ldrb	r3, [r6, #9]
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	7a33      	ldrb	r3, [r6, #8]
 800182c:	79b2      	ldrb	r2, [r6, #6]
 800182e:	491f      	ldr	r1, [pc, #124]	; (80018ac <ES_WIFI_StartClientConnection+0xf0>)
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	4620      	mov	r0, r4
 8001834:	79f3      	ldrb	r3, [r6, #7]
 8001836:	f004 f94d 	bl	8005ad4 <siprintf>
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800183a:	4622      	mov	r2, r4
 800183c:	4621      	mov	r1, r4
 800183e:	4628      	mov	r0, r5
 8001840:	f7ff fda8 	bl	8001394 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8001844:	b9c8      	cbnz	r0, 800187a <ES_WIFI_StartClientConnection+0xbe>
 8001846:	7833      	ldrb	r3, [r6, #0]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d11a      	bne.n	8001882 <ES_WIFI_StartClientConnection+0xc6>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 800184c:	4918      	ldr	r1, [pc, #96]	; (80018b0 <ES_WIFI_StartClientConnection+0xf4>)
 800184e:	4620      	mov	r0, r4
 8001850:	f004 f960 	bl	8005b14 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001854:	4622      	mov	r2, r4
 8001856:	4621      	mov	r1, r4
 8001858:	4628      	mov	r0, r5
 800185a:	f7ff fd9b 	bl	8001394 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 800185e:	b180      	cbz	r0, 8001882 <ES_WIFI_StartClientConnection+0xc6>
 8001860:	e00b      	b.n	800187a <ES_WIFI_StartClientConnection+0xbe>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8001862:	8872      	ldrh	r2, [r6, #2]
 8001864:	4913      	ldr	r1, [pc, #76]	; (80018b4 <ES_WIFI_StartClientConnection+0xf8>)
 8001866:	4620      	mov	r0, r4
 8001868:	f004 f934 	bl	8005ad4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800186c:	4622      	mov	r2, r4
 800186e:	4621      	mov	r1, r4
 8001870:	4628      	mov	r0, r5
 8001872:	f7ff fd8f 	bl	8001394 <AT_ExecuteCommand>
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8001876:	2800      	cmp	r0, #0
 8001878:	d0d3      	beq.n	8001822 <ES_WIFI_StartClientConnection+0x66>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 800187a:	b002      	add	sp, #8
 800187c:	bd70      	pop	{r4, r5, r6, pc}
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 800187e:	2b03      	cmp	r3, #3
 8001880:	d0d1      	beq.n	8001826 <ES_WIFI_StartClientConnection+0x6a>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8001882:	490d      	ldr	r1, [pc, #52]	; (80018b8 <ES_WIFI_StartClientConnection+0xfc>)
 8001884:	4620      	mov	r0, r4
 8001886:	f004 f945 	bl	8005b14 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800188a:	4622      	mov	r2, r4
 800188c:	4621      	mov	r1, r4
 800188e:	4628      	mov	r0, r5
}
 8001890:	b002      	add	sp, #8
 8001892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001896:	f7ff bd7d 	b.w	8001394 <AT_ExecuteCommand>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 800189a:	2002      	movs	r0, #2
 800189c:	e7ed      	b.n	800187a <ES_WIFI_StartClientConnection+0xbe>
 800189e:	bf00      	nop
 80018a0:	080086a0 	.word	0x080086a0
 80018a4:	080086a7 	.word	0x080086a7
 80018a8:	080086ae 	.word	0x080086ae
 80018ac:	080086c2 	.word	0x080086c2
 80018b0:	080086d2 	.word	0x080086d2
 80018b4:	080086b5 	.word	0x080086b5
 80018b8:	080086bc 	.word	0x080086bc

080018bc <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 80018bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 80018c0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 80018c4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80018c8:	bf28      	it	cs
 80018ca:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
  }

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80018ce:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 80018d2:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 80018d4:	f8a8 3000 	strh.w	r3, [r8]
{
 80018d8:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80018da:	4628      	mov	r0, r5
 80018dc:	460a      	mov	r2, r1
 80018de:	492e      	ldr	r1, [pc, #184]	; (8001998 <ES_WIFI_SendData+0xdc>)
 80018e0:	461f      	mov	r7, r3
 80018e2:	f004 f8f7 	bl	8005ad4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80018e6:	462a      	mov	r2, r5
 80018e8:	4629      	mov	r1, r5
 80018ea:	4630      	mov	r0, r6
 80018ec:	f7ff fd52 	bl	8001394 <AT_ExecuteCommand>
  if (ret == ES_WIFI_STATUS_OK)
 80018f0:	4604      	mov	r4, r0
 80018f2:	2800      	cmp	r0, #0
 80018f4:	d147      	bne.n	8001986 <ES_WIFI_SendData+0xca>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 80018f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80018f8:	4928      	ldr	r1, [pc, #160]	; (800199c <ES_WIFI_SendData+0xe0>)
 80018fa:	2a01      	cmp	r2, #1
 80018fc:	bf38      	it	cc
 80018fe:	2201      	movcc	r2, #1
 8001900:	4628      	mov	r0, r5
 8001902:	f004 f8e7 	bl	8005ad4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001906:	462a      	mov	r2, r5
 8001908:	4629      	mov	r1, r5
 800190a:	4630      	mov	r0, r6
 800190c:	f7ff fd42 	bl	8001394 <AT_ExecuteCommand>

    if (ret == ES_WIFI_STATUS_OK)
 8001910:	4604      	mov	r4, r0
 8001912:	bb80      	cbnz	r0, 8001976 <ES_WIFI_SendData+0xba>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8001914:	4922      	ldr	r1, [pc, #136]	; (80019a0 <ES_WIFI_SendData+0xe4>)
 8001916:	463a      	mov	r2, r7
 8001918:	4628      	mov	r0, r5
 800191a:	f004 f8db 	bl	8005ad4 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 800191e:	9500      	str	r5, [sp, #0]
 8001920:	463b      	mov	r3, r7
 8001922:	464a      	mov	r2, r9
 8001924:	4629      	mov	r1, r5
 8001926:	4630      	mov	r0, r6
 8001928:	f7ff fc70 	bl	800120c <AT_RequestSendData>

      if (ret == ES_WIFI_STATUS_OK)
 800192c:	4604      	mov	r4, r0
 800192e:	b998      	cbnz	r0, 8001958 <ES_WIFI_SendData+0x9c>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8001930:	491c      	ldr	r1, [pc, #112]	; (80019a4 <ES_WIFI_SendData+0xe8>)
 8001932:	4628      	mov	r0, r5
 8001934:	f004 f909 	bl	8005b4a <strstr>
 8001938:	b1c8      	cbz	r0, 800196e <ES_WIFI_SendData+0xb2>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 800193a:	491b      	ldr	r1, [pc, #108]	; (80019a8 <ES_WIFI_SendData+0xec>)
 800193c:	481b      	ldr	r0, [pc, #108]	; (80019ac <ES_WIFI_SendData+0xf0>)
 800193e:	f640 1201 	movw	r2, #2305	; 0x901
 8001942:	f004 f839 	bl	80059b8 <iprintf>
 8001946:	481a      	ldr	r0, [pc, #104]	; (80019b0 <ES_WIFI_SendData+0xf4>)
 8001948:	4629      	mov	r1, r5
 800194a:	f004 f835 	bl	80059b8 <iprintf>
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	f8a8 3000 	strh.w	r3, [r8]
 8001954:	2402      	movs	r4, #2
 8001956:	e00a      	b.n	800196e <ES_WIFI_SendData+0xb2>
        DEBUG("Send Data command failed\n");
 8001958:	4913      	ldr	r1, [pc, #76]	; (80019a8 <ES_WIFI_SendData+0xec>)
 800195a:	4814      	ldr	r0, [pc, #80]	; (80019ac <ES_WIFI_SendData+0xf0>)
 800195c:	f640 1207 	movw	r2, #2311	; 0x907
 8001960:	f004 f82a 	bl	80059b8 <iprintf>
 8001964:	4813      	ldr	r0, [pc, #76]	; (80019b4 <ES_WIFI_SendData+0xf8>)
   DEBUG("P0 command failed\n");
 8001966:	f004 f8ad 	bl	8005ac4 <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 800196a:	2c02      	cmp	r4, #2
 800196c:	d0ef      	beq.n	800194e <ES_WIFI_SendData+0x92>
  }

  UNLOCK_WIFI();

  return ret;
}
 800196e:	4620      	mov	r0, r4
 8001970:	b003      	add	sp, #12
 8001972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n");
 8001976:	490c      	ldr	r1, [pc, #48]	; (80019a8 <ES_WIFI_SendData+0xec>)
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <ES_WIFI_SendData+0xf0>)
 800197a:	f640 120c 	movw	r2, #2316	; 0x90c
 800197e:	f004 f81b 	bl	80059b8 <iprintf>
 8001982:	480d      	ldr	r0, [pc, #52]	; (80019b8 <ES_WIFI_SendData+0xfc>)
 8001984:	e7ef      	b.n	8001966 <ES_WIFI_SendData+0xaa>
   DEBUG("P0 command failed\n");
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <ES_WIFI_SendData+0xec>)
 8001988:	4808      	ldr	r0, [pc, #32]	; (80019ac <ES_WIFI_SendData+0xf0>)
 800198a:	f640 1211 	movw	r2, #2321	; 0x911
 800198e:	f004 f813 	bl	80059b8 <iprintf>
 8001992:	480a      	ldr	r0, [pc, #40]	; (80019bc <ES_WIFI_SendData+0x100>)
 8001994:	e7e7      	b.n	8001966 <ES_WIFI_SendData+0xaa>
 8001996:	bf00      	nop
 8001998:	080086a0 	.word	0x080086a0
 800199c:	0800887c 	.word	0x0800887c
 80019a0:	08008884 	.word	0x08008884
 80019a4:	0800888d 	.word	0x0800888d
 80019a8:	08008714 	.word	0x08008714
 80019ac:	0800878d 	.word	0x0800878d
 80019b0:	08008892 	.word	0x08008892
 80019b4:	080088ad 	.word	0x080088ad
 80019b8:	080088c6 	.word	0x080088c6
 80019bc:	080088d8 	.word	0x080088d8

080019c0 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 80019c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 80019c4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 80019c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80019cc:	4606      	mov	r6, r0
 80019ce:	4690      	mov	r8, r2
 80019d0:	461f      	mov	r7, r3
  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 80019d2:	d867      	bhi.n	8001aa4 <ES_WIFI_ReceiveData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80019d4:	f500 7594 	add.w	r5, r0, #296	; 0x128
 80019d8:	460a      	mov	r2, r1
 80019da:	4628      	mov	r0, r5
 80019dc:	4932      	ldr	r1, [pc, #200]	; (8001aa8 <ES_WIFI_ReceiveData+0xe8>)
 80019de:	f004 f879 	bl	8005ad4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019e2:	462a      	mov	r2, r5
 80019e4:	4629      	mov	r1, r5
 80019e6:	4630      	mov	r0, r6
 80019e8:	f7ff fcd4 	bl	8001394 <AT_ExecuteCommand>
 80019ec:	4604      	mov	r4, r0
 80019ee:	4682      	mov	sl, r0

    if (ret == ES_WIFI_STATUS_OK)
 80019f0:	2800      	cmp	r0, #0
 80019f2:	d149      	bne.n	8001a88 <ES_WIFI_ReceiveData+0xc8>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80019f4:	492d      	ldr	r1, [pc, #180]	; (8001aac <ES_WIFI_ReceiveData+0xec>)
 80019f6:	463a      	mov	r2, r7
 80019f8:	4628      	mov	r0, r5
 80019fa:	f004 f86b 	bl	8005ad4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019fe:	462a      	mov	r2, r5
 8001a00:	4629      	mov	r1, r5
 8001a02:	4630      	mov	r0, r6
 8001a04:	f7ff fcc6 	bl	8001394 <AT_ExecuteCommand>
      if (ret == ES_WIFI_STATUS_OK)
 8001a08:	4604      	mov	r4, r0
 8001a0a:	bb88      	cbnz	r0, 8001a70 <ES_WIFI_ReceiveData+0xb0>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8001a0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001a0e:	4928      	ldr	r1, [pc, #160]	; (8001ab0 <ES_WIFI_ReceiveData+0xf0>)
 8001a10:	2a01      	cmp	r2, #1
 8001a12:	bf38      	it	cc
 8001a14:	2201      	movcc	r2, #1
 8001a16:	4628      	mov	r0, r5
 8001a18:	f004 f85c 	bl	8005ad4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a1c:	462a      	mov	r2, r5
 8001a1e:	4629      	mov	r1, r5
 8001a20:	4630      	mov	r0, r6
 8001a22:	f7ff fcb7 	bl	8001394 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 8001a26:	4604      	mov	r4, r0
 8001a28:	b9d0      	cbnz	r0, 8001a60 <ES_WIFI_ReceiveData+0xa0>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001a2a:	4922      	ldr	r1, [pc, #136]	; (8001ab4 <ES_WIFI_ReceiveData+0xf4>)
 8001a2c:	4628      	mov	r0, r5
 8001a2e:	f004 f871 	bl	8005b14 <strcpy>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8001a32:	f8cd 9000 	str.w	r9, [sp]
 8001a36:	463b      	mov	r3, r7
 8001a38:	4642      	mov	r2, r8
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	4630      	mov	r0, r6
 8001a3e:	f7ff fc31 	bl	80012a4 <AT_RequestReceiveData>
          if (ret != ES_WIFI_STATUS_OK)
 8001a42:	4604      	mov	r4, r0
 8001a44:	b140      	cbz	r0, 8001a58 <ES_WIFI_ReceiveData+0x98>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 8001a46:	491c      	ldr	r1, [pc, #112]	; (8001ab8 <ES_WIFI_ReceiveData+0xf8>)
 8001a48:	481c      	ldr	r0, [pc, #112]	; (8001abc <ES_WIFI_ReceiveData+0xfc>)
 8001a4a:	f640 12a9 	movw	r2, #2473	; 0x9a9
 8001a4e:	f003 ffb3 	bl	80059b8 <iprintf>
 8001a52:	481b      	ldr	r0, [pc, #108]	; (8001ac0 <ES_WIFI_ReceiveData+0x100>)
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 8001a54:	f004 f836 	bl	8005ac4 <puts>
  }

  UNLOCK_WIFI();

  return ret;
}
 8001a58:	4620      	mov	r0, r4
 8001a5a:	b002      	add	sp, #8
 8001a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         DEBUG("Setting timeout failed\n");
 8001a60:	4915      	ldr	r1, [pc, #84]	; (8001ab8 <ES_WIFI_ReceiveData+0xf8>)
 8001a62:	4816      	ldr	r0, [pc, #88]	; (8001abc <ES_WIFI_ReceiveData+0xfc>)
 8001a64:	f640 12ae 	movw	r2, #2478	; 0x9ae
 8001a68:	f003 ffa6 	bl	80059b8 <iprintf>
 8001a6c:	4815      	ldr	r0, [pc, #84]	; (8001ac4 <ES_WIFI_ReceiveData+0x104>)
 8001a6e:	e7f1      	b.n	8001a54 <ES_WIFI_ReceiveData+0x94>
        DEBUG("Setting requested len failed\n");
 8001a70:	4911      	ldr	r1, [pc, #68]	; (8001ab8 <ES_WIFI_ReceiveData+0xf8>)
 8001a72:	4812      	ldr	r0, [pc, #72]	; (8001abc <ES_WIFI_ReceiveData+0xfc>)
 8001a74:	f640 12b3 	movw	r2, #2483	; 0x9b3
 8001a78:	f003 ff9e 	bl	80059b8 <iprintf>
 8001a7c:	4812      	ldr	r0, [pc, #72]	; (8001ac8 <ES_WIFI_ReceiveData+0x108>)
 8001a7e:	f004 f821 	bl	8005ac4 <puts>
        *Receivedlen = 0;
 8001a82:	f8a9 a000 	strh.w	sl, [r9]
 8001a86:	e7e7      	b.n	8001a58 <ES_WIFI_ReceiveData+0x98>
      DEBUG("Setting socket for read failed\n");
 8001a88:	f640 12b9 	movw	r2, #2489	; 0x9b9
 8001a8c:	490a      	ldr	r1, [pc, #40]	; (8001ab8 <ES_WIFI_ReceiveData+0xf8>)
 8001a8e:	480b      	ldr	r0, [pc, #44]	; (8001abc <ES_WIFI_ReceiveData+0xfc>)
 8001a90:	f003 ff92 	bl	80059b8 <iprintf>
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <ES_WIFI_ReceiveData+0x10c>)
 8001a96:	f004 f815 	bl	8005ac4 <puts>
      issue15++;
 8001a9a:	4a0d      	ldr	r2, [pc, #52]	; (8001ad0 <ES_WIFI_ReceiveData+0x110>)
 8001a9c:	6813      	ldr	r3, [r2, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e7d9      	b.n	8001a58 <ES_WIFI_ReceiveData+0x98>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001aa4:	2402      	movs	r4, #2
 8001aa6:	e7d7      	b.n	8001a58 <ES_WIFI_ReceiveData+0x98>
 8001aa8:	080086a0 	.word	0x080086a0
 8001aac:	080088fa 	.word	0x080088fa
 8001ab0:	08008901 	.word	0x08008901
 8001ab4:	08008909 	.word	0x08008909
 8001ab8:	08008714 	.word	0x08008714
 8001abc:	0800878d 	.word	0x0800878d
 8001ac0:	0800890d 	.word	0x0800890d
 8001ac4:	0800892a 	.word	0x0800892a
 8001ac8:	08008941 	.word	0x08008941
 8001acc:	0800895e 	.word	0x0800895e
 8001ad0:	20000470 	.word	0x20000470

08001ad4 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t        loop_per_us = 0;
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8001ad6:	4c16      	ldr	r4, [pc, #88]	; (8001b30 <SPI_WIFI_DelayUs+0x5c>)
 8001ad8:	4f16      	ldr	r7, [pc, #88]	; (8001b34 <SPI_WIFI_DelayUs+0x60>)
  volatile        uint32_t ct = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	9301      	str	r3, [sp, #4]
  if (cycle_per_loop == 0)
 8001ade:	6823      	ldr	r3, [r4, #0]
{
 8001ae0:	4606      	mov	r6, r0
  if (cycle_per_loop == 0)
 8001ae2:	b98b      	cbnz	r3, 8001b08 <SPI_WIFI_DelayUs+0x34>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aea:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t t = 0;
     ct = cycle_per_ms;
 8001aee:	9301      	str	r3, [sp, #4]
     t = HAL_GetTick();
 8001af0:	f000 fdd8 	bl	80026a4 <HAL_GetTick>
 8001af4:	4605      	mov	r5, r0
     while(ct) ct--;
 8001af6:	9b01      	ldr	r3, [sp, #4]
 8001af8:	b99b      	cbnz	r3, 8001b22 <SPI_WIFI_DelayUs+0x4e>
     cycle_per_loop = HAL_GetTick() - t;
 8001afa:	f000 fdd3 	bl	80026a4 <HAL_GetTick>
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001afe:	1b40      	subs	r0, r0, r5
 8001b00:	bf0a      	itet	eq
 8001b02:	2301      	moveq	r3, #1
     cycle_per_loop = HAL_GetTick() - t;
 8001b04:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8001b06:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8001b08:	480b      	ldr	r0, [pc, #44]	; (8001b38 <SPI_WIFI_DelayUs+0x64>)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b10:	6820      	ldr	r0, [r4, #0]
 8001b12:	fbb3 f3f0 	udiv	r3, r3, r0
  ct = n * loop_per_us;
 8001b16:	4373      	muls	r3, r6
  while(ct) ct--;
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	9b01      	ldr	r3, [sp, #4]
 8001b1c:	b92b      	cbnz	r3, 8001b2a <SPI_WIFI_DelayUs+0x56>
  return;
}
 8001b1e:	b003      	add	sp, #12
 8001b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 8001b22:	9b01      	ldr	r3, [sp, #4]
 8001b24:	3b01      	subs	r3, #1
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	e7e5      	b.n	8001af6 <SPI_WIFI_DelayUs+0x22>
  while(ct) ct--;
 8001b2a:	9b01      	ldr	r3, [sp, #4]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	e7f3      	b.n	8001b18 <SPI_WIFI_DelayUs+0x44>
 8001b30:	20000474 	.word	0x20000474
 8001b34:	20000080 	.word	0x20000080
 8001b38:	000f4240 	.word	0x000f4240

08001b3c <wait_spi_tx_event.isra.0>:
static int wait_spi_tx_event(int timeout)
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	4605      	mov	r5, r0
  int tickstart = HAL_GetTick();
 8001b40:	f000 fdb0 	bl	80026a4 <HAL_GetTick>
  while (spi_tx_event == 1)
 8001b44:	4e05      	ldr	r6, [pc, #20]	; (8001b5c <wait_spi_tx_event.isra.0+0x20>)
  int tickstart = HAL_GetTick();
 8001b46:	4604      	mov	r4, r0
  while (spi_tx_event == 1)
 8001b48:	6873      	ldr	r3, [r6, #4]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d104      	bne.n	8001b58 <wait_spi_tx_event.isra.0+0x1c>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001b4e:	f000 fda9 	bl	80026a4 <HAL_GetTick>
 8001b52:	1b00      	subs	r0, r0, r4
 8001b54:	42a8      	cmp	r0, r5
 8001b56:	d9f7      	bls.n	8001b48 <wait_spi_tx_event.isra.0+0xc>
}
 8001b58:	bd70      	pop	{r4, r5, r6, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000474 	.word	0x20000474

08001b60 <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001b60:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <SPI_WIFI_MspInit+0x100>)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001b62:	4840      	ldr	r0, [pc, #256]	; (8001c64 <SPI_WIFI_MspInit+0x104>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001b64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8001b66:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001b68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b6c:	659a      	str	r2, [r3, #88]	; 0x58
 8001b6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8001b70:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001b72:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001b76:	9201      	str	r2, [sp, #4]
 8001b78:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b7c:	f042 0202 	orr.w	r2, r2, #2
 8001b80:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b84:	f002 0202 	and.w	r2, r2, #2
 8001b88:	9202      	str	r2, [sp, #8]
 8001b8a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b8e:	f042 0204 	orr.w	r2, r2, #4
 8001b92:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b96:	f002 0204 	and.w	r2, r2, #4
 8001b9a:	9203      	str	r2, [sp, #12]
 8001b9c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ba0:	f042 0210 	orr.w	r2, r2, #16
 8001ba4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba8:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001bac:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bae:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001bb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001bb4:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001bb6:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bb8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001bba:	f000 fefd 	bl	80029b8 <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001bbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001bc2:	a905      	add	r1, sp, #20
 8001bc4:	4827      	ldr	r0, [pc, #156]	; (8001c64 <SPI_WIFI_MspInit+0x104>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001bc6:	2602      	movs	r6, #2
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001bc8:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001bcc:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001bd0:	f000 fe0e 	bl	80027f0 <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001bd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001bd8:	a905      	add	r1, sp, #20
 8001bda:	4823      	ldr	r0, [pc, #140]	; (8001c68 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001bdc:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001be0:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001be4:	f000 fe04 	bl	80027f0 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001be8:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001bec:	a905      	add	r1, sp, #20
 8001bee:	481e      	ldr	r0, [pc, #120]	; (8001c68 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Alternate = 0;
 8001bf0:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001bf2:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001bf6:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001bfa:	f000 fdf9 	bl	80027f0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 8001bfe:	4622      	mov	r2, r4
 8001c00:	4621      	mov	r1, r4
 8001c02:	4819      	ldr	r0, [pc, #100]	; (8001c68 <SPI_WIFI_MspInit+0x108>)
 8001c04:	f000 fed8 	bl	80029b8 <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001c08:	a905      	add	r1, sp, #20
 8001c0a:	4817      	ldr	r0, [pc, #92]	; (8001c68 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c0c:	2706      	movs	r7, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001c0e:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c12:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 8001c16:	f000 fdeb 	bl	80027f0 <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001c1e:	a905      	add	r1, sp, #20
 8001c20:	4812      	ldr	r0, [pc, #72]	; (8001c6c <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c22:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c24:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c28:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001c2c:	f000 fde0 	bl	80027f0 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001c34:	a905      	add	r1, sp, #20
 8001c36:	480d      	ldr	r0, [pc, #52]	; (8001c6c <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c38:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c3a:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c3e:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001c42:	f000 fdd5 	bl	80027f0 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 8001c46:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001c4a:	4808      	ldr	r0, [pc, #32]	; (8001c6c <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001c4c:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001c4e:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001c50:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001c54:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001c58:	f000 fdca 	bl	80027f0 <HAL_GPIO_Init>
}
 8001c5c:	b00b      	add	sp, #44	; 0x2c
 8001c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48000400 	.word	0x48000400
 8001c68:	48001000 	.word	0x48001000
 8001c6c:	48000800 	.word	0x48000800

08001c70 <SPI_WIFI_ResetModule>:
{
 8001c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 8001c72:	f000 fd17 	bl	80026a4 <HAL_GetTick>
  WIFI_RESET_MODULE();
 8001c76:	2200      	movs	r2, #0
 8001c78:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 8001c7e:	482e      	ldr	r0, [pc, #184]	; (8001d38 <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001c80:	4f2e      	ldr	r7, [pc, #184]	; (8001d3c <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 8001c82:	f000 fe99 	bl	80029b8 <HAL_GPIO_WritePin>
 8001c86:	200a      	movs	r0, #10
 8001c88:	f000 fd12 	bl	80026b0 <HAL_Delay>
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c92:	4829      	ldr	r0, [pc, #164]	; (8001d38 <SPI_WIFI_ResetModule+0xc8>)
 8001c94:	f000 fe90 	bl	80029b8 <HAL_GPIO_WritePin>
 8001c98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c9c:	f000 fd08 	bl	80026b0 <HAL_Delay>
  WIFI_ENABLE_NSS();
 8001ca0:	4825      	ldr	r0, [pc, #148]	; (8001d38 <SPI_WIFI_ResetModule+0xc8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	f000 fe87 	bl	80029b8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001caa:	200f      	movs	r0, #15
 8001cac:	f7ff ff12 	bl	8001ad4 <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 8001cb0:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 8001cb2:	4821      	ldr	r0, [pc, #132]	; (8001d38 <SPI_WIFI_ResetModule+0xc8>)
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	f000 fe79 	bl	80029ac <HAL_GPIO_ReadPin>
 8001cba:	2801      	cmp	r0, #1
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	d020      	beq.n	8001d02 <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS();
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	481d      	ldr	r0, [pc, #116]	; (8001d38 <SPI_WIFI_ResetModule+0xc8>)
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	f000 fe77 	bl	80029b8 <HAL_GPIO_WritePin>
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 8001cca:	f89d 3000 	ldrb.w	r3, [sp]
 8001cce:	2b15      	cmp	r3, #21
 8001cd0:	d12e      	bne.n	8001d30 <SPI_WIFI_ResetModule+0xc0>
 8001cd2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001cd6:	2b15      	cmp	r3, #21
 8001cd8:	d12a      	bne.n	8001d30 <SPI_WIFI_ResetModule+0xc0>
 8001cda:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001cde:	2b0d      	cmp	r3, #13
 8001ce0:	d126      	bne.n	8001d30 <SPI_WIFI_ResetModule+0xc0>
 8001ce2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001ce6:	2b0a      	cmp	r3, #10
 8001ce8:	d122      	bne.n	8001d30 <SPI_WIFI_ResetModule+0xc0>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 8001cea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001cee:	2b3e      	cmp	r3, #62	; 0x3e
 8001cf0:	d11e      	bne.n	8001d30 <SPI_WIFI_ResetModule+0xc0>
 8001cf2:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001cf6:	3820      	subs	r0, #32
 8001cf8:	bf18      	it	ne
 8001cfa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
}
 8001cfe:	b003      	add	sp, #12
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001d02:	eb0d 0104 	add.w	r1, sp, r4
 8001d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0a:	4638      	mov	r0, r7
 8001d0c:	f002 f94a 	bl	8003fa4 <HAL_SPI_Receive>
 8001d10:	4606      	mov	r6, r0
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001d12:	f000 fcc7 	bl	80026a4 <HAL_GetTick>
 8001d16:	1b40      	subs	r0, r0, r5
    count += 2;
 8001d18:	3402      	adds	r4, #2
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001d1a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 8001d1e:	b2e4      	uxtb	r4, r4
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 8001d20:	d201      	bcs.n	8001d26 <SPI_WIFI_ResetModule+0xb6>
 8001d22:	2e00      	cmp	r6, #0
 8001d24:	d0c5      	beq.n	8001cb2 <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS();
 8001d26:	2201      	movs	r2, #1
 8001d28:	4803      	ldr	r0, [pc, #12]	; (8001d38 <SPI_WIFI_ResetModule+0xc8>)
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	f000 fe44 	bl	80029b8 <HAL_GPIO_WritePin>
    return -1;
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d34:	e7e3      	b.n	8001cfe <SPI_WIFI_ResetModule+0x8e>
 8001d36:	bf00      	nop
 8001d38:	48001000 	.word	0x48001000
 8001d3c:	2000047c 	.word	0x2000047c

08001d40 <SPI_WIFI_Init>:
{
 8001d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 8001d42:	4605      	mov	r5, r0
 8001d44:	bb88      	cbnz	r0, 8001daa <SPI_WIFI_Init+0x6a>
    hspi.Instance               = SPI3;
 8001d46:	4c1d      	ldr	r4, [pc, #116]	; (8001dbc <SPI_WIFI_Init+0x7c>)
 8001d48:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <SPI_WIFI_Init+0x80>)
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f840 3f08 	str.w	r3, [r0, #8]!
    SPI_WIFI_MspInit(&hspi);
 8001d50:	f7ff ff06 	bl	8001b60 <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8001d54:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001d58:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001d5c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001d60:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001d64:	e9c4 3505 	strd	r3, r5, [r4, #20]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001d68:	f104 0008 	add.w	r0, r4, #8
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001d6c:	2310      	movs	r3, #16
 8001d6e:	e9c4 2308 	strd	r2, r3, [r4, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001d72:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001d76:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001d7a:	61e5      	str	r5, [r4, #28]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001d7c:	f001 feb1 	bl	8003ae2 <HAL_SPI_Init>
 8001d80:	4602      	mov	r2, r0
 8001d82:	b9b8      	cbnz	r0, 8001db4 <SPI_WIFI_Init+0x74>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001d84:	4601      	mov	r1, r0
 8001d86:	9001      	str	r0, [sp, #4]
 8001d88:	2007      	movs	r0, #7
 8001d8a:	f000 fcb7 	bl	80026fc <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001d8e:	2007      	movs	r0, #7
 8001d90:	f000 fce6 	bl	8002760 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001d94:	9a01      	ldr	r2, [sp, #4]
 8001d96:	2033      	movs	r0, #51	; 0x33
 8001d98:	4611      	mov	r1, r2
 8001d9a:	f000 fcaf 	bl	80026fc <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001d9e:	2033      	movs	r0, #51	; 0x33
 8001da0:	f000 fcde 	bl	8002760 <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 8001da4:	200a      	movs	r0, #10
 8001da6:	f7ff fe95 	bl	8001ad4 <SPI_WIFI_DelayUs>
}
 8001daa:	b003      	add	sp, #12
 8001dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  rc = SPI_WIFI_ResetModule();
 8001db0:	f7ff bf5e 	b.w	8001c70 <SPI_WIFI_ResetModule>
}
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db8:	b003      	add	sp, #12
 8001dba:	bd30      	pop	{r4, r5, pc}
 8001dbc:	20000474 	.word	0x20000474
 8001dc0:	40003c00 	.word	0x40003c00

08001dc4 <SPI_WIFI_DeInit>:
{
 8001dc4:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8001dc6:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <SPI_WIFI_DeInit+0xc>)
 8001dc8:	f001 ff10 	bl	8003bec <HAL_SPI_DeInit>
}
 8001dcc:	2000      	movs	r0, #0
 8001dce:	bd08      	pop	{r3, pc}
 8001dd0:	2000047c 	.word	0x2000047c

08001dd4 <SPI_WIFI_ReceiveData>:
{
 8001dd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dd8:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS();
 8001dda:	2201      	movs	r2, #1
{
 8001ddc:	4604      	mov	r4, r0
 8001dde:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS();
 8001de0:	4836      	ldr	r0, [pc, #216]	; (8001ebc <SPI_WIFI_ReceiveData+0xe8>)
  while (cmddata_rdy_rising_event == 1)
 8001de2:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001ec0 <SPI_WIFI_ReceiveData+0xec>
  WIFI_DISABLE_NSS();
 8001de6:	4611      	mov	r1, r2
 8001de8:	f000 fde6 	bl	80029b8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 8001dec:	2003      	movs	r0, #3
 8001dee:	f7ff fe71 	bl	8001ad4 <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 8001df2:	f000 fc57 	bl	80026a4 <HAL_GetTick>
 8001df6:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event == 1)
 8001df8:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d01a      	beq.n	8001e36 <SPI_WIFI_ReceiveData+0x62>
  WIFI_ENABLE_NSS();
 8001e00:	482e      	ldr	r0, [pc, #184]	; (8001ebc <SPI_WIFI_ReceiveData+0xe8>)
  while (WIFI_IS_CMDDATA_READY())
 8001e02:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8001ebc <SPI_WIFI_ReceiveData+0xe8>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001e06:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001ec4 <SPI_WIFI_ReceiveData+0xf0>
  WIFI_ENABLE_NSS();
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	f000 fdd3 	bl	80029b8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001e12:	200f      	movs	r0, #15
 8001e14:	f7ff fe5e 	bl	8001ad4 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8001e18:	3402      	adds	r4, #2
 8001e1a:	2500      	movs	r5, #0
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4658      	mov	r0, fp
 8001e20:	f000 fdc4 	bl	80029ac <HAL_GPIO_ReadPin>
 8001e24:	2801      	cmp	r0, #1
 8001e26:	b22e      	sxth	r6, r5
 8001e28:	d00d      	beq.n	8001e46 <SPI_WIFI_ReceiveData+0x72>
  WIFI_DISABLE_NSS();
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4823      	ldr	r0, [pc, #140]	; (8001ebc <SPI_WIFI_ReceiveData+0xe8>)
 8001e2e:	4611      	mov	r1, r2
 8001e30:	f000 fdc2 	bl	80029b8 <HAL_GPIO_WritePin>
  return length;
 8001e34:	e01a      	b.n	8001e6c <SPI_WIFI_ReceiveData+0x98>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001e36:	f000 fc35 	bl	80026a4 <HAL_GetTick>
 8001e3a:	1b40      	subs	r0, r0, r5
 8001e3c:	4580      	cmp	r8, r0
 8001e3e:	d2db      	bcs.n	8001df8 <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001e40:	f06f 0602 	mvn.w	r6, #2
 8001e44:	e012      	b.n	8001e6c <SPI_WIFI_ReceiveData+0x98>
    if ((length < len) || (!len))
 8001e46:	42af      	cmp	r7, r5
 8001e48:	dc01      	bgt.n	8001e4e <SPI_WIFI_ReceiveData+0x7a>
 8001e4a:	2f00      	cmp	r7, #0
 8001e4c:	d1ed      	bne.n	8001e2a <SPI_WIFI_ReceiveData+0x56>
      spi_rx_event = 1;
 8001e4e:	2201      	movs	r2, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001e50:	a901      	add	r1, sp, #4
 8001e52:	4650      	mov	r0, sl
      spi_rx_event = 1;
 8001e54:	f8c9 2070 	str.w	r2, [r9, #112]	; 0x70
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001e58:	f002 faa2 	bl	80043a0 <HAL_SPI_Receive_IT>
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	b148      	cbz	r0, 8001e74 <SPI_WIFI_ReceiveData+0xa0>
        WIFI_DISABLE_NSS();
 8001e60:	4816      	ldr	r0, [pc, #88]	; (8001ebc <SPI_WIFI_ReceiveData+0xe8>)
 8001e62:	4611      	mov	r1, r2
 8001e64:	f000 fda8 	bl	80029b8 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 8001e68:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	b003      	add	sp, #12
 8001e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 8001e74:	f000 fc16 	bl	80026a4 <HAL_GetTick>
 8001e78:	4606      	mov	r6, r0
  while (spi_rx_event == 1)
 8001e7a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d104      	bne.n	8001e8c <SPI_WIFI_ReceiveData+0xb8>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001e82:	f000 fc0f 	bl	80026a4 <HAL_GetTick>
 8001e86:	1b80      	subs	r0, r0, r6
 8001e88:	4580      	cmp	r8, r0
 8001e8a:	d2f6      	bcs.n	8001e7a <SPI_WIFI_ReceiveData+0xa6>
      pData[0] = tmp[0];
 8001e8c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001e90:	f804 3c02 	strb.w	r3, [r4, #-2]
      if (length >= ES_WIFI_DATA_SIZE) {
 8001e94:	3502      	adds	r5, #2
      pData[1] = tmp[1];
 8001e96:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001e9a:	f804 3c01 	strb.w	r3, [r4, #-1]
      if (length >= ES_WIFI_DATA_SIZE) {
 8001e9e:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8001ea2:	f104 0402 	add.w	r4, r4, #2
 8001ea6:	d1b9      	bne.n	8001e1c <SPI_WIFI_ReceiveData+0x48>
        WIFI_DISABLE_NSS();
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4804      	ldr	r0, [pc, #16]	; (8001ebc <SPI_WIFI_ReceiveData+0xe8>)
 8001eac:	4611      	mov	r1, r2
 8001eae:	f000 fd83 	bl	80029b8 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001eb2:	f06f 0603 	mvn.w	r6, #3
        SPI_WIFI_ResetModule();
 8001eb6:	f7ff fedb 	bl	8001c70 <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001eba:	e7d7      	b.n	8001e6c <SPI_WIFI_ReceiveData+0x98>
 8001ebc:	48001000 	.word	0x48001000
 8001ec0:	20000474 	.word	0x20000474
 8001ec4:	2000047c 	.word	0x2000047c

08001ec8 <SPI_WIFI_SendData>:
{
 8001ec8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001ecc:	4605      	mov	r5, r0
 8001ece:	460c      	mov	r4, r1
 8001ed0:	4617      	mov	r7, r2
  int tickstart = HAL_GetTick();
 8001ed2:	f000 fbe7 	bl	80026a4 <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001ed6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001f70 <SPI_WIFI_SendData+0xa8>
  int tickstart = HAL_GetTick();
 8001eda:	4680      	mov	r8, r0
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001edc:	2102      	movs	r1, #2
 8001ede:	4648      	mov	r0, r9
 8001ee0:	f000 fd64 	bl	80029ac <HAL_GPIO_ReadPin>
 8001ee4:	2801      	cmp	r0, #1
 8001ee6:	4606      	mov	r6, r0
 8001ee8:	d11c      	bne.n	8001f24 <SPI_WIFI_SendData+0x5c>
  cmddata_rdy_rising_event = 1;
 8001eea:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001f78 <SPI_WIFI_SendData+0xb0>
  WIFI_ENABLE_NSS();
 8001eee:	4601      	mov	r1, r0
  cmddata_rdy_rising_event = 1;
 8001ef0:	f8c8 006c 	str.w	r0, [r8, #108]	; 0x6c
  WIFI_ENABLE_NSS();
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	481e      	ldr	r0, [pc, #120]	; (8001f70 <SPI_WIFI_SendData+0xa8>)
 8001ef8:	f000 fd5e 	bl	80029b8 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001efc:	200f      	movs	r0, #15
 8001efe:	f7ff fde9 	bl	8001ad4 <SPI_WIFI_DelayUs>
  if (len > 1)
 8001f02:	2c01      	cmp	r4, #1
 8001f04:	d91a      	bls.n	8001f3c <SPI_WIFI_SendData+0x74>
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8001f06:	0862      	lsrs	r2, r4, #1
 8001f08:	4629      	mov	r1, r5
 8001f0a:	f108 0008 	add.w	r0, r8, #8
    spi_tx_event = 1;
 8001f0e:	f8c8 6004 	str.w	r6, [r8, #4]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8001f12:	f002 f96b 	bl	80041ec <HAL_SPI_Transmit_IT>
 8001f16:	b170      	cbz	r0, 8001f36 <SPI_WIFI_SendData+0x6e>
      WIFI_DISABLE_NSS();
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4815      	ldr	r0, [pc, #84]	; (8001f70 <SPI_WIFI_SendData+0xa8>)
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	f000 fd4b 	bl	80029b8 <HAL_GPIO_WritePin>
      return ES_WIFI_ERROR_SPI_FAILED;
 8001f22:	e005      	b.n	8001f30 <SPI_WIFI_SendData+0x68>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001f24:	f000 fbbe 	bl	80026a4 <HAL_GetTick>
 8001f28:	eba0 0008 	sub.w	r0, r0, r8
 8001f2c:	4287      	cmp	r7, r0
 8001f2e:	d2d5      	bcs.n	8001edc <SPI_WIFI_SendData+0x14>
    return ES_WIFI_ERROR_SPI_FAILED;
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f34:	e019      	b.n	8001f6a <SPI_WIFI_SendData+0xa2>
    wait_spi_tx_event(timeout);
 8001f36:	4638      	mov	r0, r7
 8001f38:	f7ff fe00 	bl	8001b3c <wait_spi_tx_event.isra.0>
  if (len & 1)
 8001f3c:	07e3      	lsls	r3, r4, #31
 8001f3e:	d513      	bpl.n	8001f68 <SPI_WIFI_SendData+0xa0>
    Padding[0] = pdata[len - 1];
 8001f40:	4425      	add	r5, r4
    spi_tx_event=1;
 8001f42:	2201      	movs	r2, #1
    Padding[0] = pdata[len - 1];
 8001f44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8001f48:	f88d 3004 	strb.w	r3, [sp, #4]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001f4c:	4809      	ldr	r0, [pc, #36]	; (8001f74 <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 8001f4e:	f8c8 2004 	str.w	r2, [r8, #4]
    Padding[1] = '\n';
 8001f52:	230a      	movs	r3, #10
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001f54:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 8001f56:	f88d 3005 	strb.w	r3, [sp, #5]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001f5a:	f002 f947 	bl	80041ec <HAL_SPI_Transmit_IT>
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	d1da      	bne.n	8001f18 <SPI_WIFI_SendData+0x50>
    wait_spi_tx_event(timeout);
 8001f62:	4638      	mov	r0, r7
 8001f64:	f7ff fdea 	bl	8001b3c <wait_spi_tx_event.isra.0>
  return len;
 8001f68:	b220      	sxth	r0, r4
}
 8001f6a:	b003      	add	sp, #12
 8001f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f70:	48001000 	.word	0x48001000
 8001f74:	2000047c 	.word	0x2000047c
 8001f78:	20000474 	.word	0x20000474

08001f7c <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 8001f7c:	f000 bb98 	b.w	80026b0 <HAL_Delay>

08001f80 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 8001f80:	4b02      	ldr	r3, [pc, #8]	; (8001f8c <HAL_SPI_RxCpltCallback+0xc>)
 8001f82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f84:	b10a      	cbz	r2, 8001f8a <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8001f86:	2200      	movs	r2, #0
 8001f88:	671a      	str	r2, [r3, #112]	; 0x70
  }
}
 8001f8a:	4770      	bx	lr
 8001f8c:	20000474 	.word	0x20000474

08001f90 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 8001f90:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <HAL_SPI_TxCpltCallback+0xc>)
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	b10a      	cbz	r2, 8001f9a <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001f96:	2200      	movs	r2, #0
 8001f98:	605a      	str	r2, [r3, #4]
  }
}
 8001f9a:	4770      	bx	lr
 8001f9c:	20000474 	.word	0x20000474

08001fa0 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event == 1)
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <SPI_WIFI_ISR+0x10>)
 8001fa2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fa4:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001fa6:	bf04      	itt	eq
 8001fa8:	2200      	moveq	r2, #0
 8001faa:	66da      	streq	r2, [r3, #108]	; 0x6c
   }
}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000474 	.word	0x20000474

08001fb4 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8001fb4:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <WIFI_Init+0x30>)
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <WIFI_Init+0x34>)
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <WIFI_Init+0x38>)
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <WIFI_Init+0x3c>)
 8001fc2:	490c      	ldr	r1, [pc, #48]	; (8001ff4 <WIFI_Init+0x40>)
 8001fc4:	480c      	ldr	r0, [pc, #48]	; (8001ff8 <WIFI_Init+0x44>)
 8001fc6:	f7ff faeb 	bl	80015a0 <ES_WIFI_RegisterBusIO>
 8001fca:	b940      	cbnz	r0, 8001fde <WIFI_Init+0x2a>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8001fcc:	480a      	ldr	r0, [pc, #40]	; (8001ff8 <WIFI_Init+0x44>)
 8001fce:	f7ff fa69 	bl	80014a4 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001fd2:	3800      	subs	r0, #0
 8001fd4:	bf18      	it	ne
 8001fd6:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8001fd8:	b003      	add	sp, #12
 8001fda:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001fde:	2001      	movs	r0, #1
 8001fe0:	e7fa      	b.n	8001fd8 <WIFI_Init+0x24>
 8001fe2:	bf00      	nop
 8001fe4:	08001dd5 	.word	0x08001dd5
 8001fe8:	08001ec9 	.word	0x08001ec9
 8001fec:	08001dc5 	.word	0x08001dc5
 8001ff0:	08001f7d 	.word	0x08001f7d
 8001ff4:	08001d41 	.word	0x08001d41
 8001ff8:	200004e8 	.word	0x200004e8

08001ffc <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8001ffc:	b508      	push	{r3, lr}
 8001ffe:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002000:	460a      	mov	r2, r1
 8002002:	4601      	mov	r1, r0
 8002004:	4806      	ldr	r0, [pc, #24]	; (8002020 <WIFI_Connect+0x24>)
 8002006:	f7ff fadd 	bl	80015c4 <ES_WIFI_Connect>
 800200a:	b930      	cbnz	r0, 800201a <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <WIFI_Connect+0x24>)
 800200e:	f7ff fb35 	bl	800167c <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002012:	3800      	subs	r0, #0
 8002014:	bf18      	it	ne
 8002016:	2001      	movne	r0, #1
    {
       ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8002018:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800201a:	2001      	movs	r0, #1
 800201c:	e7fc      	b.n	8002018 <WIFI_Connect+0x1c>
 800201e:	bf00      	nop
 8002020:	200004e8 	.word	0x200004e8

08002024 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8002024:	b508      	push	{r3, lr}
 8002026:	460a      	mov	r2, r1
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if ((mac != NULL) && (0 < MacLength))
 8002028:	b140      	cbz	r0, 800203c <WIFI_GetMAC_Address+0x18>
 800202a:	b139      	cbz	r1, 800203c <WIFI_GetMAC_Address+0x18>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 800202c:	4601      	mov	r1, r0
 800202e:	4804      	ldr	r0, [pc, #16]	; (8002040 <WIFI_GetMAC_Address+0x1c>)
 8002030:	f7ff fba4 	bl	800177c <ES_WIFI_GetMACAddress>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002034:	3800      	subs	r0, #0
 8002036:	bf18      	it	ne
 8002038:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 800203a:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800203c:	2001      	movs	r0, #1
 800203e:	e7fc      	b.n	800203a <WIFI_GetMAC_Address+0x16>
 8002040:	200004e8 	.word	0x200004e8

08002044 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002044:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002046:	4604      	mov	r4, r0
 8002048:	b908      	cbnz	r0, 800204e <WIFI_GetIP_Address+0xa>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800204a:	2001      	movs	r0, #1
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 800204c:	bd38      	pop	{r3, r4, r5, pc}
  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 800204e:	2903      	cmp	r1, #3
 8002050:	d9fb      	bls.n	800204a <WIFI_GetIP_Address+0x6>
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002052:	4d05      	ldr	r5, [pc, #20]	; (8002068 <WIFI_GetIP_Address+0x24>)
 8002054:	4628      	mov	r0, r5
 8002056:	f7ff faf5 	bl	8001644 <ES_WIFI_IsConnected>
 800205a:	2801      	cmp	r0, #1
 800205c:	d1f5      	bne.n	800204a <WIFI_GetIP_Address+0x6>
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800205e:	f8d5 30d5 	ldr.w	r3, [r5, #213]	; 0xd5
 8002062:	6023      	str	r3, [r4, #0]
      ret = WIFI_STATUS_OK;
 8002064:	2000      	movs	r0, #0
 8002066:	e7f1      	b.n	800204c <WIFI_GetIP_Address+0x8>
 8002068:	200004e8 	.word	0x200004e8

0800206c <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800206c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
  conn.RemotePort = port;
 800206e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002072:	f8ad 2006 	strh.w	r2, [sp, #6]
  conn.LocalPort = local_port;
 8002076:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800207a:	f8ad 2008 	strh.w	r2, [sp, #8]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800207e:	3900      	subs	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	f88d 200a 	strb.w	r2, [sp, #10]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002086:	bf18      	it	ne
 8002088:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 800208a:	785a      	ldrb	r2, [r3, #1]
  conn.Number = (uint8_t)socket;
 800208c:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002090:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.RemoteIP[1] = ipaddr[1];
 8002094:	f88d 200b 	strb.w	r2, [sp, #11]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002098:	a901      	add	r1, sp, #4
  conn.RemoteIP[2] = ipaddr[2];
 800209a:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800209c:	4806      	ldr	r0, [pc, #24]	; (80020b8 <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 800209e:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 80020a0:	f88d 200c 	strb.w	r2, [sp, #12]
  conn.RemoteIP[3] = ipaddr[3];
 80020a4:	f88d 300d 	strb.w	r3, [sp, #13]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 80020a8:	f7ff fb88 	bl	80017bc <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 80020ac:	3800      	subs	r0, #0
 80020ae:	bf18      	it	ne
 80020b0:	2001      	movne	r0, #1
 80020b2:	b007      	add	sp, #28
 80020b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80020b8:	200004e8 	.word	0x200004e8

080020bc <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 80020bc:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80020be:	9c04      	ldr	r4, [sp, #16]
 80020c0:	e9cd 3400 	strd	r3, r4, [sp]
 80020c4:	4613      	mov	r3, r2
 80020c6:	460a      	mov	r2, r1
 80020c8:	b2c1      	uxtb	r1, r0
 80020ca:	4804      	ldr	r0, [pc, #16]	; (80020dc <WIFI_SendData+0x20>)
 80020cc:	f7ff fbf6 	bl	80018bc <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 80020d0:	3800      	subs	r0, #0
 80020d2:	bf18      	it	ne
 80020d4:	2001      	movne	r0, #1
 80020d6:	b002      	add	sp, #8
 80020d8:	bd10      	pop	{r4, pc}
 80020da:	bf00      	nop
 80020dc:	200004e8 	.word	0x200004e8

080020e0 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 80020e0:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80020e2:	9c04      	ldr	r4, [sp, #16]
 80020e4:	e9cd 3400 	strd	r3, r4, [sp]
 80020e8:	4613      	mov	r3, r2
 80020ea:	460a      	mov	r2, r1
 80020ec:	b2c1      	uxtb	r1, r0
 80020ee:	4804      	ldr	r0, [pc, #16]	; (8002100 <WIFI_ReceiveData+0x20>)
 80020f0:	f7ff fc66 	bl	80019c0 <ES_WIFI_ReceiveData>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 80020f4:	3800      	subs	r0, #0
 80020f6:	bf18      	it	ne
 80020f8:	2001      	movne	r0, #1
 80020fa:	b002      	add	sp, #8
 80020fc:	bd10      	pop	{r4, pc}
 80020fe:	bf00      	nop
 8002100:	200004e8 	.word	0x200004e8

08002104 <I2Cx_Init.constprop.0>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8002104:	b570      	push	{r4, r5, r6, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002106:	4a2a      	ldr	r2, [pc, #168]	; (80021b0 <I2Cx_Init.constprop.0+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002108:	4c2a      	ldr	r4, [pc, #168]	; (80021b4 <I2Cx_Init.constprop.0+0xb0>)
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800210a:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <I2Cx_Init.constprop.0+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800210c:	4d2b      	ldr	r5, [pc, #172]	; (80021bc <I2Cx_Init.constprop.0+0xb8>)
  i2c_handler->Init.OwnAddress1      = 0;
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800210e:	2600      	movs	r6, #0
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002110:	e9c4 2300 	strd	r2, r3, [r4]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002114:	2201      	movs	r2, #1
 8002116:	e9c4 6202 	strd	r6, r2, [r4, #8]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
  i2c_handler->Init.OwnAddress2      = 0;
 800211a:	e9c4 6604 	strd	r6, r6, [r4, #16]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800211e:	e9c4 6607 	strd	r6, r6, [r4, #28]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002122:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	64eb      	str	r3, [r5, #76]	; 0x4c
 800212a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 800212c:	b088      	sub	sp, #32
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002136:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002138:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800213c:	2312      	movs	r3, #18
 800213e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002142:	2003      	movs	r0, #3
 8002144:	2304      	movs	r3, #4
 8002146:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800214a:	a903      	add	r1, sp, #12
 800214c:	481c      	ldr	r0, [pc, #112]	; (80021c0 <I2Cx_Init.constprop.0+0xbc>)
 800214e:	f000 fb4f 	bl	80027f0 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002152:	a903      	add	r1, sp, #12
 8002154:	481a      	ldr	r0, [pc, #104]	; (80021c0 <I2Cx_Init.constprop.0+0xbc>)
 8002156:	f000 fb4b 	bl	80027f0 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 800215a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800215c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002160:	65ab      	str	r3, [r5, #88]	; 0x58
 8002162:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002168:	9302      	str	r3, [sp, #8]
 800216a:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 800216c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800216e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002172:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002174:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002176:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800217a:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800217c:	4632      	mov	r2, r6
 800217e:	210f      	movs	r1, #15
 8002180:	2021      	movs	r0, #33	; 0x21
 8002182:	f000 fabb 	bl	80026fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002186:	2021      	movs	r0, #33	; 0x21
 8002188:	f000 faea 	bl	8002760 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800218c:	4632      	mov	r2, r6
 800218e:	210f      	movs	r1, #15
 8002190:	2022      	movs	r0, #34	; 0x22
 8002192:	f000 fab3 	bl	80026fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002196:	2022      	movs	r0, #34	; 0x22
 8002198:	f000 fae2 	bl	8002760 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 800219c:	4620      	mov	r0, r4
 800219e:	f000 fd43 	bl	8002c28 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80021a2:	4631      	mov	r1, r6
 80021a4:	4620      	mov	r0, r4
}
 80021a6:	b008      	add	sp, #32
 80021a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80021ac:	f000 bf60 	b.w	8003070 <HAL_I2CEx_ConfigAnalogFilter>
 80021b0:	40005800 	.word	0x40005800
 80021b4:	20000de8 	.word	0x20000de8
 80021b8:	00702681 	.word	0x00702681
 80021bc:	40021000 	.word	0x40021000
 80021c0:	48000400 	.word	0x48000400

080021c4 <BSP_LED_Init>:
{
 80021c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 80021c6:	b948      	cbnz	r0, 80021dc <BSP_LED_Init+0x18>
 80021c8:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <BSP_LED_Init+0x3c>)
 80021ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021cc:	f042 0202 	orr.w	r2, r2, #2
 80021d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80021dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021e0:	2301      	movs	r3, #1
 80021e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e6:	2100      	movs	r1, #0
 80021e8:	2302      	movs	r3, #2
 80021ea:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <BSP_LED_Init+0x40>)
 80021f0:	a901      	add	r1, sp, #4
 80021f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80021f6:	f000 fafb 	bl	80027f0 <HAL_GPIO_Init>
}
 80021fa:	b007      	add	sp, #28
 80021fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002200:	40021000 	.word	0x40021000
 8002204:	20000004 	.word	0x20000004

08002208 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <BSP_LED_On+0x10>)
 800220a:	2201      	movs	r2, #1
 800220c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002214:	f000 bbd0 	b.w	80029b8 <HAL_GPIO_WritePin>
 8002218:	20000004 	.word	0x20000004

0800221c <BSP_COM_Init>:
{
 800221c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221e:	460d      	mov	r5, r1
 8002220:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8002222:	b9d8      	cbnz	r0, 800225c <BSP_COM_Init+0x40>
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <BSP_COM_Init+0x80>)
 8002226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002228:	f042 0202 	orr.w	r2, r2, #2
 800222c:	64da      	str	r2, [r3, #76]	; 0x4c
 800222e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002230:	f002 0202 	and.w	r2, r2, #2
 8002234:	9200      	str	r2, [sp, #0]
 8002236:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8002238:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800223a:	f042 0202 	orr.w	r2, r2, #2
 800223e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002242:	f002 0202 	and.w	r2, r2, #2
 8002246:	9201      	str	r2, [sp, #4]
 8002248:	9a01      	ldr	r2, [sp, #4]
  DISCOVERY_COMx_CLK_ENABLE(COM);
 800224a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800224c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002250:	661a      	str	r2, [r3, #96]	; 0x60
 8002252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002258:	9302      	str	r3, [sp, #8]
 800225a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800225c:	4c10      	ldr	r4, [pc, #64]	; (80022a0 <BSP_COM_Init+0x84>)
 800225e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002262:	2602      	movs	r6, #2
 8002264:	2340      	movs	r3, #64	; 0x40
 8002266:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800226a:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800226c:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8002270:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002272:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002274:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8002276:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8002278:	f000 faba 	bl	80027f0 <HAL_GPIO_Init>
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800227c:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800227e:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8002280:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002282:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002284:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8002288:	f000 fab2 	bl	80027f0 <HAL_GPIO_Init>
  huart->Instance = COM_USART[COM];
 800228c:	6923      	ldr	r3, [r4, #16]
 800228e:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 8002290:	4628      	mov	r0, r5
 8002292:	f002 fe44 	bl	8004f1e <HAL_UART_Init>
}
 8002296:	b009      	add	sp, #36	; 0x24
 8002298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	20000004 	.word	0x20000004

080022a4 <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 80022a4:	f7ff bf2e 	b.w	8002104 <I2Cx_Init.constprop.0>

080022a8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80022a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80022aa:	2301      	movs	r3, #1
{
 80022ac:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80022b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022b4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80022b8:	f10d 0217 	add.w	r2, sp, #23
 80022bc:	9200      	str	r2, [sp, #0]
 80022be:	460a      	mov	r2, r1
 80022c0:	4601      	mov	r1, r0
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <SENSOR_IO_Write+0x34>)
 80022c4:	f000 fd1c 	bl	8002d00 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 80022c8:	b120      	cbz	r0, 80022d4 <SENSOR_IO_Write+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 80022ca:	4804      	ldr	r0, [pc, #16]	; (80022dc <SENSOR_IO_Write+0x34>)
 80022cc:	f000 fcfe 	bl	8002ccc <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80022d0:	f7ff ff18 	bl	8002104 <I2Cx_Init.constprop.0>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 80022d4:	b007      	add	sp, #28
 80022d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80022da:	bf00      	nop
 80022dc:	20000de8 	.word	0x20000de8

080022e0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80022e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 80022e2:	2300      	movs	r3, #0
{
 80022e4:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 80022e6:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80022ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022ee:	2301      	movs	r3, #1
 80022f0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80022f4:	f10d 0117 	add.w	r1, sp, #23
 80022f8:	9100      	str	r1, [sp, #0]
 80022fa:	4601      	mov	r1, r0
 80022fc:	4806      	ldr	r0, [pc, #24]	; (8002318 <SENSOR_IO_Read+0x38>)
 80022fe:	f000 fdd9 	bl	8002eb4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8002302:	b120      	cbz	r0, 800230e <SENSOR_IO_Read+0x2e>
  HAL_I2C_DeInit(i2c_handler);
 8002304:	4804      	ldr	r0, [pc, #16]	; (8002318 <SENSOR_IO_Read+0x38>)
 8002306:	f000 fce1 	bl	8002ccc <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 800230a:	f7ff fefb 	bl	8002104 <I2Cx_Init.constprop.0>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 800230e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002312:	b007      	add	sp, #28
 8002314:	f85d fb04 	ldr.w	pc, [sp], #4
 8002318:	20000de8 	.word	0x20000de8

0800231c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800231c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800231e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8002322:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002326:	9200      	str	r2, [sp, #0]
 8002328:	2301      	movs	r3, #1
 800232a:	460a      	mov	r2, r1
 800232c:	4601      	mov	r1, r0
 800232e:	4806      	ldr	r0, [pc, #24]	; (8002348 <SENSOR_IO_ReadMultiple+0x2c>)
 8002330:	f000 fdc0 	bl	8002eb4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8002334:	4604      	mov	r4, r0
 8002336:	b120      	cbz	r0, 8002342 <SENSOR_IO_ReadMultiple+0x26>
  HAL_I2C_DeInit(i2c_handler);
 8002338:	4803      	ldr	r0, [pc, #12]	; (8002348 <SENSOR_IO_ReadMultiple+0x2c>)
 800233a:	f000 fcc7 	bl	8002ccc <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 800233e:	f7ff fee1 	bl	8002104 <I2Cx_Init.constprop.0>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8002342:	b2a0      	uxth	r0, r4
 8002344:	b004      	add	sp, #16
 8002346:	bd10      	pop	{r4, pc}
 8002348:	20000de8 	.word	0x20000de8

0800234c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800234c:	b510      	push	{r4, lr}
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800234e:	4c07      	ldr	r4, [pc, #28]	; (800236c <BSP_ACCELERO_Init+0x20>)
 8002350:	68a3      	ldr	r3, [r4, #8]
 8002352:	4798      	blx	r3
 8002354:	286a      	cmp	r0, #106	; 0x6a
 8002356:	d107      	bne.n	8002368 <BSP_ACCELERO_Init+0x1c>
    ret = ACCELERO_ERROR;
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <BSP_ACCELERO_Init+0x24>)
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800235a:	f244 4030 	movw	r0, #17456	; 0x4430
    AccelerometerDrv = &Lsm6dslAccDrv;
 800235e:	601c      	str	r4, [r3, #0]
    AccelerometerDrv->Init(ctrl);
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002364:	2000      	movs	r0, #0
  }  

  return ret;
}
 8002366:	bd10      	pop	{r4, pc}
    ret = ACCELERO_ERROR;
 8002368:	2001      	movs	r0, #1
 800236a:	e7fc      	b.n	8002366 <BSP_ACCELERO_Init+0x1a>
 800236c:	2000004c 	.word	0x2000004c
 8002370:	20000ec0 	.word	0x20000ec0

08002374 <BSP_ACCELERO_AccGetXYZ>:
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv != NULL)
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <BSP_ACCELERO_AccGetXYZ+0x10>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	b113      	cbz	r3, 8002380 <BSP_ACCELERO_AccGetXYZ+0xc>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	b103      	cbz	r3, 8002380 <BSP_ACCELERO_AccGetXYZ+0xc>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800237e:	4718      	bx	r3
    }
  }
}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000ec0 	.word	0x20000ec0

08002388 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002388:	b510      	push	{r4, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800238a:	4c07      	ldr	r4, [pc, #28]	; (80023a8 <BSP_GYRO_Init+0x20>)
 800238c:	68a3      	ldr	r3, [r4, #8]
 800238e:	4798      	blx	r3
 8002390:	286a      	cmp	r0, #106	; 0x6a
 8002392:	d107      	bne.n	80023a4 <BSP_GYRO_Init+0x1c>
    ret = GYRO_ERROR;
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <BSP_GYRO_Init+0x24>)

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002396:	f244 403c 	movw	r0, #17468	; 0x443c
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800239a:	601c      	str	r4, [r3, #0]
    GyroscopeDrv->Init(ctrl);
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	4798      	blx	r3
    
    ret = GYRO_OK;
 80023a0:	2000      	movs	r0, #0
  }
  
  return ret;
}
 80023a2:	bd10      	pop	{r4, pc}
    ret = GYRO_ERROR;
 80023a4:	2001      	movs	r0, #1
 80023a6:	e7fc      	b.n	80023a2 <BSP_GYRO_Init+0x1a>
 80023a8:	20000018 	.word	0x20000018
 80023ac:	20000ec4 	.word	0x20000ec4

080023b0 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv != NULL)
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <BSP_GYRO_GetXYZ+0x10>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	b113      	cbz	r3, 80023bc <BSP_GYRO_GetXYZ+0xc>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	b103      	cbz	r3, 80023bc <BSP_GYRO_GetXYZ+0xc>
    {
      GyroscopeDrv->GetXYZ(pfData);
 80023ba:	4718      	bx	r3
    }
  }
}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000ec4 	.word	0x20000ec4

080023c4 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80023c4:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80023c6:	2110      	movs	r1, #16
{  
 80023c8:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80023ca:	20d4      	movs	r0, #212	; 0xd4
 80023cc:	f7ff ff88 	bl	80022e0 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 80023d0:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 80023d4:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	2110      	movs	r1, #16
 80023da:	20d4      	movs	r0, #212	; 0xd4
 80023dc:	f7ff ff64 	bl	80022a8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80023e0:	2112      	movs	r1, #18
 80023e2:	20d4      	movs	r0, #212	; 0xd4
 80023e4:	f7ff ff7c 	bl	80022e0 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 80023e8:	f000 00bb 	and.w	r0, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80023ec:	ea40 2214 	orr.w	r2, r0, r4, lsr #8
 80023f0:	2112      	movs	r1, #18
}
 80023f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80023f6:	20d4      	movs	r0, #212	; 0xd4
 80023f8:	f7ff bf56 	b.w	80022a8 <SENSOR_IO_Write>

080023fc <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80023fc:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80023fe:	2110      	movs	r1, #16
 8002400:	20d4      	movs	r0, #212	; 0xd4
 8002402:	f7ff ff6d 	bl	80022e0 <SENSOR_IO_Read>
  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
}
 8002406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800240a:	f000 020f 	and.w	r2, r0, #15
 800240e:	2110      	movs	r1, #16
 8002410:	20d4      	movs	r0, #212	; 0xd4
 8002412:	f7ff bf49 	b.w	80022a8 <SENSOR_IO_Write>

08002416 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002416:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002418:	2115      	movs	r1, #21
{
 800241a:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800241c:	20d4      	movs	r0, #212	; 0xd4
 800241e:	f7ff ff5f 	bl	80022e0 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002422:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 8002426:	b10c      	cbz	r4, 800242c <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002428:	f042 0210 	orr.w	r2, r2, #16
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
}
 800242c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002430:	2115      	movs	r1, #21
 8002432:	20d4      	movs	r0, #212	; 0xd4
 8002434:	f7ff bf38 	b.w	80022a8 <SENSOR_IO_Write>

08002438 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002438:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800243a:	2111      	movs	r1, #17
{  
 800243c:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800243e:	20d4      	movs	r0, #212	; 0xd4
 8002440:	f7ff ff4e 	bl	80022e0 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 8002444:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8002448:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	2111      	movs	r1, #17
 800244e:	20d4      	movs	r0, #212	; 0xd4
 8002450:	f7ff ff2a 	bl	80022a8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002454:	2112      	movs	r1, #18
 8002456:	20d4      	movs	r0, #212	; 0xd4
 8002458:	f7ff ff42 	bl	80022e0 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 800245c:	f000 00bb 	and.w	r0, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002460:	ea40 2214 	orr.w	r2, r0, r4, lsr #8
 8002464:	2112      	movs	r1, #18
}
 8002466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800246a:	20d4      	movs	r0, #212	; 0xd4
 800246c:	f7ff bf1c 	b.w	80022a8 <SENSOR_IO_Write>

08002470 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8002470:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002472:	2111      	movs	r1, #17
 8002474:	20d4      	movs	r0, #212	; 0xd4
 8002476:	f7ff ff33 	bl	80022e0 <SENSOR_IO_Read>
  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
}
 800247a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800247e:	f000 020f 	and.w	r2, r0, #15
 8002482:	2111      	movs	r1, #17
 8002484:	20d4      	movs	r0, #212	; 0xd4
 8002486:	f7ff bf0f 	b.w	80022a8 <SENSOR_IO_Write>

0800248a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800248a:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800248c:	2116      	movs	r1, #22
{  
 800248e:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002490:	20d4      	movs	r0, #212	; 0xd4
 8002492:	f7ff ff25 	bl	80022e0 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002496:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 800249a:	b10c      	cbz	r4, 80024a0 <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800249c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
}
 80024a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80024a4:	2116      	movs	r1, #22
 80024a6:	20d4      	movs	r0, #212	; 0xd4
 80024a8:	f7ff befe 	b.w	80022a8 <SENSOR_IO_Write>

080024ac <LSM6DSL_AccReadID>:
{  
 80024ac:	b508      	push	{r3, lr}
  SENSOR_IO_Init();
 80024ae:	f7ff fef9 	bl	80022a4 <SENSOR_IO_Init>
}
 80024b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80024b6:	210f      	movs	r1, #15
 80024b8:	20d4      	movs	r0, #212	; 0xd4
 80024ba:	f7ff bf11 	b.w	80022e0 <SENSOR_IO_Read>

080024be <LSM6DSL_GyroReadID>:
 80024be:	f7ff bff5 	b.w	80024ac <LSM6DSL_AccReadID>
	...

080024c4 <LSM6DSL_AccReadXYZ>:
{
 80024c4:	b530      	push	{r4, r5, lr}
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80024c6:	2110      	movs	r1, #16
{
 80024c8:	b085      	sub	sp, #20
 80024ca:	4604      	mov	r4, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80024cc:	20d4      	movs	r0, #212	; 0xd4
 80024ce:	f7ff ff07 	bl	80022e0 <SENSOR_IO_Read>
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80024d2:	2306      	movs	r3, #6
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80024d4:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80024d6:	aa02      	add	r2, sp, #8
 80024d8:	2128      	movs	r1, #40	; 0x28
 80024da:	20d4      	movs	r0, #212	; 0xd4
 80024dc:	f7ff ff1e 	bl	800231c <SENSOR_IO_ReadMultiple>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80024e0:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80024e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80024e8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80024ec:	f8ad 3000 	strh.w	r3, [sp]
 80024f0:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80024f4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80024f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80024fc:	f8ad 3002 	strh.w	r3, [sp, #2]
 8002500:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8002504:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8002508:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800250c:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlx & 0x0C)
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <LSM6DSL_AccReadXYZ+0x84>)
 8002512:	f005 050c 	and.w	r5, r5, #12
 8002516:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800251a:	ed95 7a00 	vldr	s14, [r5]
  for(i=0; i<3; i++)
 800251e:	1ea3      	subs	r3, r4, #2
 8002520:	466a      	mov	r2, sp
 8002522:	3404      	adds	r4, #4
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002524:	f932 1b02 	ldrsh.w	r1, [r2], #2
 8002528:	ee07 1a90 	vmov	s15, r1
 800252c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002534:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002538:	ee17 1a90 	vmov	r1, s15
 800253c:	f823 1f02 	strh.w	r1, [r3, #2]!
  for(i=0; i<3; i++)
 8002540:	42a3      	cmp	r3, r4
 8002542:	d1ef      	bne.n	8002524 <LSM6DSL_AccReadXYZ+0x60>
}
 8002544:	b005      	add	sp, #20
 8002546:	bd30      	pop	{r4, r5, pc}
 8002548:	080080e8 	.word	0x080080e8

0800254c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800254c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800254e:	4604      	mov	r4, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002550:	2111      	movs	r1, #17
 8002552:	20d4      	movs	r0, #212	; 0xd4
 8002554:	f7ff fec4 	bl	80022e0 <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8002558:	466a      	mov	r2, sp
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800255a:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800255c:	2306      	movs	r3, #6
 800255e:	2122      	movs	r1, #34	; 0x22
 8002560:	20d4      	movs	r0, #212	; 0xd4
 8002562:	f7ff fedb 	bl	800231c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002566:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800256a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800256e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002572:	b21b      	sxth	r3, r3
 8002574:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002578:	ee07 3a10 	vmov	s14, r3
 800257c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002580:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002584:	b21b      	sxth	r3, r3
 8002586:	ee07 3a90 	vmov	s15, r3
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <LSM6DSL_GyroReadXYZAngRate+0x88>)
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800258c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002590:	f005 050c 	and.w	r5, r5, #12
 8002594:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8002598:	f89d 3000 	ldrb.w	r3, [sp]
 800259c:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 80025a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80025a4:	b21b      	sxth	r3, r3
 80025a6:	ee06 3a90 	vmov	s13, r3
 80025aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80025ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80025b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80025ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80025be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80025c2:	edc4 6a00 	vstr	s13, [r4]
 80025c6:	ed84 7a01 	vstr	s14, [r4, #4]
 80025ca:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 80025ce:	b003      	add	sp, #12
 80025d0:	bd30      	pop	{r4, r5, pc}
 80025d2:	bf00      	nop
 80025d4:	080080e8 	.word	0x080080e8

080025d8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025d8:	490f      	ldr	r1, [pc, #60]	; (8002618 <SystemInit+0x40>)
 80025da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80025de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80025e6:	4b0d      	ldr	r3, [pc, #52]	; (800261c <SystemInit+0x44>)
 80025e8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025ea:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80025f2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80025fa:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80025fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8002600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002604:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800260c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800260e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002614:	608b      	str	r3, [r1, #8]
#endif
}
 8002616:	4770      	bx	lr
 8002618:	e000ed00 	.word	0xe000ed00
 800261c:	40021000 	.word	0x40021000

08002620 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002620:	4770      	bx	lr
	...

08002624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002624:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002626:	4e0f      	ldr	r6, [pc, #60]	; (8002664 <HAL_InitTick+0x40>)
{
 8002628:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 800262a:	7830      	ldrb	r0, [r6, #0]
 800262c:	b908      	cbnz	r0, 8002632 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800262e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002630:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002632:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <HAL_InitTick+0x44>)
 8002634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002638:	fbb3 f3f0 	udiv	r3, r3, r0
 800263c:	6810      	ldr	r0, [r2, #0]
 800263e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002642:	f000 f89b 	bl	800277c <HAL_SYSTICK_Config>
 8002646:	4604      	mov	r4, r0
 8002648:	2800      	cmp	r0, #0
 800264a:	d1f0      	bne.n	800262e <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800264c:	2d0f      	cmp	r5, #15
 800264e:	d8ee      	bhi.n	800262e <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002650:	4602      	mov	r2, r0
 8002652:	4629      	mov	r1, r5
 8002654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002658:	f000 f850 	bl	80026fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800265c:	6075      	str	r5, [r6, #4]
 800265e:	4620      	mov	r0, r4
 8002660:	e7e6      	b.n	8002630 <HAL_InitTick+0xc>
 8002662:	bf00      	nop
 8002664:	20000084 	.word	0x20000084
 8002668:	20000080 	.word	0x20000080

0800266c <HAL_Init>:
{
 800266c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800266e:	2003      	movs	r0, #3
 8002670:	f000 f832 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002674:	200f      	movs	r0, #15
 8002676:	f7ff ffd5 	bl	8002624 <HAL_InitTick>
 800267a:	4604      	mov	r4, r0
 800267c:	b918      	cbnz	r0, 8002686 <HAL_Init+0x1a>
    HAL_MspInit();
 800267e:	f7ff ffcf 	bl	8002620 <HAL_MspInit>
}
 8002682:	4620      	mov	r0, r4
 8002684:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002686:	2401      	movs	r4, #1
 8002688:	e7fb      	b.n	8002682 <HAL_Init+0x16>
	...

0800268c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800268c:	4a03      	ldr	r2, [pc, #12]	; (800269c <HAL_IncTick+0x10>)
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_IncTick+0x14>)
 8002690:	6811      	ldr	r1, [r2, #0]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	440b      	add	r3, r1
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000ec8 	.word	0x20000ec8
 80026a0:	20000084 	.word	0x20000084

080026a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80026a4:	4b01      	ldr	r3, [pc, #4]	; (80026ac <HAL_GetTick+0x8>)
 80026a6:	6818      	ldr	r0, [r3, #0]
}
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000ec8 	.word	0x20000ec8

080026b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b0:	b538      	push	{r3, r4, r5, lr}
 80026b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff fff6 	bl	80026a4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 80026ba:	bf1c      	itt	ne
 80026bc:	4b05      	ldrne	r3, [pc, #20]	; (80026d4 <HAL_Delay+0x24>)
 80026be:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80026c0:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 80026c2:	bf18      	it	ne
 80026c4:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c6:	f7ff ffed 	bl	80026a4 <HAL_GetTick>
 80026ca:	1b43      	subs	r3, r0, r5
 80026cc:	42a3      	cmp	r3, r4
 80026ce:	d3fa      	bcc.n	80026c6 <HAL_Delay+0x16>
  {
  }
}
 80026d0:	bd38      	pop	{r3, r4, r5, pc}
 80026d2:	bf00      	nop
 80026d4:	20000084 	.word	0x20000084

080026d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d8:	4907      	ldr	r1, [pc, #28]	; (80026f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80026da:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e2:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80026f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026fc:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fe:	b530      	push	{r4, r5, lr}
 8002700:	68dc      	ldr	r4, [r3, #12]
 8002702:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002706:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800270c:	2d04      	cmp	r5, #4
 800270e:	bf28      	it	cs
 8002710:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002712:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002718:	bf8c      	ite	hi
 800271a:	3c03      	subhi	r4, #3
 800271c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271e:	fa03 f505 	lsl.w	r5, r3, r5
 8002722:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002726:	40a3      	lsls	r3, r4
 8002728:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 800272e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	bfac      	ite	ge
 8002736:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273a:	4a08      	ldrlt	r2, [pc, #32]	; (800275c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002740:	bfb8      	it	lt
 8002742:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002746:	b2db      	uxtb	r3, r3
 8002748:	bfaa      	itet	ge
 800274a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002750:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002754:	bd30      	pop	{r4, r5, pc}
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00
 800275c:	e000ed14 	.word	0xe000ed14

08002760 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002760:	2800      	cmp	r0, #0
 8002762:	db08      	blt.n	8002776 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002764:	2301      	movs	r3, #1
 8002766:	0942      	lsrs	r2, r0, #5
 8002768:	f000 001f 	and.w	r0, r0, #31
 800276c:	fa03 f000 	lsl.w	r0, r3, r0
 8002770:	4b01      	ldr	r3, [pc, #4]	; (8002778 <HAL_NVIC_EnableIRQ+0x18>)
 8002772:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002776:	4770      	bx	lr
 8002778:	e000e100 	.word	0xe000e100

0800277c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800277c:	3801      	subs	r0, #1
 800277e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002782:	d20b      	bcs.n	800279c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002784:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002788:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278c:	21f0      	movs	r1, #240	; 0xf0
 800278e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002792:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002794:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002796:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002798:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800279a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800279c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027a4:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027a6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80027aa:	2a02      	cmp	r2, #2
 80027ac:	d003      	beq.n	80027b6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ae:	2204      	movs	r2, #4
 80027b0:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 80027b2:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 80027b4:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b6:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 80027b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ba:	6811      	ldr	r1, [r2, #0]
 80027bc:	f021 010e 	bic.w	r1, r1, #14
 80027c0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80027c2:	6811      	ldr	r1, [r2, #0]
 80027c4:	f021 0101 	bic.w	r1, r1, #1
 80027c8:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ca:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 80027ce:	2101      	movs	r1, #1
 80027d0:	f002 021c 	and.w	r2, r2, #28
 80027d4:	fa01 f202 	lsl.w	r2, r1, r2
 80027d8:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80027da:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80027dc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80027e0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80027e4:	b113      	cbz	r3, 80027ec <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80027e6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80027e8:	4620      	mov	r0, r4
 80027ea:	e7e3      	b.n	80027b4 <HAL_DMA_Abort_IT+0x10>
 80027ec:	4618      	mov	r0, r3
 80027ee:	e7e1      	b.n	80027b4 <HAL_DMA_Abort_IT+0x10>

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f4:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80029a8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027f8:	4c69      	ldr	r4, [pc, #420]	; (80029a0 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 80027fa:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fc:	680a      	ldr	r2, [r1, #0]
 80027fe:	fa32 f503 	lsrs.w	r5, r2, r3
 8002802:	d102      	bne.n	800280a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8002804:	b003      	add	sp, #12
 8002806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800280a:	f04f 0e01 	mov.w	lr, #1
 800280e:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8002812:	ea1e 0202 	ands.w	r2, lr, r2
 8002816:	f000 8090 	beq.w	800293a <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800281a:	684d      	ldr	r5, [r1, #4]
 800281c:	f005 0603 	and.w	r6, r5, #3
 8002820:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002824:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002828:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800282a:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800282e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002830:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002834:	f200 8083 	bhi.w	800293e <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8002838:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800283a:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 800283e:	68cf      	ldr	r7, [r1, #12]
 8002840:	fa07 f708 	lsl.w	r7, r7, r8
 8002844:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002848:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800284a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800284c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002850:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002854:	409f      	lsls	r7, r3
 8002856:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800285a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800285c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800285e:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002862:	688f      	ldr	r7, [r1, #8]
 8002864:	fa07 f708 	lsl.w	r7, r7, r8
 8002868:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286c:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 800286e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002870:	d071      	beq.n	8002956 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8002872:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002874:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002878:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800287c:	4337      	orrs	r7, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800287e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002882:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002884:	d059      	beq.n	800293a <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800288a:	f046 0601 	orr.w	r6, r6, #1
 800288e:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8002892:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8002896:	f023 0703 	bic.w	r7, r3, #3
 800289a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800289e:	f006 0601 	and.w	r6, r6, #1
 80028a2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80028a6:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028a8:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ac:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80028ae:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028b0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80028b4:	f04f 0c0f 	mov.w	ip, #15
 80028b8:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028bc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028c0:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028c4:	d05f      	beq.n	8002986 <HAL_GPIO_Init+0x196>
 80028c6:	4e37      	ldr	r6, [pc, #220]	; (80029a4 <HAL_GPIO_Init+0x1b4>)
 80028c8:	42b0      	cmp	r0, r6
 80028ca:	d05e      	beq.n	800298a <HAL_GPIO_Init+0x19a>
 80028cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028d0:	42b0      	cmp	r0, r6
 80028d2:	d05c      	beq.n	800298e <HAL_GPIO_Init+0x19e>
 80028d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028d8:	42b0      	cmp	r0, r6
 80028da:	d05a      	beq.n	8002992 <HAL_GPIO_Init+0x1a2>
 80028dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028e0:	42b0      	cmp	r0, r6
 80028e2:	d058      	beq.n	8002996 <HAL_GPIO_Init+0x1a6>
 80028e4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028e8:	42b0      	cmp	r0, r6
 80028ea:	d056      	beq.n	800299a <HAL_GPIO_Init+0x1aa>
 80028ec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80028f0:	42b0      	cmp	r0, r6
 80028f2:	bf0c      	ite	eq
 80028f4:	2606      	moveq	r6, #6
 80028f6:	2607      	movne	r6, #7
 80028f8:	fa06 f60e 	lsl.w	r6, r6, lr
 80028fc:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002900:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8002902:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8002904:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002906:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800290a:	bf0c      	ite	eq
 800290c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800290e:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8002910:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8002912:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002914:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8002918:	bf0c      	ite	eq
 800291a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800291c:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 800291e:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8002920:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002922:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002926:	bf0c      	ite	eq
 8002928:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800292a:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 800292c:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 800292e:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002930:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8002932:	bf54      	ite	pl
 8002934:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8002936:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8002938:	6026      	str	r6, [r4, #0]
    position++;
 800293a:	3301      	adds	r3, #1
 800293c:	e75e      	b.n	80027fc <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800293e:	2e03      	cmp	r6, #3
 8002940:	d18c      	bne.n	800285c <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8002942:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002944:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002948:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 800294c:	409f      	lsls	r7, r3
 800294e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8002952:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002954:	e78d      	b.n	8002872 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8002956:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800295a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800295e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002962:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002966:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800296a:	f04f 0e0f 	mov.w	lr, #15
 800296e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002972:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002976:	690f      	ldr	r7, [r1, #16]
 8002978:	fa07 f70b 	lsl.w	r7, r7, fp
 800297c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002980:	f8ca 7020 	str.w	r7, [sl, #32]
 8002984:	e775      	b.n	8002872 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002986:	2600      	movs	r6, #0
 8002988:	e7b6      	b.n	80028f8 <HAL_GPIO_Init+0x108>
 800298a:	2601      	movs	r6, #1
 800298c:	e7b4      	b.n	80028f8 <HAL_GPIO_Init+0x108>
 800298e:	2602      	movs	r6, #2
 8002990:	e7b2      	b.n	80028f8 <HAL_GPIO_Init+0x108>
 8002992:	2603      	movs	r6, #3
 8002994:	e7b0      	b.n	80028f8 <HAL_GPIO_Init+0x108>
 8002996:	2604      	movs	r6, #4
 8002998:	e7ae      	b.n	80028f8 <HAL_GPIO_Init+0x108>
 800299a:	2605      	movs	r6, #5
 800299c:	e7ac      	b.n	80028f8 <HAL_GPIO_Init+0x108>
 800299e:	bf00      	nop
 80029a0:	40010400 	.word	0x40010400
 80029a4:	48000400 	.word	0x48000400
 80029a8:	40021000 	.word	0x40021000

080029ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80029ac:	6903      	ldr	r3, [r0, #16]
 80029ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80029b0:	bf14      	ite	ne
 80029b2:	2001      	movne	r0, #1
 80029b4:	2000      	moveq	r0, #0
 80029b6:	4770      	bx	lr

080029b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b8:	b10a      	cbz	r2, 80029be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ba:	6181      	str	r1, [r0, #24]
 80029bc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029be:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029c4:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80029c6:	6951      	ldr	r1, [r2, #20]
 80029c8:	4201      	tst	r1, r0
{
 80029ca:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029cc:	d002      	beq.n	80029d4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ce:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029d0:	f7fe fbe6 	bl	80011a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80029d4:	bd08      	pop	{r3, pc}
 80029d6:	bf00      	nop
 80029d8:	40010400 	.word	0x40010400

080029dc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029dc:	6803      	ldr	r3, [r0, #0]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80029e2:	bf44      	itt	mi
 80029e4:	2200      	movmi	r2, #0
 80029e6:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029ec:	bf5e      	ittt	pl
 80029ee:	699a      	ldrpl	r2, [r3, #24]
 80029f0:	f042 0201 	orrpl.w	r2, r2, #1
 80029f4:	619a      	strpl	r2, [r3, #24]
  }
}
 80029f6:	4770      	bx	lr

080029f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029f8:	b530      	push	{r4, r5, lr}
 80029fa:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80029fc:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029fe:	432b      	orrs	r3, r5
 8002a00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a04:	4a06      	ldr	r2, [pc, #24]	; (8002a20 <I2C_TransferConfig+0x28>)
 8002a06:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a08:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002a0c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a0e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a16:	ea20 0002 	bic.w	r0, r0, r2
 8002a1a:	4303      	orrs	r3, r0
 8002a1c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a1e:	bd30      	pop	{r4, r5, pc}
 8002a20:	03ff63ff 	.word	0x03ff63ff

08002a24 <I2C_IsErrorOccurred>:
{
 8002a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a28:	6803      	ldr	r3, [r0, #0]
 8002a2a:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a2c:	f014 0410 	ands.w	r4, r4, #16
{
 8002a30:	4605      	mov	r5, r0
 8002a32:	4688      	mov	r8, r1
 8002a34:	4617      	mov	r7, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a36:	d079      	beq.n	8002b2c <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a38:	2210      	movs	r2, #16
 8002a3a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3c:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a42:	682b      	ldr	r3, [r5, #0]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	0694      	lsls	r4, r2, #26
 8002a48:	d436      	bmi.n	8002ab8 <I2C_IsErrorOccurred+0x94>
 8002a4a:	b10e      	cbz	r6, 8002a50 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8002a4c:	2404      	movs	r4, #4
 8002a4e:	e039      	b.n	8002ac4 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8002a50:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8002a54:	d0f6      	beq.n	8002a44 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a56:	f7ff fe25 	bl	80026a4 <HAL_GetTick>
 8002a5a:	1bc0      	subs	r0, r0, r7
 8002a5c:	4540      	cmp	r0, r8
 8002a5e:	d802      	bhi.n	8002a66 <I2C_IsErrorOccurred+0x42>
 8002a60:	f1b8 0f00 	cmp.w	r8, #0
 8002a64:	d1ed      	bne.n	8002a42 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a66:	682b      	ldr	r3, [r5, #0]
 8002a68:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8002a6a:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a6e:	6998      	ldr	r0, [r3, #24]
 8002a70:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 8002a72:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a74:	d50a      	bpl.n	8002a8c <I2C_IsErrorOccurred+0x68>
 8002a76:	0449      	lsls	r1, r1, #17
 8002a78:	d408      	bmi.n	8002a8c <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8002a7a:	2a20      	cmp	r2, #32
 8002a7c:	d006      	beq.n	8002a8c <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a84:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002a86:	f7ff fe0d 	bl	80026a4 <HAL_GetTick>
 8002a8a:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a8c:	682b      	ldr	r3, [r5, #0]
 8002a8e:	699c      	ldr	r4, [r3, #24]
 8002a90:	f014 0420 	ands.w	r4, r4, #32
 8002a94:	d1d5      	bne.n	8002a42 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a96:	f7ff fe05 	bl	80026a4 <HAL_GetTick>
 8002a9a:	1bc0      	subs	r0, r0, r7
 8002a9c:	2819      	cmp	r0, #25
 8002a9e:	d9f5      	bls.n	8002a8c <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 8002aa2:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa6:	f043 0320 	orr.w	r3, r3, #32
 8002aaa:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8002aac:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab2:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8002ab6:	e7e9      	b.n	8002a8c <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8002ab8:	2e00      	cmp	r6, #0
 8002aba:	d1c7      	bne.n	8002a4c <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002abc:	2220      	movs	r2, #32
 8002abe:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002ac0:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8002ac2:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 8002ac4:	682b      	ldr	r3, [r5, #0]
 8002ac6:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ac8:	05d0      	lsls	r0, r2, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002aca:	bf41      	itttt	mi
 8002acc:	f44f 7180 	movmi.w	r1, #256	; 0x100
 8002ad0:	61d9      	strmi	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002ad2:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 8002ad6:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ad8:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ada:	bf41      	itttt	mi
 8002adc:	f44f 6180 	movmi.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8002ae0:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ae4:	61d9      	strmi	r1, [r3, #28]
    status = HAL_ERROR;
 8002ae6:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ae8:	0592      	lsls	r2, r2, #22
 8002aea:	d521      	bpl.n	8002b30 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002aec:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8002af0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002af4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8002af6:	4628      	mov	r0, r5
 8002af8:	f7ff ff70 	bl	80029dc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002afc:	682a      	ldr	r2, [r5, #0]
 8002afe:	6853      	ldr	r3, [r2, #4]
 8002b00:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8002b04:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002b08:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8002b12:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002b14:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8002b16:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8002b18:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002b24:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8002b28:	2601      	movs	r6, #1
 8002b2a:	e003      	b.n	8002b34 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8002b2c:	4626      	mov	r6, r4
 8002b2e:	e7c9      	b.n	8002ac4 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8002b30:	2e00      	cmp	r6, #0
 8002b32:	d1e0      	bne.n	8002af6 <I2C_IsErrorOccurred+0xd2>
}
 8002b34:	4630      	mov	r0, r6
 8002b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002b3a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002b3a:	b570      	push	{r4, r5, r6, lr}
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	460d      	mov	r5, r1
 8002b40:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b42:	6823      	ldr	r3, [r4, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	079b      	lsls	r3, r3, #30
 8002b48:	d501      	bpl.n	8002b4e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8002b4a:	2000      	movs	r0, #0
}
 8002b4c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4e:	4632      	mov	r2, r6
 8002b50:	4629      	mov	r1, r5
 8002b52:	4620      	mov	r0, r4
 8002b54:	f7ff ff66 	bl	8002a24 <I2C_IsErrorOccurred>
 8002b58:	b9a0      	cbnz	r0, 8002b84 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002b5a:	1c6a      	adds	r2, r5, #1
 8002b5c:	d0f1      	beq.n	8002b42 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5e:	f7ff fda1 	bl	80026a4 <HAL_GetTick>
 8002b62:	1b80      	subs	r0, r0, r6
 8002b64:	42a8      	cmp	r0, r5
 8002b66:	d801      	bhi.n	8002b6c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002b68:	2d00      	cmp	r5, #0
 8002b6a:	d1ea      	bne.n	8002b42 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b6e:	f043 0320 	orr.w	r3, r3, #32
 8002b72:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b74:	2320      	movs	r3, #32
 8002b76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002b80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002b84:	2001      	movs	r0, #1
 8002b86:	e7e1      	b.n	8002b4c <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08002b88 <I2C_WaitOnFlagUntilTimeout>:
{
 8002b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b8c:	9f06      	ldr	r7, [sp, #24]
 8002b8e:	4604      	mov	r4, r0
 8002b90:	4688      	mov	r8, r1
 8002b92:	4616      	mov	r6, r2
 8002b94:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b96:	6822      	ldr	r2, [r4, #0]
 8002b98:	6993      	ldr	r3, [r2, #24]
 8002b9a:	ea38 0303 	bics.w	r3, r8, r3
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	42b3      	cmp	r3, r6
 8002ba6:	d001      	beq.n	8002bac <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8002ba8:	2000      	movs	r0, #0
 8002baa:	e015      	b.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002bac:	1c6b      	adds	r3, r5, #1
 8002bae:	d0f3      	beq.n	8002b98 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb0:	f7ff fd78 	bl	80026a4 <HAL_GetTick>
 8002bb4:	1bc0      	subs	r0, r0, r7
 8002bb6:	42a8      	cmp	r0, r5
 8002bb8:	d801      	bhi.n	8002bbe <I2C_WaitOnFlagUntilTimeout+0x36>
 8002bba:	2d00      	cmp	r5, #0
 8002bbc:	d1eb      	bne.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002bc0:	f043 0320 	orr.w	r3, r3, #32
 8002bc4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002bd2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002bd6:	2001      	movs	r0, #1
}
 8002bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002bdc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4604      	mov	r4, r0
 8002be0:	460d      	mov	r5, r1
 8002be2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002be4:	6823      	ldr	r3, [r4, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	069b      	lsls	r3, r3, #26
 8002bea:	d501      	bpl.n	8002bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002bec:	2000      	movs	r0, #0
}
 8002bee:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bf0:	4632      	mov	r2, r6
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f7ff ff15 	bl	8002a24 <I2C_IsErrorOccurred>
 8002bfa:	b990      	cbnz	r0, 8002c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfc:	f7ff fd52 	bl	80026a4 <HAL_GetTick>
 8002c00:	1b80      	subs	r0, r0, r6
 8002c02:	42a8      	cmp	r0, r5
 8002c04:	d801      	bhi.n	8002c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002c06:	2d00      	cmp	r5, #0
 8002c08:	d1ec      	bne.n	8002be4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c0c:	f043 0320 	orr.w	r3, r3, #32
 8002c10:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	2320      	movs	r3, #32
 8002c14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8002c1e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002c22:	2001      	movs	r0, #1
 8002c24:	e7e3      	b.n	8002bee <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08002c26 <HAL_I2C_MspInit>:
}
 8002c26:	4770      	bx	lr

08002c28 <HAL_I2C_Init>:
{
 8002c28:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d04a      	beq.n	8002cc6 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c30:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c38:	b91b      	cbnz	r3, 8002c42 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002c3a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002c3e:	f7ff fff2 	bl	8002c26 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c42:	2324      	movs	r3, #36	; 0x24
 8002c44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c52:	6862      	ldr	r2, [r4, #4]
 8002c54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c58:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c60:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c62:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c66:	2901      	cmp	r1, #1
 8002c68:	d124      	bne.n	8002cb4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c6e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c82:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c84:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8002c88:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c8a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c90:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c92:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca2:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ca8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cac:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cae:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002cb2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cb4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cb8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cba:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cbc:	bf04      	itt	eq
 8002cbe:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002cc2:	605a      	streq	r2, [r3, #4]
 8002cc4:	e7d4      	b.n	8002c70 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	e7f3      	b.n	8002cb2 <HAL_I2C_Init+0x8a>

08002cca <HAL_I2C_MspDeInit>:
 8002cca:	4770      	bx	lr

08002ccc <HAL_I2C_DeInit>:
{
 8002ccc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002cce:	4604      	mov	r4, r0
 8002cd0:	b198      	cbz	r0, 8002cfa <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8002cd2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd4:	2324      	movs	r3, #36	; 0x24
 8002cd6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002cda:	6813      	ldr	r3, [r2, #0]
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002ce2:	f7ff fff2 	bl	8002cca <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8002cea:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8002cee:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002cf8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	e7fc      	b.n	8002cf8 <HAL_I2C_DeInit+0x2c>
	...

08002d00 <HAL_I2C_Mem_Write>:
{
 8002d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d04:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d06:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002d0a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002d0e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d12:	2b20      	cmp	r3, #32
{
 8002d14:	4604      	mov	r4, r0
 8002d16:	460f      	mov	r7, r1
 8002d18:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1a:	f040 80c6 	bne.w	8002eaa <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8002d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d20:	b113      	cbz	r3, 8002d28 <HAL_I2C_Mem_Write+0x28>
 8002d22:	f1ba 0f00 	cmp.w	sl, #0
 8002d26:	d106      	bne.n	8002d36 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d2c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002d2e:	2001      	movs	r0, #1
}
 8002d30:	b003      	add	sp, #12
 8002d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002d36:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	f000 80b5 	beq.w	8002eaa <HAL_I2C_Mem_Write+0x1aa>
 8002d40:	f04f 0b01 	mov.w	fp, #1
 8002d44:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002d48:	f7ff fcac 	bl	80026a4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d4c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002d4e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d50:	9000      	str	r0, [sp, #0]
 8002d52:	465a      	mov	r2, fp
 8002d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff ff15 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d1e5      	bne.n	8002d2e <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d62:	2321      	movs	r3, #33	; 0x21
 8002d64:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d68:	2340      	movs	r3, #64	; 0x40
 8002d6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002d6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d70:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d72:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d74:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8002d76:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	fa5f f289 	uxtb.w	r2, r9
 8002d7e:	4639      	mov	r1, r7
 8002d80:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 8002d82:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d8a:	f7ff fe35 	bl	80029f8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8e:	462a      	mov	r2, r5
 8002d90:	4641      	mov	r1, r8
 8002d92:	4620      	mov	r0, r4
 8002d94:	f7ff fed1 	bl	8002b3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002d98:	bb18      	cbnz	r0, 8002de2 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d9a:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d9e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002da0:	d115      	bne.n	8002dce <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002da2:	b2f6      	uxtb	r6, r6
 8002da4:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002da6:	2200      	movs	r2, #0
 8002da8:	9500      	str	r5, [sp, #0]
 8002daa:	4643      	mov	r3, r8
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	4620      	mov	r0, r4
 8002db0:	f7ff feea 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002db4:	b9a8      	cbnz	r0, 8002de2 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002db6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2bff      	cmp	r3, #255	; 0xff
 8002dbc:	d815      	bhi.n	8002dea <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8002dbe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dc0:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002dc2:	b292      	uxth	r2, r2
 8002dc4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	e012      	b.n	8002df4 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002dce:	0a32      	lsrs	r2, r6, #8
 8002dd0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd2:	4641      	mov	r1, r8
 8002dd4:	462a      	mov	r2, r5
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f7ff feaf 	bl	8002b3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002ddc:	b908      	cbnz	r0, 8002de2 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	e7df      	b.n	8002da2 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8002de2:	2300      	movs	r3, #0
 8002de4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002de8:	e7a1      	b.n	8002d2e <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dea:	22ff      	movs	r2, #255	; 0xff
 8002dec:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dee:	9000      	str	r0, [sp, #0]
 8002df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002df4:	4639      	mov	r1, r7
 8002df6:	4620      	mov	r0, r4
 8002df8:	f7ff fdfe 	bl	80029f8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dfc:	462a      	mov	r2, r5
 8002dfe:	4641      	mov	r1, r8
 8002e00:	4620      	mov	r0, r4
 8002e02:	f7ff fe9a 	bl	8002b3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e06:	2800      	cmp	r0, #0
 8002e08:	d191      	bne.n	8002d2e <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e0c:	6822      	ldr	r2, [r4, #0]
 8002e0e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002e12:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002e14:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002e16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002e18:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002e22:	3a01      	subs	r2, #1
 8002e24:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e26:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002e28:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e2a:	b1b3      	cbz	r3, 8002e5a <HAL_I2C_Mem_Write+0x15a>
 8002e2c:	b9aa      	cbnz	r2, 8002e5a <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e2e:	9500      	str	r5, [sp, #0]
 8002e30:	4643      	mov	r3, r8
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	4620      	mov	r0, r4
 8002e36:	f7ff fea7 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	f47f af77 	bne.w	8002d2e <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2bff      	cmp	r3, #255	; 0xff
 8002e46:	d928      	bls.n	8002e9a <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e48:	22ff      	movs	r2, #255	; 0xff
 8002e4a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e4c:	9000      	str	r0, [sp, #0]
 8002e4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e52:	4639      	mov	r1, r7
 8002e54:	4620      	mov	r0, r4
 8002e56:	f7ff fdcf 	bl	80029f8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002e5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1cc      	bne.n	8002dfc <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e62:	462a      	mov	r2, r5
 8002e64:	4641      	mov	r1, r8
 8002e66:	4620      	mov	r0, r4
 8002e68:	f7ff feb8 	bl	8002bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	f47f af5e 	bne.w	8002d2e <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	2120      	movs	r1, #32
 8002e76:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002e7e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002e82:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002e90:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e94:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002e98:	e74a      	b.n	8002d30 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8002e9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e9c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ea2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	e7d3      	b.n	8002e52 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 8002eaa:	2002      	movs	r0, #2
 8002eac:	e740      	b.n	8002d30 <HAL_I2C_Mem_Write+0x30>
 8002eae:	bf00      	nop
 8002eb0:	80002000 	.word	0x80002000

08002eb4 <HAL_I2C_Mem_Read>:
{
 8002eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eb8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002ebe:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002ec2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec6:	2b20      	cmp	r3, #32
{
 8002ec8:	4604      	mov	r4, r0
 8002eca:	460f      	mov	r7, r1
 8002ecc:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ece:	f040 80c9 	bne.w	8003064 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8002ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ed4:	b113      	cbz	r3, 8002edc <HAL_I2C_Mem_Read+0x28>
 8002ed6:	f1ba 0f00 	cmp.w	sl, #0
 8002eda:	d106      	bne.n	8002eea <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ee0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002ee2:	2001      	movs	r0, #1
}
 8002ee4:	b003      	add	sp, #12
 8002ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002eea:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	f000 80b8 	beq.w	8003064 <HAL_I2C_Mem_Read+0x1b0>
 8002ef4:	f04f 0b01 	mov.w	fp, #1
 8002ef8:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002efc:	f7ff fbd2 	bl	80026a4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f00:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002f02:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f04:	9000      	str	r0, [sp, #0]
 8002f06:	465a      	mov	r2, fp
 8002f08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7ff fe3b 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d1e5      	bne.n	8002ee2 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f16:	2322      	movs	r3, #34	; 0x22
 8002f18:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f1c:	2340      	movs	r3, #64	; 0x40
 8002f1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f24:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f26:	4b50      	ldr	r3, [pc, #320]	; (8003068 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f28:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8002f2a:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	fa5f f289 	uxtb.w	r2, r9
 8002f32:	4603      	mov	r3, r0
 8002f34:	4639      	mov	r1, r7
 8002f36:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 8002f38:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f3c:	f7ff fd5c 	bl	80029f8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f40:	462a      	mov	r2, r5
 8002f42:	4641      	mov	r1, r8
 8002f44:	4620      	mov	r0, r4
 8002f46:	f7ff fdf8 	bl	8002b3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002f4a:	bb20      	cbnz	r0, 8002f96 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f4c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f50:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f52:	d116      	bne.n	8002f82 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f54:	b2f6      	uxtb	r6, r6
 8002f56:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	9500      	str	r5, [sp, #0]
 8002f5c:	4643      	mov	r3, r8
 8002f5e:	2140      	movs	r1, #64	; 0x40
 8002f60:	4620      	mov	r0, r4
 8002f62:	f7ff fe11 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002f66:	b9b0      	cbnz	r0, 8002f96 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2bff      	cmp	r3, #255	; 0xff
 8002f6e:	4b3f      	ldr	r3, [pc, #252]	; (800306c <HAL_I2C_Mem_Read+0x1b8>)
 8002f70:	d815      	bhi.n	8002f9e <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8002f72:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f74:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002f76:	b292      	uxth	r2, r2
 8002f78:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	e012      	b.n	8002fa8 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f82:	0a32      	lsrs	r2, r6, #8
 8002f84:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f86:	4641      	mov	r1, r8
 8002f88:	462a      	mov	r2, r5
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7ff fdd5 	bl	8002b3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002f90:	b908      	cbnz	r0, 8002f96 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	e7de      	b.n	8002f54 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8002f96:	2300      	movs	r3, #0
 8002f98:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002f9c:	e7a1      	b.n	8002ee2 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f9e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fa0:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fa2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fa8:	4639      	mov	r1, r7
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7ff fd24 	bl	80029f8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fb0:	9500      	str	r5, [sp, #0]
 8002fb2:	4643      	mov	r3, r8
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2104      	movs	r1, #4
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f7ff fde5 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	d18f      	bne.n	8002ee2 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fc8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002fcc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002fce:	3301      	adds	r3, #1
 8002fd0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002fd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002fdc:	3a01      	subs	r2, #1
 8002fde:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fe0:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002fe2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fe4:	b1b3      	cbz	r3, 8003014 <HAL_I2C_Mem_Read+0x160>
 8002fe6:	b9aa      	cbnz	r2, 8003014 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fe8:	9500      	str	r5, [sp, #0]
 8002fea:	4643      	mov	r3, r8
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	4620      	mov	r0, r4
 8002ff0:	f7ff fdca 	bl	8002b88 <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	f47f af74 	bne.w	8002ee2 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ffa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2bff      	cmp	r3, #255	; 0xff
 8003000:	d928      	bls.n	8003054 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003002:	22ff      	movs	r2, #255	; 0xff
 8003004:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003006:	9000      	str	r0, [sp, #0]
 8003008:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800300c:	4639      	mov	r1, r7
 800300e:	4620      	mov	r0, r4
 8003010:	f7ff fcf2 	bl	80029f8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003014:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1c9      	bne.n	8002fb0 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800301c:	462a      	mov	r2, r5
 800301e:	4641      	mov	r1, r8
 8003020:	4620      	mov	r0, r4
 8003022:	f7ff fddb 	bl	8002bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003026:	2800      	cmp	r0, #0
 8003028:	f47f af5b 	bne.w	8002ee2 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	2120      	movs	r1, #32
 8003030:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003038:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800303c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003046:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800304a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800304e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003052:	e747      	b.n	8002ee4 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8003054:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003056:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8003058:	b292      	uxth	r2, r2
 800305a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800305c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	e7d3      	b.n	800300c <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8003064:	2002      	movs	r0, #2
 8003066:	e73d      	b.n	8002ee4 <HAL_I2C_Mem_Read+0x30>
 8003068:	80002000 	.word	0x80002000
 800306c:	80002400 	.word	0x80002400

08003070 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003070:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003072:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003076:	2b20      	cmp	r3, #32
 8003078:	b2dc      	uxtb	r4, r3
 800307a:	d11d      	bne.n	80030b8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003080:	2b01      	cmp	r3, #1
 8003082:	d019      	beq.n	80030b8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003084:	2324      	movs	r3, #36	; 0x24
 8003086:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800308a:	6803      	ldr	r3, [r0, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800309a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	4311      	orrs	r1, r2
 80030a0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030aa:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80030b0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80030b4:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80030b6:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80030b8:	2002      	movs	r0, #2
 80030ba:	e7fc      	b.n	80030b6 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080030bc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030bc:	4b02      	ldr	r3, [pc, #8]	; (80030c8 <HAL_PWREx_GetVoltageRange+0xc>)
 80030be:	6818      	ldr	r0, [r3, #0]
#endif
}
 80030c0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40007000 	.word	0x40007000

080030cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030ce:	4d1e      	ldr	r5, [pc, #120]	; (8003148 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80030d0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80030d2:	00da      	lsls	r2, r3, #3
{
 80030d4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030d6:	d518      	bpl.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030d8:	f7ff fff0 	bl	80030bc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030dc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80030e0:	d123      	bne.n	800312a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030e2:	2c80      	cmp	r4, #128	; 0x80
 80030e4:	d929      	bls.n	800313a <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030e6:	2ca0      	cmp	r4, #160	; 0xa0
 80030e8:	bf8c      	ite	hi
 80030ea:	2002      	movhi	r0, #2
 80030ec:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030ee:	4a17      	ldr	r2, [pc, #92]	; (800314c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80030f0:	6813      	ldr	r3, [r2, #0]
 80030f2:	f023 0307 	bic.w	r3, r3, #7
 80030f6:	4303      	orrs	r3, r0
 80030f8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030fa:	6813      	ldr	r3, [r2, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003100:	1a18      	subs	r0, r3, r0
 8003102:	bf18      	it	ne
 8003104:	2001      	movne	r0, #1
 8003106:	b003      	add	sp, #12
 8003108:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800310a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800310c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003110:	65ab      	str	r3, [r5, #88]	; 0x58
 8003112:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800311c:	f7ff ffce 	bl	80030bc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003120:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003126:	65ab      	str	r3, [r5, #88]	; 0x58
 8003128:	e7d8      	b.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800312a:	2c80      	cmp	r4, #128	; 0x80
 800312c:	d807      	bhi.n	800313e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800312e:	d008      	beq.n	8003142 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8003130:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003134:	4258      	negs	r0, r3
 8003136:	4158      	adcs	r0, r3
 8003138:	e7d9      	b.n	80030ee <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800313a:	2000      	movs	r0, #0
 800313c:	e7d7      	b.n	80030ee <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800313e:	2003      	movs	r0, #3
 8003140:	e7d5      	b.n	80030ee <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003142:	2002      	movs	r0, #2
 8003144:	e7d3      	b.n	80030ee <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	40022000 	.word	0x40022000

08003150 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003150:	4b22      	ldr	r3, [pc, #136]	; (80031dc <HAL_RCC_GetSysClockFreq+0x8c>)
 8003152:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003154:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003156:	f012 020c 	ands.w	r2, r2, #12
 800315a:	d005      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x18>
 800315c:	2a0c      	cmp	r2, #12
 800315e:	d115      	bne.n	800318c <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003160:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003164:	2901      	cmp	r1, #1
 8003166:	d118      	bne.n	800319a <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003168:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800316a:	481d      	ldr	r0, [pc, #116]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800316c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800316e:	bf55      	itete	pl
 8003170:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003174:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003176:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800317a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800317e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003182:	b34a      	cbz	r2, 80031d8 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003184:	2a0c      	cmp	r2, #12
 8003186:	d009      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x4c>
 8003188:	2000      	movs	r0, #0
  return sysclockfreq;
 800318a:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800318c:	2a04      	cmp	r2, #4
 800318e:	d022      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003190:	2a08      	cmp	r2, #8
 8003192:	4814      	ldr	r0, [pc, #80]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003194:	bf18      	it	ne
 8003196:	2000      	movne	r0, #0
 8003198:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800319a:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80031a2:	2a02      	cmp	r2, #2
 80031a4:	d015      	beq.n	80031d2 <HAL_RCC_GetSysClockFreq+0x82>
 80031a6:	490f      	ldr	r1, [pc, #60]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80031a8:	2a03      	cmp	r2, #3
 80031aa:	bf08      	it	eq
 80031ac:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031ae:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80031b6:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031b8:	68d8      	ldr	r0, [r3, #12]
 80031ba:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031be:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031c2:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031c4:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031c6:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031c8:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 80031cc:	fbb2 f0f0 	udiv	r0, r2, r0
 80031d0:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80031d2:	4805      	ldr	r0, [pc, #20]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80031d4:	e7eb      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 80031d6:	4804      	ldr	r0, [pc, #16]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x98>)
}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	08008150 	.word	0x08008150
 80031e4:	007a1200 	.word	0x007a1200
 80031e8:	00f42400 	.word	0x00f42400

080031ec <HAL_RCC_OscConfig>:
{
 80031ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80031f0:	4605      	mov	r5, r0
 80031f2:	b918      	cbnz	r0, 80031fc <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80031f4:	2001      	movs	r0, #1
}
 80031f6:	b003      	add	sp, #12
 80031f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031fc:	4c92      	ldr	r4, [pc, #584]	; (8003448 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031fe:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003200:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003202:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003204:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003206:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800320a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800320e:	d53d      	bpl.n	800328c <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003210:	b11e      	cbz	r6, 800321a <HAL_RCC_OscConfig+0x2e>
 8003212:	2e0c      	cmp	r6, #12
 8003214:	d166      	bne.n	80032e4 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003216:	2f01      	cmp	r7, #1
 8003218:	d164      	bne.n	80032e4 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	0798      	lsls	r0, r3, #30
 800321e:	d502      	bpl.n	8003226 <HAL_RCC_OscConfig+0x3a>
 8003220:	69ab      	ldr	r3, [r5, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0e6      	beq.n	80031f4 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	6a28      	ldr	r0, [r5, #32]
 800322a:	0719      	lsls	r1, r3, #28
 800322c:	bf56      	itet	pl
 800322e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003232:	6823      	ldrmi	r3, [r4, #0]
 8003234:	091b      	lsrpl	r3, r3, #4
 8003236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800323a:	4298      	cmp	r0, r3
 800323c:	d93b      	bls.n	80032b6 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800323e:	f7ff ff45 	bl	80030cc <RCC_SetFlashLatencyFromMSIRange>
 8003242:	2800      	cmp	r0, #0
 8003244:	d1d6      	bne.n	80031f4 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	f043 0308 	orr.w	r3, r3, #8
 800324c:	6023      	str	r3, [r4, #0]
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	6a2a      	ldr	r2, [r5, #32]
 8003252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003256:	4313      	orrs	r3, r2
 8003258:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800325a:	6863      	ldr	r3, [r4, #4]
 800325c:	69ea      	ldr	r2, [r5, #28]
 800325e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003262:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003266:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003268:	f7ff ff72 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 800326c:	68a3      	ldr	r3, [r4, #8]
 800326e:	4a77      	ldr	r2, [pc, #476]	; (800344c <HAL_RCC_OscConfig+0x260>)
 8003270:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003274:	5cd3      	ldrb	r3, [r2, r3]
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	40d8      	lsrs	r0, r3
 800327c:	4b74      	ldr	r3, [pc, #464]	; (8003450 <HAL_RCC_OscConfig+0x264>)
 800327e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003280:	4b74      	ldr	r3, [pc, #464]	; (8003454 <HAL_RCC_OscConfig+0x268>)
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	f7ff f9ce 	bl	8002624 <HAL_InitTick>
        if(status != HAL_OK)
 8003288:	2800      	cmp	r0, #0
 800328a:	d1b4      	bne.n	80031f6 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328c:	682b      	ldr	r3, [r5, #0]
 800328e:	07d8      	lsls	r0, r3, #31
 8003290:	d45f      	bmi.n	8003352 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	682b      	ldr	r3, [r5, #0]
 8003294:	0799      	lsls	r1, r3, #30
 8003296:	f100 809e 	bmi.w	80033d6 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800329a:	682b      	ldr	r3, [r5, #0]
 800329c:	0718      	lsls	r0, r3, #28
 800329e:	f100 80db 	bmi.w	8003458 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a2:	682b      	ldr	r3, [r5, #0]
 80032a4:	0759      	lsls	r1, r3, #29
 80032a6:	f100 8101 	bmi.w	80034ac <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f040 816a 	bne.w	8003586 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80032b2:	2000      	movs	r0, #0
 80032b4:	e79f      	b.n	80031f6 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	f043 0308 	orr.w	r3, r3, #8
 80032bc:	6023      	str	r3, [r4, #0]
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032c4:	4303      	orrs	r3, r0
 80032c6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032c8:	6863      	ldr	r3, [r4, #4]
 80032ca:	69ea      	ldr	r2, [r5, #28]
 80032cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80032d4:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032d6:	2e00      	cmp	r6, #0
 80032d8:	d1c6      	bne.n	8003268 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032da:	f7ff fef7 	bl	80030cc <RCC_SetFlashLatencyFromMSIRange>
 80032de:	2800      	cmp	r0, #0
 80032e0:	d0c2      	beq.n	8003268 <HAL_RCC_OscConfig+0x7c>
 80032e2:	e787      	b.n	80031f4 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032e4:	69ab      	ldr	r3, [r5, #24]
 80032e6:	b31b      	cbz	r3, 8003330 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 80032e8:	6823      	ldr	r3, [r4, #0]
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80032f0:	f7ff f9d8 	bl	80026a4 <HAL_GetTick>
 80032f4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	079a      	lsls	r2, r3, #30
 80032fa:	d511      	bpl.n	8003320 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	f043 0308 	orr.w	r3, r3, #8
 8003302:	6023      	str	r3, [r4, #0]
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	6a2a      	ldr	r2, [r5, #32]
 8003308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800330c:	4313      	orrs	r3, r2
 800330e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003310:	6863      	ldr	r3, [r4, #4]
 8003312:	69ea      	ldr	r2, [r5, #28]
 8003314:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003318:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800331c:	6063      	str	r3, [r4, #4]
 800331e:	e7b5      	b.n	800328c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003320:	f7ff f9c0 	bl	80026a4 <HAL_GetTick>
 8003324:	eba0 0008 	sub.w	r0, r0, r8
 8003328:	2802      	cmp	r0, #2
 800332a:	d9e4      	bls.n	80032f6 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 800332c:	2003      	movs	r0, #3
 800332e:	e762      	b.n	80031f6 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	f023 0301 	bic.w	r3, r3, #1
 8003336:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003338:	f7ff f9b4 	bl	80026a4 <HAL_GetTick>
 800333c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	079b      	lsls	r3, r3, #30
 8003342:	d5a3      	bpl.n	800328c <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003344:	f7ff f9ae 	bl	80026a4 <HAL_GetTick>
 8003348:	eba0 0008 	sub.w	r0, r0, r8
 800334c:	2802      	cmp	r0, #2
 800334e:	d9f6      	bls.n	800333e <HAL_RCC_OscConfig+0x152>
 8003350:	e7ec      	b.n	800332c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003352:	2e08      	cmp	r6, #8
 8003354:	d003      	beq.n	800335e <HAL_RCC_OscConfig+0x172>
 8003356:	2e0c      	cmp	r6, #12
 8003358:	d108      	bne.n	800336c <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800335a:	2f03      	cmp	r7, #3
 800335c:	d106      	bne.n	800336c <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	039a      	lsls	r2, r3, #14
 8003362:	d596      	bpl.n	8003292 <HAL_RCC_OscConfig+0xa6>
 8003364:	686b      	ldr	r3, [r5, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d193      	bne.n	8003292 <HAL_RCC_OscConfig+0xa6>
 800336a:	e743      	b.n	80031f4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336c:	686b      	ldr	r3, [r5, #4]
 800336e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003372:	d110      	bne.n	8003396 <HAL_RCC_OscConfig+0x1aa>
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800337c:	f7ff f992 	bl	80026a4 <HAL_GetTick>
 8003380:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	039b      	lsls	r3, r3, #14
 8003386:	d484      	bmi.n	8003292 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003388:	f7ff f98c 	bl	80026a4 <HAL_GetTick>
 800338c:	eba0 0008 	sub.w	r0, r0, r8
 8003390:	2864      	cmp	r0, #100	; 0x64
 8003392:	d9f6      	bls.n	8003382 <HAL_RCC_OscConfig+0x196>
 8003394:	e7ca      	b.n	800332c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003396:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800339a:	d104      	bne.n	80033a6 <HAL_RCC_OscConfig+0x1ba>
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a2:	6023      	str	r3, [r4, #0]
 80033a4:	e7e6      	b.n	8003374 <HAL_RCC_OscConfig+0x188>
 80033a6:	6822      	ldr	r2, [r4, #0]
 80033a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033ac:	6022      	str	r2, [r4, #0]
 80033ae:	6822      	ldr	r2, [r4, #0]
 80033b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033b4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e0      	bne.n	800337c <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 80033ba:	f7ff f973 	bl	80026a4 <HAL_GetTick>
 80033be:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	0398      	lsls	r0, r3, #14
 80033c4:	f57f af65 	bpl.w	8003292 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c8:	f7ff f96c 	bl	80026a4 <HAL_GetTick>
 80033cc:	eba0 0008 	sub.w	r0, r0, r8
 80033d0:	2864      	cmp	r0, #100	; 0x64
 80033d2:	d9f5      	bls.n	80033c0 <HAL_RCC_OscConfig+0x1d4>
 80033d4:	e7aa      	b.n	800332c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033d6:	2e04      	cmp	r6, #4
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_OscConfig+0x1f6>
 80033da:	2e0c      	cmp	r6, #12
 80033dc:	d110      	bne.n	8003400 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033de:	2f02      	cmp	r7, #2
 80033e0:	d10e      	bne.n	8003400 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	0559      	lsls	r1, r3, #21
 80033e6:	d503      	bpl.n	80033f0 <HAL_RCC_OscConfig+0x204>
 80033e8:	68eb      	ldr	r3, [r5, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f43f af02 	beq.w	80031f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f0:	6863      	ldr	r3, [r4, #4]
 80033f2:	692a      	ldr	r2, [r5, #16]
 80033f4:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80033f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80033fc:	6063      	str	r3, [r4, #4]
 80033fe:	e74c      	b.n	800329a <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003400:	68eb      	ldr	r3, [r5, #12]
 8003402:	b17b      	cbz	r3, 8003424 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800340c:	f7ff f94a 	bl	80026a4 <HAL_GetTick>
 8003410:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	055a      	lsls	r2, r3, #21
 8003416:	d4eb      	bmi.n	80033f0 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003418:	f7ff f944 	bl	80026a4 <HAL_GetTick>
 800341c:	1bc0      	subs	r0, r0, r7
 800341e:	2802      	cmp	r0, #2
 8003420:	d9f7      	bls.n	8003412 <HAL_RCC_OscConfig+0x226>
 8003422:	e783      	b.n	800332c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800342a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800342c:	f7ff f93a 	bl	80026a4 <HAL_GetTick>
 8003430:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	055b      	lsls	r3, r3, #21
 8003436:	f57f af30 	bpl.w	800329a <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800343a:	f7ff f933 	bl	80026a4 <HAL_GetTick>
 800343e:	1bc0      	subs	r0, r0, r7
 8003440:	2802      	cmp	r0, #2
 8003442:	d9f6      	bls.n	8003432 <HAL_RCC_OscConfig+0x246>
 8003444:	e772      	b.n	800332c <HAL_RCC_OscConfig+0x140>
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	08008180 	.word	0x08008180
 8003450:	20000080 	.word	0x20000080
 8003454:	20000088 	.word	0x20000088
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003458:	696b      	ldr	r3, [r5, #20]
 800345a:	b19b      	cbz	r3, 8003484 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 800345c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003468:	f7ff f91c 	bl	80026a4 <HAL_GetTick>
 800346c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800346e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003472:	079a      	lsls	r2, r3, #30
 8003474:	f53f af15 	bmi.w	80032a2 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003478:	f7ff f914 	bl	80026a4 <HAL_GetTick>
 800347c:	1bc0      	subs	r0, r0, r7
 800347e:	2802      	cmp	r0, #2
 8003480:	d9f5      	bls.n	800346e <HAL_RCC_OscConfig+0x282>
 8003482:	e753      	b.n	800332c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8003484:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003490:	f7ff f908 	bl	80026a4 <HAL_GetTick>
 8003494:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003496:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800349a:	079b      	lsls	r3, r3, #30
 800349c:	f57f af01 	bpl.w	80032a2 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a0:	f7ff f900 	bl	80026a4 <HAL_GetTick>
 80034a4:	1bc0      	subs	r0, r0, r7
 80034a6:	2802      	cmp	r0, #2
 80034a8:	d9f5      	bls.n	8003496 <HAL_RCC_OscConfig+0x2aa>
 80034aa:	e73f      	b.n	800332c <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034ae:	00df      	lsls	r7, r3, #3
 80034b0:	d429      	bmi.n	8003506 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80034ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80034c4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c8:	4f85      	ldr	r7, [pc, #532]	; (80036e0 <HAL_RCC_OscConfig+0x4f4>)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	05d8      	lsls	r0, r3, #23
 80034ce:	d51d      	bpl.n	800350c <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d0:	68ab      	ldr	r3, [r5, #8]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d12b      	bne.n	800352e <HAL_RCC_OscConfig+0x342>
 80034d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80034e2:	f7ff f8df 	bl	80026a4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80034ea:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80034f0:	079a      	lsls	r2, r3, #30
 80034f2:	d542      	bpl.n	800357a <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 80034f4:	f1b8 0f00 	cmp.w	r8, #0
 80034f8:	f43f aed7 	beq.w	80032aa <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003502:	65a3      	str	r3, [r4, #88]	; 0x58
 8003504:	e6d1      	b.n	80032aa <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8003506:	f04f 0800 	mov.w	r8, #0
 800350a:	e7dd      	b.n	80034c8 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003512:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003514:	f7ff f8c6 	bl	80026a4 <HAL_GetTick>
 8003518:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	05d9      	lsls	r1, r3, #23
 800351e:	d4d7      	bmi.n	80034d0 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7ff f8c0 	bl	80026a4 <HAL_GetTick>
 8003524:	eba0 0009 	sub.w	r0, r0, r9
 8003528:	2802      	cmp	r0, #2
 800352a:	d9f6      	bls.n	800351a <HAL_RCC_OscConfig+0x32e>
 800352c:	e6fe      	b.n	800332c <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352e:	2b05      	cmp	r3, #5
 8003530:	d106      	bne.n	8003540 <HAL_RCC_OscConfig+0x354>
 8003532:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800353e:	e7ca      	b.n	80034d6 <HAL_RCC_OscConfig+0x2ea>
 8003540:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800354c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003550:	f022 0204 	bic.w	r2, r2, #4
 8003554:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1c2      	bne.n	80034e2 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800355c:	f7ff f8a2 	bl	80026a4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003564:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003566:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800356a:	079b      	lsls	r3, r3, #30
 800356c:	d5c2      	bpl.n	80034f4 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7ff f899 	bl	80026a4 <HAL_GetTick>
 8003572:	1bc0      	subs	r0, r0, r7
 8003574:	4548      	cmp	r0, r9
 8003576:	d9f6      	bls.n	8003566 <HAL_RCC_OscConfig+0x37a>
 8003578:	e6d8      	b.n	800332c <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357a:	f7ff f893 	bl	80026a4 <HAL_GetTick>
 800357e:	1bc0      	subs	r0, r0, r7
 8003580:	4548      	cmp	r0, r9
 8003582:	d9b3      	bls.n	80034ec <HAL_RCC_OscConfig+0x300>
 8003584:	e6d2      	b.n	800332c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003586:	2b02      	cmp	r3, #2
 8003588:	f040 808f 	bne.w	80036aa <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 800358c:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800358e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003590:	f003 0103 	and.w	r1, r3, #3
 8003594:	4291      	cmp	r1, r2
 8003596:	d124      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003598:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800359a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800359e:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80035a4:	d11d      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035a6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80035a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035ac:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80035b0:	d117      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035b2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80035b4:	3a07      	subs	r2, #7
 80035b6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80035ba:	bf18      	it	ne
 80035bc:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035be:	4291      	cmp	r1, r2
 80035c0:	d10f      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035c2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80035c4:	0852      	lsrs	r2, r2, #1
 80035c6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80035ca:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80035cc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035d2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80035d4:	0852      	lsrs	r2, r2, #1
 80035d6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80035da:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035dc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80035e0:	d04a      	beq.n	8003678 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035e2:	2e0c      	cmp	r6, #12
 80035e4:	f43f ae06 	beq.w	80031f4 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035e8:	6823      	ldr	r3, [r4, #0]
 80035ea:	015f      	lsls	r7, r3, #5
 80035ec:	f53f ae02 	bmi.w	80031f4 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	00de      	lsls	r6, r3, #3
 80035f4:	f53f adfe 	bmi.w	80031f4 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035fe:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8003600:	f7ff f850 	bl	80026a4 <HAL_GetTick>
 8003604:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003606:	6823      	ldr	r3, [r4, #0]
 8003608:	0198      	lsls	r0, r3, #6
 800360a:	d42f      	bmi.n	800366c <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800360c:	68e2      	ldr	r2, [r4, #12]
 800360e:	4b35      	ldr	r3, [pc, #212]	; (80036e4 <HAL_RCC_OscConfig+0x4f8>)
 8003610:	4013      	ands	r3, r2
 8003612:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003614:	4313      	orrs	r3, r2
 8003616:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003618:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800361c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800361e:	3a01      	subs	r2, #1
 8003620:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003624:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003626:	0912      	lsrs	r2, r2, #4
 8003628:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800362c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800362e:	0852      	lsrs	r2, r2, #1
 8003630:	3a01      	subs	r2, #1
 8003632:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003636:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003638:	0852      	lsrs	r2, r2, #1
 800363a:	3a01      	subs	r2, #1
 800363c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003640:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003648:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800364a:	68e3      	ldr	r3, [r4, #12]
 800364c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003650:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8003652:	f7ff f827 	bl	80026a4 <HAL_GetTick>
 8003656:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	0199      	lsls	r1, r3, #6
 800365c:	f53f ae29 	bmi.w	80032b2 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003660:	f7ff f820 	bl	80026a4 <HAL_GetTick>
 8003664:	1b40      	subs	r0, r0, r5
 8003666:	2802      	cmp	r0, #2
 8003668:	d9f6      	bls.n	8003658 <HAL_RCC_OscConfig+0x46c>
 800366a:	e65f      	b.n	800332c <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366c:	f7ff f81a 	bl	80026a4 <HAL_GetTick>
 8003670:	1b80      	subs	r0, r0, r6
 8003672:	2802      	cmp	r0, #2
 8003674:	d9c7      	bls.n	8003606 <HAL_RCC_OscConfig+0x41a>
 8003676:	e659      	b.n	800332c <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	019a      	lsls	r2, r3, #6
 800367c:	f53f ae19 	bmi.w	80032b2 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003686:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003688:	68e3      	ldr	r3, [r4, #12]
 800368a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800368e:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8003690:	f7ff f808 	bl	80026a4 <HAL_GetTick>
 8003694:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	019b      	lsls	r3, r3, #6
 800369a:	f53f ae0a 	bmi.w	80032b2 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369e:	f7ff f801 	bl	80026a4 <HAL_GetTick>
 80036a2:	1b40      	subs	r0, r0, r5
 80036a4:	2802      	cmp	r0, #2
 80036a6:	d9f6      	bls.n	8003696 <HAL_RCC_OscConfig+0x4aa>
 80036a8:	e640      	b.n	800332c <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036aa:	2e0c      	cmp	r6, #12
 80036ac:	f43f ada2 	beq.w	80031f4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80036b8:	f7fe fff4 	bl	80026a4 <HAL_GetTick>
 80036bc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80036c4:	d105      	bne.n	80036d2 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036c6:	68e1      	ldr	r1, [r4, #12]
 80036c8:	4a07      	ldr	r2, [pc, #28]	; (80036e8 <HAL_RCC_OscConfig+0x4fc>)
 80036ca:	400a      	ands	r2, r1
 80036cc:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 80036ce:	4618      	mov	r0, r3
 80036d0:	e591      	b.n	80031f6 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fe ffe7 	bl	80026a4 <HAL_GetTick>
 80036d6:	1b40      	subs	r0, r0, r5
 80036d8:	2802      	cmp	r0, #2
 80036da:	d9f0      	bls.n	80036be <HAL_RCC_OscConfig+0x4d2>
 80036dc:	e626      	b.n	800332c <HAL_RCC_OscConfig+0x140>
 80036de:	bf00      	nop
 80036e0:	40007000 	.word	0x40007000
 80036e4:	f99d808c 	.word	0xf99d808c
 80036e8:	feeefffc 	.word	0xfeeefffc

080036ec <HAL_RCC_ClockConfig>:
{
 80036ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80036f2:	4604      	mov	r4, r0
 80036f4:	b910      	cbnz	r0, 80036fc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80036f6:	2001      	movs	r0, #1
}
 80036f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036fc:	4a4b      	ldr	r2, [pc, #300]	; (800382c <HAL_RCC_ClockConfig+0x140>)
 80036fe:	6813      	ldr	r3, [r2, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	428b      	cmp	r3, r1
 8003706:	d32c      	bcc.n	8003762 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003708:	6820      	ldr	r0, [r4, #0]
 800370a:	0786      	lsls	r6, r0, #30
 800370c:	d434      	bmi.n	8003778 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	07c1      	lsls	r1, r0, #31
 8003710:	d43f      	bmi.n	8003792 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003712:	6821      	ldr	r1, [r4, #0]
 8003714:	078a      	lsls	r2, r1, #30
 8003716:	d468      	bmi.n	80037ea <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003718:	4a44      	ldr	r2, [pc, #272]	; (800382c <HAL_RCC_ClockConfig+0x140>)
 800371a:	6813      	ldr	r3, [r2, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	42ab      	cmp	r3, r5
 8003722:	d86f      	bhi.n	8003804 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003724:	f011 0f04 	tst.w	r1, #4
 8003728:	4d41      	ldr	r5, [pc, #260]	; (8003830 <HAL_RCC_ClockConfig+0x144>)
 800372a:	d177      	bne.n	800381c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372c:	070b      	lsls	r3, r1, #28
 800372e:	d506      	bpl.n	800373e <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003730:	68ab      	ldr	r3, [r5, #8]
 8003732:	6922      	ldr	r2, [r4, #16]
 8003734:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003738:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800373c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800373e:	f7ff fd07 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 8003742:	68ab      	ldr	r3, [r5, #8]
 8003744:	4a3b      	ldr	r2, [pc, #236]	; (8003834 <HAL_RCC_ClockConfig+0x148>)
 8003746:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800374a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800374e:	5cd3      	ldrb	r3, [r2, r3]
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	40d8      	lsrs	r0, r3
 8003756:	4b38      	ldr	r3, [pc, #224]	; (8003838 <HAL_RCC_ClockConfig+0x14c>)
 8003758:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800375a:	4b38      	ldr	r3, [pc, #224]	; (800383c <HAL_RCC_ClockConfig+0x150>)
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	f7fe bf61 	b.w	8002624 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	6813      	ldr	r3, [r2, #0]
 8003764:	f023 0307 	bic.w	r3, r3, #7
 8003768:	430b      	orrs	r3, r1
 800376a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376c:	6813      	ldr	r3, [r2, #0]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	428b      	cmp	r3, r1
 8003774:	d1bf      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xa>
 8003776:	e7c7      	b.n	8003708 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003778:	4a2d      	ldr	r2, [pc, #180]	; (8003830 <HAL_RCC_ClockConfig+0x144>)
 800377a:	68a6      	ldr	r6, [r4, #8]
 800377c:	6891      	ldr	r1, [r2, #8]
 800377e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8003782:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003784:	bf81      	itttt	hi
 8003786:	6893      	ldrhi	r3, [r2, #8]
 8003788:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 800378c:	4333      	orrhi	r3, r6
 800378e:	6093      	strhi	r3, [r2, #8]
 8003790:	e7bd      	b.n	800370e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003792:	6862      	ldr	r2, [r4, #4]
 8003794:	4e26      	ldr	r6, [pc, #152]	; (8003830 <HAL_RCC_ClockConfig+0x144>)
 8003796:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003798:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800379a:	d11a      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a0:	d0a9      	beq.n	80036f6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037a2:	68b3      	ldr	r3, [r6, #8]
 80037a4:	f023 0303 	bic.w	r3, r3, #3
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80037ac:	f7fe ff7a 	bl	80026a4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80037b4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	68b3      	ldr	r3, [r6, #8]
 80037b8:	6862      	ldr	r2, [r4, #4]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80037c2:	d0a6      	beq.n	8003712 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f7fe ff6e 	bl	80026a4 <HAL_GetTick>
 80037c8:	1bc0      	subs	r0, r0, r7
 80037ca:	4540      	cmp	r0, r8
 80037cc:	d9f3      	bls.n	80037b6 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 80037ce:	2003      	movs	r0, #3
 80037d0:	e792      	b.n	80036f8 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d2:	2a02      	cmp	r2, #2
 80037d4:	d102      	bne.n	80037dc <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80037da:	e7e1      	b.n	80037a0 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037dc:	b912      	cbnz	r2, 80037e4 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037de:	f013 0f02 	tst.w	r3, #2
 80037e2:	e7dd      	b.n	80037a0 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80037e8:	e7da      	b.n	80037a0 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037ea:	4a11      	ldr	r2, [pc, #68]	; (8003830 <HAL_RCC_ClockConfig+0x144>)
 80037ec:	68a6      	ldr	r6, [r4, #8]
 80037ee:	6890      	ldr	r0, [r2, #8]
 80037f0:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 80037f4:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f6:	bf3f      	itttt	cc
 80037f8:	6893      	ldrcc	r3, [r2, #8]
 80037fa:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 80037fe:	4333      	orrcc	r3, r6
 8003800:	6093      	strcc	r3, [r2, #8]
 8003802:	e789      	b.n	8003718 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003804:	6813      	ldr	r3, [r2, #0]
 8003806:	f023 0307 	bic.w	r3, r3, #7
 800380a:	432b      	orrs	r3, r5
 800380c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380e:	6813      	ldr	r3, [r2, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	42ab      	cmp	r3, r5
 8003816:	f47f af6e 	bne.w	80036f6 <HAL_RCC_ClockConfig+0xa>
 800381a:	e783      	b.n	8003724 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800381c:	68ab      	ldr	r3, [r5, #8]
 800381e:	68e2      	ldr	r2, [r4, #12]
 8003820:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003824:	4313      	orrs	r3, r2
 8003826:	60ab      	str	r3, [r5, #8]
 8003828:	e780      	b.n	800372c <HAL_RCC_ClockConfig+0x40>
 800382a:	bf00      	nop
 800382c:	40022000 	.word	0x40022000
 8003830:	40021000 	.word	0x40021000
 8003834:	08008180 	.word	0x08008180
 8003838:	20000080 	.word	0x20000080
 800383c:	20000088 	.word	0x20000088

08003840 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003842:	4a06      	ldr	r2, [pc, #24]	; (800385c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800384a:	5cd3      	ldrb	r3, [r2, r3]
 800384c:	4a04      	ldr	r2, [pc, #16]	; (8003860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800384e:	6810      	ldr	r0, [r2, #0]
 8003850:	f003 031f 	and.w	r3, r3, #31
}
 8003854:	40d8      	lsrs	r0, r3
 8003856:	4770      	bx	lr
 8003858:	40021000 	.word	0x40021000
 800385c:	08008190 	.word	0x08008190
 8003860:	20000080 	.word	0x20000080

08003864 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003866:	4a06      	ldr	r2, [pc, #24]	; (8003880 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800386e:	5cd3      	ldrb	r3, [r2, r3]
 8003870:	4a04      	ldr	r2, [pc, #16]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003872:	6810      	ldr	r0, [r2, #0]
 8003874:	f003 031f 	and.w	r3, r3, #31
}
 8003878:	40d8      	lsrs	r0, r3
 800387a:	4770      	bx	lr
 800387c:	40021000 	.word	0x40021000
 8003880:	08008190 	.word	0x08008190
 8003884:	20000080 	.word	0x20000080

08003888 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003888:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800388c:	461f      	mov	r7, r3
 800388e:	4689      	mov	r9, r1
 8003890:	4690      	mov	r8, r2
 8003892:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003894:	f7fe ff06 	bl	80026a4 <HAL_GetTick>
 8003898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800389a:	443b      	add	r3, r7
 800389c:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 800389e:	f7fe ff01 	bl	80026a4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038a2:	4b26      	ldr	r3, [pc, #152]	; (800393c <SPI_WaitFlagStateUntilTimeout+0xb4>)
 80038a4:	681e      	ldr	r6, [r3, #0]
 80038a6:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 80038aa:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 80038ac:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038ae:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038b0:	6822      	ldr	r2, [r4, #0]
 80038b2:	6893      	ldr	r3, [r2, #8]
 80038b4:	ea39 0303 	bics.w	r3, r9, r3
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	4543      	cmp	r3, r8
 80038c0:	d101      	bne.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 80038c2:	2000      	movs	r0, #0
 80038c4:	e02e      	b.n	8003924 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	1c7b      	adds	r3, r7, #1
 80038c8:	d0f3      	beq.n	80038b2 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038ca:	f7fe feeb 	bl	80026a4 <HAL_GetTick>
 80038ce:	eba0 000a 	sub.w	r0, r0, sl
 80038d2:	42a8      	cmp	r0, r5
 80038d4:	d329      	bcc.n	800392a <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038de:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e0:	6862      	ldr	r2, [r4, #4]
 80038e2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80038e6:	d10a      	bne.n	80038fe <SPI_WaitFlagStateUntilTimeout+0x76>
 80038e8:	68a2      	ldr	r2, [r4, #8]
 80038ea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80038ee:	d002      	beq.n	80038f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038f0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80038f4:	d103      	bne.n	80038fe <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038fc:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003900:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003904:	d107      	bne.n	8003916 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003914:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003916:	2301      	movs	r3, #1
 8003918:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800391c:	2300      	movs	r3, #0
 800391e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003922:	2003      	movs	r0, #3
}
 8003924:	b002      	add	sp, #8
 8003926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 800392a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800392c:	2b00      	cmp	r3, #0
      count--;
 800392e:	9b01      	ldr	r3, [sp, #4]
 8003930:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8003934:	bf08      	it	eq
 8003936:	2500      	moveq	r5, #0
      count--;
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	e7b9      	b.n	80038b0 <SPI_WaitFlagStateUntilTimeout+0x28>
 800393c:	20000080 	.word	0x20000080

08003940 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003944:	4699      	mov	r9, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003946:	2300      	movs	r3, #0
{
 8003948:	4604      	mov	r4, r0
 800394a:	4688      	mov	r8, r1
 800394c:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 800394e:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003952:	f7fe fea7 	bl	80026a4 <HAL_GetTick>
 8003956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003958:	444b      	add	r3, r9
 800395a:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 800395c:	f7fe fea2 	bl	80026a4 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003960:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <SPI_WaitFifoStateUntilTimeout+0xd4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003962:	f8d4 b000 	ldr.w	fp, [r4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003966:	681e      	ldr	r6, [r3, #0]
 8003968:	2323      	movs	r3, #35	; 0x23
 800396a:	435e      	muls	r6, r3
 800396c:	0d36      	lsrs	r6, r6, #20
 800396e:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8003970:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003972:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003974:	6822      	ldr	r2, [r4, #0]
 8003976:	6893      	ldr	r3, [r2, #8]
 8003978:	ea03 0308 	and.w	r3, r3, r8
 800397c:	42bb      	cmp	r3, r7
 800397e:	d101      	bne.n	8003984 <SPI_WaitFifoStateUntilTimeout+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 8003980:	2000      	movs	r0, #0
 8003982:	e03a      	b.n	80039fa <SPI_WaitFifoStateUntilTimeout+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003984:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 8003988:	d107      	bne.n	800399a <SPI_WaitFifoStateUntilTimeout+0x5a>
 800398a:	b937      	cbnz	r7, 800399a <SPI_WaitFifoStateUntilTimeout+0x5a>
      tmpreg8 = *ptmpreg8;
 800398c:	f89b 300c 	ldrb.w	r3, [fp, #12]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8003996:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 800399a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800399e:	d0ea      	beq.n	8003976 <SPI_WaitFifoStateUntilTimeout+0x36>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039a0:	f7fe fe80 	bl	80026a4 <HAL_GetTick>
 80039a4:	eba0 000a 	sub.w	r0, r0, sl
 80039a8:	42a8      	cmp	r0, r5
 80039aa:	d329      	bcc.n	8003a00 <SPI_WaitFifoStateUntilTimeout+0xc0>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039b4:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b6:	6862      	ldr	r2, [r4, #4]
 80039b8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80039bc:	d10a      	bne.n	80039d4 <SPI_WaitFifoStateUntilTimeout+0x94>
 80039be:	68a2      	ldr	r2, [r4, #8]
 80039c0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80039c4:	d002      	beq.n	80039cc <SPI_WaitFifoStateUntilTimeout+0x8c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039c6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80039ca:	d103      	bne.n	80039d4 <SPI_WaitFifoStateUntilTimeout+0x94>
          __HAL_SPI_DISABLE(hspi);
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d2:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80039d6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80039da:	d107      	bne.n	80039ec <SPI_WaitFifoStateUntilTimeout+0xac>
          SPI_RESET_CRC(hspi);
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ea:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80039f2:	2300      	movs	r3, #0
 80039f4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 80039f8:	2003      	movs	r0, #3
}
 80039fa:	b003      	add	sp, #12
 80039fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (count == 0U)
 8003a00:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003a02:	2b00      	cmp	r3, #0
      count--;
 8003a04:	9b01      	ldr	r3, [sp, #4]
 8003a06:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8003a0a:	bf08      	it	eq
 8003a0c:	2500      	moveq	r5, #0
      count--;
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	e7b0      	b.n	8003974 <SPI_WaitFifoStateUntilTimeout+0x34>
 8003a12:	bf00      	nop
 8003a14:	20000080 	.word	0x20000080

08003a18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003a1a:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1c:	6842      	ldr	r2, [r0, #4]
 8003a1e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8003a22:	4604      	mov	r4, r0
 8003a24:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a26:	d10b      	bne.n	8003a40 <SPI_EndRxTransaction+0x28>
 8003a28:	6882      	ldr	r2, [r0, #8]
 8003a2a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003a2e:	d002      	beq.n	8003a36 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a30:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003a34:	d104      	bne.n	8003a40 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a36:	6821      	ldr	r1, [r4, #0]
 8003a38:	680a      	ldr	r2, [r1, #0]
 8003a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a3e:	600a      	str	r2, [r1, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a40:	9600      	str	r6, [sp, #0]
 8003a42:	2200      	movs	r2, #0
 8003a44:	2180      	movs	r1, #128	; 0x80
 8003a46:	4620      	mov	r0, r4
 8003a48:	9303      	str	r3, [sp, #12]
 8003a4a:	f7ff ff1d 	bl	8003888 <SPI_WaitFlagStateUntilTimeout>
 8003a4e:	9b03      	ldr	r3, [sp, #12]
 8003a50:	4605      	mov	r5, r0
 8003a52:	b128      	cbz	r0, 8003a60 <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a54:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003a56:	f043 0320 	orr.w	r3, r3, #32
 8003a5a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8003a5c:	2503      	movs	r5, #3
 8003a5e:	e013      	b.n	8003a88 <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a60:	6862      	ldr	r2, [r4, #4]
 8003a62:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003a66:	d10f      	bne.n	8003a88 <SPI_EndRxTransaction+0x70>
 8003a68:	68a2      	ldr	r2, [r4, #8]
 8003a6a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003a6e:	d002      	beq.n	8003a76 <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a70:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003a74:	d108      	bne.n	8003a88 <SPI_EndRxTransaction+0x70>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a76:	9600      	str	r6, [sp, #0]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f7ff ff5e 	bl	8003940 <SPI_WaitFifoStateUntilTimeout>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d1e5      	bne.n	8003a54 <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 8003a88:	4628      	mov	r0, r5
 8003a8a:	b004      	add	sp, #16
 8003a8c:	bd70      	pop	{r4, r5, r6, pc}

08003a8e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a8e:	b530      	push	{r4, r5, lr}
 8003a90:	b085      	sub	sp, #20
 8003a92:	460b      	mov	r3, r1
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a94:	9200      	str	r2, [sp, #0]
 8003a96:	9103      	str	r1, [sp, #12]
{
 8003a98:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a9a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a9e:	2200      	movs	r2, #0
{
 8003aa0:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003aa2:	f7ff ff4d 	bl	8003940 <SPI_WaitFifoStateUntilTimeout>
 8003aa6:	9b03      	ldr	r3, [sp, #12]
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	b128      	cbz	r0, 8003ab8 <SPI_EndRxTxTransaction+0x2a>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003aae:	f043 0320 	orr.w	r3, r3, #32
 8003ab2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ab4:	2003      	movs	r0, #3
 8003ab6:	e011      	b.n	8003adc <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab8:	9500      	str	r5, [sp, #0]
 8003aba:	2180      	movs	r1, #128	; 0x80
 8003abc:	4620      	mov	r0, r4
 8003abe:	9303      	str	r3, [sp, #12]
 8003ac0:	f7ff fee2 	bl	8003888 <SPI_WaitFlagStateUntilTimeout>
 8003ac4:	9b03      	ldr	r3, [sp, #12]
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d1ef      	bne.n	8003aac <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003acc:	9500      	str	r5, [sp, #0]
 8003ace:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f7ff ff34 	bl	8003940 <SPI_WaitFifoStateUntilTimeout>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	d1e7      	bne.n	8003aac <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 8003adc:	b005      	add	sp, #20
 8003ade:	bd30      	pop	{r4, r5, pc}

08003ae0 <HAL_SPI_MspInit>:
}
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_SPI_Init>:
{
 8003ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 8003ae4:	4604      	mov	r4, r0
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d079      	beq.n	8003bde <HAL_SPI_Init+0xfc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003aea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d14f      	bne.n	8003b90 <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003af0:	6842      	ldr	r2, [r0, #4]
 8003af2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003af6:	d000      	beq.n	8003afa <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003af8:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003afa:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003afe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b02:	b923      	cbnz	r3, 8003b0e <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8003b04:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003b08:	4620      	mov	r0, r4
 8003b0a:	f7ff ffe9 	bl	8003ae0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8003b0e:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b10:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003b12:	2302      	movs	r3, #2
 8003b14:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003b18:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8003b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b22:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	d85b      	bhi.n	8003be2 <HAL_SPI_Init+0x100>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b2a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b2e:	d000      	beq.n	8003b32 <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b30:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b32:	6863      	ldr	r3, [r4, #4]
 8003b34:	68a7      	ldr	r7, [r4, #8]
 8003b36:	69a0      	ldr	r0, [r4, #24]
 8003b38:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b3a:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 8003b3e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003b42:	433b      	orrs	r3, r7
 8003b44:	6927      	ldr	r7, [r4, #16]
 8003b46:	f007 0702 	and.w	r7, r7, #2
 8003b4a:	433b      	orrs	r3, r7
 8003b4c:	6967      	ldr	r7, [r4, #20]
 8003b4e:	f007 0701 	and.w	r7, r7, #1
 8003b52:	433b      	orrs	r3, r7
 8003b54:	f400 7700 	and.w	r7, r0, #512	; 0x200
 8003b58:	433b      	orrs	r3, r7
 8003b5a:	69e7      	ldr	r7, [r4, #28]
 8003b5c:	f007 0738 	and.w	r7, r7, #56	; 0x38
 8003b60:	433b      	orrs	r3, r7
 8003b62:	6a27      	ldr	r7, [r4, #32]
 8003b64:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8003b68:	433b      	orrs	r3, r7
 8003b6a:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 8003b6e:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b70:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b74:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b76:	d111      	bne.n	8003b9c <HAL_SPI_Init+0xba>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003b78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b7a:	bb6b      	cbnz	r3, 8003bd8 <HAL_SPI_Init+0xf6>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003b80:	d90a      	bls.n	8003b98 <HAL_SPI_Init+0xb6>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003b82:	2302      	movs	r3, #2
 8003b84:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8003b86:	6813      	ldr	r3, [r2, #0]
 8003b88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e005      	b.n	8003b9c <HAL_SPI_Init+0xba>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b90:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b96:	e7b0      	b.n	8003afa <HAL_SPI_Init+0x18>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b9e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	f007 0708 	and.w	r7, r7, #8
 8003ba8:	433b      	orrs	r3, r7
 8003baa:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003bae:	0c00      	lsrs	r0, r0, #16
 8003bb0:	4319      	orrs	r1, r3
 8003bb2:	f000 0004 	and.w	r0, r0, #4
 8003bb6:	4301      	orrs	r1, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bb8:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003bbc:	bf08      	it	eq
 8003bbe:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bc0:	ea45 0501 	orr.w	r5, r5, r1
 8003bc4:	6055      	str	r5, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bc6:	f04f 0000 	mov.w	r0, #0
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003bca:	bf08      	it	eq
 8003bcc:	6113      	streq	r3, [r2, #16]
  hspi->State     = HAL_SPI_STATE_READY;
 8003bce:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bd0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bd2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d1df      	bne.n	8003b9c <HAL_SPI_Init+0xba>
 8003bdc:	e7d3      	b.n	8003b86 <HAL_SPI_Init+0xa4>
    return HAL_ERROR;
 8003bde:	2001      	movs	r0, #1
 8003be0:	e7f9      	b.n	8003bd6 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003be2:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003be4:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8003be8:	e7a1      	b.n	8003b2e <HAL_SPI_Init+0x4c>

08003bea <HAL_SPI_MspDeInit>:
 8003bea:	4770      	bx	lr

08003bec <HAL_SPI_DeInit>:
{
 8003bec:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003bee:	4604      	mov	r4, r0
 8003bf0:	b180      	cbz	r0, 8003c14 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8003bf2:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003bfa:	6813      	ldr	r3, [r2, #0]
 8003bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c00:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8003c02:	f7ff fff2 	bl	8003bea <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c06:	2000      	movs	r0, #0
 8003c08:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 8003c0a:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 8003c0e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 8003c12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003c14:	2001      	movs	r0, #1
 8003c16:	e7fc      	b.n	8003c12 <HAL_SPI_DeInit+0x26>

08003c18 <HAL_SPI_TransmitReceive>:
{
 8003c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c1c:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8003c22:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 8003c26:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8003c2a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8003c2c:	2b01      	cmp	r3, #1
{
 8003c2e:	4604      	mov	r4, r0
 8003c30:	460e      	mov	r6, r1
 8003c32:	4692      	mov	sl, r2
  __HAL_LOCK(hspi);
 8003c34:	f000 81b4 	beq.w	8003fa0 <HAL_SPI_TransmitReceive+0x388>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003c3e:	f7fe fd31 	bl	80026a4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003c42:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8003c46:	e9d4 5200 	ldrd	r5, r2, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c4a:	2b01      	cmp	r3, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8003c4c:	6829      	ldr	r1, [r5, #0]
  tickstart = HAL_GetTick();
 8003c4e:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8003c50:	fa5f fc83 	uxtb.w	ip, r3
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8003c54:	6868      	ldr	r0, [r5, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c56:	d00b      	beq.n	8003c70 <HAL_SPI_TransmitReceive+0x58>
 8003c58:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003c5c:	f040 819e 	bne.w	8003f9c <HAL_SPI_TransmitReceive+0x384>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c60:	68a3      	ldr	r3, [r4, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 819a 	bne.w	8003f9c <HAL_SPI_TransmitReceive+0x384>
 8003c68:	f1bc 0f04 	cmp.w	ip, #4
 8003c6c:	f040 8196 	bne.w	8003f9c <HAL_SPI_TransmitReceive+0x384>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c70:	2e00      	cmp	r6, #0
 8003c72:	f000 8176 	beq.w	8003f62 <HAL_SPI_TransmitReceive+0x34a>
 8003c76:	f1ba 0f00 	cmp.w	sl, #0
 8003c7a:	f000 8172 	beq.w	8003f62 <HAL_SPI_TransmitReceive+0x34a>
 8003c7e:	f1b9 0f00 	cmp.w	r9, #0
 8003c82:	f000 816e 	beq.w	8003f62 <HAL_SPI_TransmitReceive+0x34a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c86:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c8a:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c8e:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c90:	bf1c      	itt	ne
 8003c92:	2305      	movne	r3, #5
 8003c94:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8003c9c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ca0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8003ca2:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 8003caa:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003cae:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003cb0:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003cb4:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cb8:	d107      	bne.n	8003cca <HAL_SPI_TransmitReceive+0xb2>
    SPI_RESET_CRC(hspi);
 8003cba:	682b      	ldr	r3, [r5, #0]
 8003cbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cc0:	602b      	str	r3, [r5, #0]
 8003cc2:	682b      	ldr	r3, [r5, #0]
 8003cc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cc8:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003cca:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cce:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003cd0:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8003cd4:	d802      	bhi.n	8003cdc <HAL_SPI_TransmitReceive+0xc4>
 8003cd6:	f1b9 0f01 	cmp.w	r9, #1
 8003cda:	d03a      	beq.n	8003d52 <HAL_SPI_TransmitReceive+0x13a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ce0:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ce2:	682b      	ldr	r3, [r5, #0]
 8003ce4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8003ce6:	bf5e      	ittt	pl
 8003ce8:	682b      	ldrpl	r3, [r5, #0]
 8003cea:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003cee:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cf0:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8003cf4:	d97f      	bls.n	8003df6 <HAL_SPI_TransmitReceive+0x1de>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cf6:	b112      	cbz	r2, 8003cfe <HAL_SPI_TransmitReceive+0xe6>
 8003cf8:	f1b9 0f01 	cmp.w	r9, #1
 8003cfc:	d107      	bne.n	8003d0e <HAL_SPI_TransmitReceive+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cfe:	f836 3b02 	ldrh.w	r3, [r6], #2
 8003d02:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 8003d04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d06:	63a6      	str	r6, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003d0e:	f04f 0901 	mov.w	r9, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003d12:	f001 0604 	and.w	r6, r1, #4
 8003d16:	f000 0508 	and.w	r5, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	b9db      	cbnz	r3, 8003d58 <HAL_SPI_TransmitReceive+0x140>
 8003d20:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	b9bb      	cbnz	r3, 8003d58 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d2e:	f040 8101 	bne.w	8003f34 <HAL_SPI_TransmitReceive+0x31c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003d32:	2201      	movs	r2, #1
 8003d34:	f8cd 8000 	str.w	r8, [sp]
 8003d38:	463b      	mov	r3, r7
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	f7ff fda3 	bl	8003888 <SPI_WaitFlagStateUntilTimeout>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	f000 80ee 	beq.w	8003f24 <HAL_SPI_TransmitReceive+0x30c>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003d48:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003d4a:	f043 0302 	orr.w	r3, r3, #2
 8003d4e:	6623      	str	r3, [r4, #96]	; 0x60
 8003d50:	e02a      	b.n	8003da8 <HAL_SPI_TransmitReceive+0x190>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d56:	e7c3      	b.n	8003ce0 <HAL_SPI_TransmitReceive+0xc8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	0790      	lsls	r0, r2, #30
 8003d5e:	d507      	bpl.n	8003d70 <HAL_SPI_TransmitReceive+0x158>
 8003d60:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003d62:	b292      	uxth	r2, r2
 8003d64:	b122      	cbz	r2, 8003d70 <HAL_SPI_TransmitReceive+0x158>
 8003d66:	f1b9 0f00 	cmp.w	r9, #0
 8003d6a:	d128      	bne.n	8003dbe <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 8003d6c:	f04f 0900 	mov.w	r9, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d70:	6899      	ldr	r1, [r3, #8]
 8003d72:	f011 0101 	ands.w	r1, r1, #1
 8003d76:	d00f      	beq.n	8003d98 <HAL_SPI_TransmitReceive+0x180>
 8003d78:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003d7c:	b292      	uxth	r2, r2
 8003d7e:	b15a      	cbz	r2, 8003d98 <HAL_SPI_TransmitReceive+0x180>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d84:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d88:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003d8a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8003d96:	4689      	mov	r9, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d98:	f7fe fc84 	bl	80026a4 <HAL_GetTick>
 8003d9c:	eba0 0008 	sub.w	r0, r0, r8
 8003da0:	42b8      	cmp	r0, r7
 8003da2:	d3ba      	bcc.n	8003d1a <HAL_SPI_TransmitReceive+0x102>
 8003da4:	1c79      	adds	r1, r7, #1
 8003da6:	d0b8      	beq.n	8003d1a <HAL_SPI_TransmitReceive+0x102>
          errorcode = HAL_TIMEOUT;
 8003da8:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003db0:	2300      	movs	r3, #0
 8003db2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003db6:	4628      	mov	r0, r5
 8003db8:	b004      	add	sp, #16
 8003dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003dc0:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003dc4:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dc6:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003dc8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003dca:	3a01      	subs	r2, #1
 8003dcc:	b292      	uxth	r2, r2
 8003dce:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003dd0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003dd2:	b292      	uxth	r2, r2
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	d1c9      	bne.n	8003d6c <HAL_SPI_TransmitReceive+0x154>
 8003dd8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003dda:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003dde:	d1c5      	bne.n	8003d6c <HAL_SPI_TransmitReceive+0x154>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003de0:	b926      	cbnz	r6, 8003dec <HAL_SPI_TransmitReceive+0x1d4>
 8003de2:	b11d      	cbz	r5, 8003dec <HAL_SPI_TransmitReceive+0x1d4>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dea:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	e7ba      	b.n	8003d6c <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df6:	b112      	cbz	r2, 8003dfe <HAL_SPI_TransmitReceive+0x1e6>
 8003df8:	f1b9 0f01 	cmp.w	r9, #1
 8003dfc:	d10b      	bne.n	8003e16 <HAL_SPI_TransmitReceive+0x1fe>
      if (hspi->TxXferCount > 1U)
 8003dfe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d90d      	bls.n	8003e22 <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e06:	f836 3b02 	ldrh.w	r3, [r6], #2
 8003e0a:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 8003e0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e0e:	63a6      	str	r6, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e10:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003e16:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003e18:	f001 0604 	and.w	r6, r1, #4
 8003e1c:	f000 0908 	and.w	r9, r0, #8
 8003e20:	e03c      	b.n	8003e9c <HAL_SPI_TransmitReceive+0x284>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e22:	7833      	ldrb	r3, [r6, #0]
 8003e24:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 8003e26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003e28:	3301      	adds	r3, #1
 8003e2a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003e2c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	e7ef      	b.n	8003e12 <HAL_SPI_TransmitReceive+0x1fa>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e32:	6821      	ldr	r1, [r4, #0]
 8003e34:	688b      	ldr	r3, [r1, #8]
 8003e36:	079a      	lsls	r2, r3, #30
 8003e38:	d505      	bpl.n	8003e46 <HAL_SPI_TransmitReceive+0x22e>
 8003e3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	b113      	cbz	r3, 8003e46 <HAL_SPI_TransmitReceive+0x22e>
 8003e40:	2d00      	cmp	r5, #0
 8003e42:	d135      	bne.n	8003eb0 <HAL_SPI_TransmitReceive+0x298>
        txallowed = 0U;
 8003e44:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e46:	6821      	ldr	r1, [r4, #0]
 8003e48:	688b      	ldr	r3, [r1, #8]
 8003e4a:	f013 0301 	ands.w	r3, r3, #1
 8003e4e:	d01d      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x274>
 8003e50:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003e54:	b292      	uxth	r2, r2
 8003e56:	b1ca      	cbz	r2, 8003e8c <HAL_SPI_TransmitReceive+0x274>
        if (hspi->RxXferCount > 1U)
 8003e58:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e5c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 8003e5e:	b280      	uxth	r0, r0
 8003e60:	2801      	cmp	r0, #1
 8003e62:	d950      	bls.n	8003f06 <HAL_SPI_TransmitReceive+0x2ee>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e64:	68c8      	ldr	r0, [r1, #12]
 8003e66:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e6a:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003e6c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003e70:	3a02      	subs	r2, #2
 8003e72:	b292      	uxth	r2, r2
 8003e74:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003e78:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003e7c:	b292      	uxth	r2, r2
 8003e7e:	2a01      	cmp	r2, #1
 8003e80:	d803      	bhi.n	8003e8a <HAL_SPI_TransmitReceive+0x272>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e82:	684a      	ldr	r2, [r1, #4]
 8003e84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e88:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 8003e8a:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e8c:	f7fe fc0a 	bl	80026a4 <HAL_GetTick>
 8003e90:	eba0 0008 	sub.w	r0, r0, r8
 8003e94:	42b8      	cmp	r0, r7
 8003e96:	d342      	bcc.n	8003f1e <HAL_SPI_TransmitReceive+0x306>
 8003e98:	1c7b      	adds	r3, r7, #1
 8003e9a:	d185      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x190>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1c6      	bne.n	8003e32 <HAL_SPI_TransmitReceive+0x21a>
 8003ea4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1c1      	bne.n	8003e32 <HAL_SPI_TransmitReceive+0x21a>
 8003eae:	e73b      	b.n	8003d28 <HAL_SPI_TransmitReceive+0x110>
        if (hspi->TxXferCount > 1U)
 8003eb0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8003eb4:	b292      	uxth	r2, r2
 8003eb6:	2a01      	cmp	r2, #1
 8003eb8:	d91d      	bls.n	8003ef6 <HAL_SPI_TransmitReceive+0x2de>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eba:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003ebe:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ec2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ec4:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003eca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1b8      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x22c>
 8003ed2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed8:	d1b4      	bne.n	8003e44 <HAL_SPI_TransmitReceive+0x22c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8003eda:	6823      	ldr	r3, [r4, #0]
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8003edc:	b936      	cbnz	r6, 8003eec <HAL_SPI_TransmitReceive+0x2d4>
 8003ede:	f1b9 0f00 	cmp.w	r9, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_SPI_TransmitReceive+0x2d4>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eea:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e7a6      	b.n	8003e44 <HAL_SPI_TransmitReceive+0x22c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 8003efa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003efc:	3301      	adds	r3, #1
 8003efe:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003f00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003f02:	3b01      	subs	r3, #1
 8003f04:	e7df      	b.n	8003ec6 <HAL_SPI_TransmitReceive+0x2ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f06:	7b09      	ldrb	r1, [r1, #12]
 8003f08:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8003f0a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f0c:	3201      	adds	r2, #1
 8003f0e:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003f10:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003f14:	3a01      	subs	r2, #1
 8003f16:	b292      	uxth	r2, r2
 8003f18:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8003f1c:	e7b5      	b.n	8003e8a <HAL_SPI_TransmitReceive+0x272>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f1e:	2f00      	cmp	r7, #0
 8003f20:	d1bc      	bne.n	8003e9c <HAL_SPI_TransmitReceive+0x284>
 8003f22:	e741      	b.n	8003da8 <HAL_SPI_TransmitReceive+0x190>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f24:	68e3      	ldr	r3, [r4, #12]
      tmpreg = READ_REG(hspi->Instance->DR);
 8003f26:	6825      	ldr	r5, [r4, #0]
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f28:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f2c:	d11b      	bne.n	8003f66 <HAL_SPI_TransmitReceive+0x34e>
      tmpreg = READ_REG(hspi->Instance->DR);
 8003f2e:	68eb      	ldr	r3, [r5, #12]
 8003f30:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8003f32:	9b03      	ldr	r3, [sp, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003f34:	6822      	ldr	r2, [r4, #0]
 8003f36:	6895      	ldr	r5, [r2, #8]
 8003f38:	f015 0510 	ands.w	r5, r5, #16
 8003f3c:	d007      	beq.n	8003f4e <HAL_SPI_TransmitReceive+0x336>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003f3e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003f40:	f043 0302 	orr.w	r3, r3, #2
 8003f44:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003f46:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003f4a:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8003f4c:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f4e:	4642      	mov	r2, r8
 8003f50:	4639      	mov	r1, r7
 8003f52:	4620      	mov	r0, r4
 8003f54:	f7ff fd9b 	bl	8003a8e <SPI_EndRxTxTransaction>
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	f43f af26 	beq.w	8003daa <HAL_SPI_TransmitReceive+0x192>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f5e:	2320      	movs	r3, #32
 8003f60:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003f62:	2501      	movs	r5, #1
 8003f64:	e721      	b.n	8003daa <HAL_SPI_TransmitReceive+0x192>
      tmpreg8 = *ptmpreg8;
 8003f66:	7b2b      	ldrb	r3, [r5, #12]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 8003f6e:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003f72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d1dd      	bne.n	8003f34 <HAL_SPI_TransmitReceive+0x31c>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f8cd 8000 	str.w	r8, [sp]
 8003f7e:	463b      	mov	r3, r7
 8003f80:	4611      	mov	r1, r2
 8003f82:	4620      	mov	r0, r4
 8003f84:	f7ff fc80 	bl	8003888 <SPI_WaitFlagStateUntilTimeout>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	f47f aedd 	bne.w	8003d48 <HAL_SPI_TransmitReceive+0x130>
        tmpreg8 = *ptmpreg8;
 8003f8e:	7b2b      	ldrb	r3, [r5, #12]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8003f96:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003f9a:	e7cb      	b.n	8003f34 <HAL_SPI_TransmitReceive+0x31c>
    errorcode = HAL_BUSY;
 8003f9c:	2502      	movs	r5, #2
 8003f9e:	e704      	b.n	8003daa <HAL_SPI_TransmitReceive+0x192>
  __HAL_LOCK(hspi);
 8003fa0:	2502      	movs	r5, #2
 8003fa2:	e708      	b.n	8003db6 <HAL_SPI_TransmitReceive+0x19e>

08003fa4 <HAL_SPI_Receive>:
{
 8003fa4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003fa8:	461e      	mov	r6, r3
  __IO uint32_t tmpreg = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8003fae:	f88d 300b 	strb.w	r3, [sp, #11]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fb2:	6843      	ldr	r3, [r0, #4]
 8003fb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8003fb8:	4604      	mov	r4, r0
 8003fba:	4688      	mov	r8, r1
 8003fbc:	4615      	mov	r5, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fbe:	d10c      	bne.n	8003fda <HAL_SPI_Receive+0x36>
 8003fc0:	6883      	ldr	r3, [r0, #8]
 8003fc2:	b953      	cbnz	r3, 8003fda <HAL_SPI_Receive+0x36>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003fc4:	2304      	movs	r3, #4
 8003fc6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003fca:	4613      	mov	r3, r2
 8003fcc:	9600      	str	r6, [sp, #0]
 8003fce:	460a      	mov	r2, r1
 8003fd0:	f7ff fe22 	bl	8003c18 <HAL_SPI_TransmitReceive>
}
 8003fd4:	b004      	add	sp, #16
 8003fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8003fda:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	f000 8102 	beq.w	80041e8 <HAL_SPI_Receive+0x244>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003fea:	f7fe fb5b 	bl	80026a4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003fee:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003ff2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003ff4:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003ff6:	b2d8      	uxtb	r0, r3
 8003ff8:	f040 80f4 	bne.w	80041e4 <HAL_SPI_Receive+0x240>
  if ((pData == NULL) || (Size == 0U))
 8003ffc:	f1b8 0f00 	cmp.w	r8, #0
 8004000:	f000 809f 	beq.w	8004142 <HAL_SPI_Receive+0x19e>
 8004004:	2d00      	cmp	r5, #0
 8004006:	f000 809c 	beq.w	8004142 <HAL_SPI_Receive+0x19e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800400a:	2304      	movs	r3, #4
 800400c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004010:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferSize  = Size;
 8004012:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004016:	2000      	movs	r0, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800401c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 800401e:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 8004022:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004026:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    SPI_RESET_CRC(hspi);
 800402a:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800402c:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800402e:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004030:	87e0      	strh	r0, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004032:	d10d      	bne.n	8004050 <HAL_SPI_Receive+0xac>
    SPI_RESET_CRC(hspi);
 8004034:	682b      	ldr	r3, [r5, #0]
 8004036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800403a:	602b      	str	r3, [r5, #0]
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004042:	602b      	str	r3, [r5, #0]
    hspi->RxXferCount--;
 8004044:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004048:	3b01      	subs	r3, #1
 800404a:	b29b      	uxth	r3, r3
 800404c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004050:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004052:	686b      	ldr	r3, [r5, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004054:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004058:	bf8c      	ite	hi
 800405a:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800405e:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 8004062:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004064:	68a3      	ldr	r3, [r4, #8]
 8004066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406a:	d107      	bne.n	800407c <HAL_SPI_Receive+0xd8>
    __HAL_SPI_DISABLE(hspi);
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004072:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8004074:	682b      	ldr	r3, [r5, #0]
 8004076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800407a:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8004080:	bf5e      	ittt	pl
 8004082:	682b      	ldrpl	r3, [r5, #0]
 8004084:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004088:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800408a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800408e:	d923      	bls.n	80040d8 <HAL_SPI_Receive+0x134>
    while (hspi->RxXferCount > 0U)
 8004090:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004094:	b29b      	uxth	r3, r3
 8004096:	b323      	cbz	r3, 80040e2 <HAL_SPI_Receive+0x13e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	07d1      	lsls	r1, r2, #31
 800409e:	d55a      	bpl.n	8004156 <HAL_SPI_Receive+0x1b2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040a4:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040a8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80040aa:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80040b6:	e7eb      	b.n	8004090 <HAL_SPI_Receive+0xec>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	07d5      	lsls	r5, r2, #31
 80040be:	d538      	bpl.n	8004132 <HAL_SPI_Receive+0x18e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040c2:	7b1b      	ldrb	r3, [r3, #12]
 80040c4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80040c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040c8:	3301      	adds	r3, #1
 80040ca:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80040cc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 80040d8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1ea      	bne.n	80040b8 <HAL_SPI_Receive+0x114>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040e8:	d148      	bne.n	800417c <HAL_SPI_Receive+0x1d8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80040ea:	6822      	ldr	r2, [r4, #0]
 80040ec:	6813      	ldr	r3, [r2, #0]
 80040ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040f2:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80040f4:	2201      	movs	r2, #1
 80040f6:	9700      	str	r7, [sp, #0]
 80040f8:	4633      	mov	r3, r6
 80040fa:	4611      	mov	r1, r2
 80040fc:	4620      	mov	r0, r4
 80040fe:	f7ff fbc3 	bl	8003888 <SPI_WaitFlagStateUntilTimeout>
 8004102:	b9e8      	cbnz	r0, 8004140 <HAL_SPI_Receive+0x19c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004104:	68e1      	ldr	r1, [r4, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004106:	6822      	ldr	r2, [r4, #0]
 8004108:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800410a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800410e:	bf8b      	itete	hi
 8004110:	68d2      	ldrhi	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004112:	7b12      	ldrbls	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004114:	801a      	strhhi	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004116:	701a      	strbls	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004118:	2201      	movs	r2, #1
 800411a:	9700      	str	r7, [sp, #0]
 800411c:	4633      	mov	r3, r6
 800411e:	4611      	mov	r1, r2
 8004120:	4620      	mov	r0, r4
 8004122:	f7ff fbb1 	bl	8003888 <SPI_WaitFlagStateUntilTimeout>
 8004126:	b308      	cbz	r0, 800416c <HAL_SPI_Receive+0x1c8>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004128:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800412a:	f043 0302 	orr.w	r3, r3, #2
 800412e:	6623      	str	r3, [r4, #96]	; 0x60
 8004130:	e006      	b.n	8004140 <HAL_SPI_Receive+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004132:	f7fe fab7 	bl	80026a4 <HAL_GetTick>
 8004136:	1bc0      	subs	r0, r0, r7
 8004138:	42b0      	cmp	r0, r6
 800413a:	d309      	bcc.n	8004150 <HAL_SPI_Receive+0x1ac>
 800413c:	1c70      	adds	r0, r6, #1
 800413e:	d0cb      	beq.n	80040d8 <HAL_SPI_Receive+0x134>
          errorcode = HAL_TIMEOUT;
 8004140:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004142:	2301      	movs	r3, #1
 8004144:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004148:	2300      	movs	r3, #0
 800414a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 800414e:	e741      	b.n	8003fd4 <HAL_SPI_Receive+0x30>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004150:	2e00      	cmp	r6, #0
 8004152:	d1c1      	bne.n	80040d8 <HAL_SPI_Receive+0x134>
 8004154:	e7f4      	b.n	8004140 <HAL_SPI_Receive+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004156:	f7fe faa5 	bl	80026a4 <HAL_GetTick>
 800415a:	1bc0      	subs	r0, r0, r7
 800415c:	42b0      	cmp	r0, r6
 800415e:	d302      	bcc.n	8004166 <HAL_SPI_Receive+0x1c2>
 8004160:	1c72      	adds	r2, r6, #1
 8004162:	d095      	beq.n	8004090 <HAL_SPI_Receive+0xec>
 8004164:	e7ec      	b.n	8004140 <HAL_SPI_Receive+0x19c>
 8004166:	2e00      	cmp	r6, #0
 8004168:	d192      	bne.n	8004090 <HAL_SPI_Receive+0xec>
 800416a:	e7e9      	b.n	8004140 <HAL_SPI_Receive+0x19c>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800416c:	68e2      	ldr	r2, [r4, #12]
      tmpreg = READ_REG(hspi->Instance->DR);
 800416e:	6825      	ldr	r5, [r4, #0]
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004170:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8004174:	d11a      	bne.n	80041ac <HAL_SPI_Receive+0x208>
      tmpreg = READ_REG(hspi->Instance->DR);
 8004176:	68eb      	ldr	r3, [r5, #12]
 8004178:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 800417a:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800417c:	463a      	mov	r2, r7
 800417e:	4631      	mov	r1, r6
 8004180:	4620      	mov	r0, r4
 8004182:	f7ff fc49 	bl	8003a18 <SPI_EndRxTransaction>
 8004186:	b108      	cbz	r0, 800418c <HAL_SPI_Receive+0x1e8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004188:	2320      	movs	r3, #32
 800418a:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800418c:	6822      	ldr	r2, [r4, #0]
 800418e:	6893      	ldr	r3, [r2, #8]
 8004190:	06db      	lsls	r3, r3, #27
 8004192:	d506      	bpl.n	80041a2 <HAL_SPI_Receive+0x1fe>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004194:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004196:	f043 0302 	orr.w	r3, r3, #2
 800419a:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800419c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80041a0:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041a2:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80041a4:	3800      	subs	r0, #0
 80041a6:	bf18      	it	ne
 80041a8:	2001      	movne	r0, #1
error :
 80041aa:	e7ca      	b.n	8004142 <HAL_SPI_Receive+0x19e>
      tmpreg8 = *ptmpreg8;
 80041ac:	7b2b      	ldrb	r3, [r5, #12]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f88d 300b 	strb.w	r3, [sp, #11]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80041b4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      UNUSED(tmpreg8);
 80041b8:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80041bc:	d1de      	bne.n	800417c <HAL_SPI_Receive+0x1d8>
 80041be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d1db      	bne.n	800417c <HAL_SPI_Receive+0x1d8>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80041c4:	2201      	movs	r2, #1
 80041c6:	9700      	str	r7, [sp, #0]
 80041c8:	4633      	mov	r3, r6
 80041ca:	4611      	mov	r1, r2
 80041cc:	4620      	mov	r0, r4
 80041ce:	f7ff fb5b 	bl	8003888 <SPI_WaitFlagStateUntilTimeout>
 80041d2:	2800      	cmp	r0, #0
 80041d4:	d1a8      	bne.n	8004128 <HAL_SPI_Receive+0x184>
        tmpreg8 = *ptmpreg8;
 80041d6:	7b2b      	ldrb	r3, [r5, #12]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 80041de:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80041e2:	e7cb      	b.n	800417c <HAL_SPI_Receive+0x1d8>
    errorcode = HAL_BUSY;
 80041e4:	2002      	movs	r0, #2
 80041e6:	e7ac      	b.n	8004142 <HAL_SPI_Receive+0x19e>
  __HAL_LOCK(hspi);
 80041e8:	2002      	movs	r0, #2
 80041ea:	e6f3      	b.n	8003fd4 <HAL_SPI_Receive+0x30>

080041ec <HAL_SPI_Transmit_IT>:
{
 80041ec:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 80041ee:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 80041f2:	2801      	cmp	r0, #1
 80041f4:	d04d      	beq.n	8004292 <HAL_SPI_Transmit_IT+0xa6>
 80041f6:	2001      	movs	r0, #1
 80041f8:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 80041fc:	2900      	cmp	r1, #0
 80041fe:	d040      	beq.n	8004282 <HAL_SPI_Transmit_IT+0x96>
 8004200:	2a00      	cmp	r2, #0
 8004202:	d03e      	beq.n	8004282 <HAL_SPI_Transmit_IT+0x96>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004204:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8004208:	2801      	cmp	r0, #1
 800420a:	d13e      	bne.n	800428a <HAL_SPI_Transmit_IT+0x9e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800420c:	2003      	movs	r0, #3
 800420e:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004212:	2000      	movs	r0, #0
 8004214:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004216:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004218:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR = SPI_TxISR_8BIT;
 800421a:	491f      	ldr	r1, [pc, #124]	; (8004298 <HAL_SPI_Transmit_IT+0xac>)
  hspi->TxXferSize  = Size;
 800421c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800421e:	6418      	str	r0, [r3, #64]	; 0x40
    hspi->TxISR = SPI_TxISR_8BIT;
 8004220:	4a1e      	ldr	r2, [pc, #120]	; (800429c <HAL_SPI_Transmit_IT+0xb0>)
  hspi->RxXferSize  = 0U;
 8004222:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004226:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800422a:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800422c:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 800422e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004232:	bf98      	it	ls
 8004234:	460a      	movls	r2, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004236:	6899      	ldr	r1, [r3, #8]
 8004238:	651a      	str	r2, [r3, #80]	; 0x50
 800423a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800423e:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004240:	d107      	bne.n	8004252 <HAL_SPI_Transmit_IT+0x66>
    __HAL_SPI_DISABLE(hspi);
 8004242:	6811      	ldr	r1, [r2, #0]
 8004244:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004248:	6011      	str	r1, [r2, #0]
    SPI_1LINE_TX(hspi);
 800424a:	6811      	ldr	r1, [r2, #0]
 800424c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004250:	6011      	str	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004252:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004254:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004258:	d107      	bne.n	800426a <HAL_SPI_Transmit_IT+0x7e>
    SPI_RESET_CRC(hspi);
 800425a:	6811      	ldr	r1, [r2, #0]
 800425c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8004260:	6011      	str	r1, [r2, #0]
 8004262:	6811      	ldr	r1, [r2, #0]
 8004264:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8004268:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800426a:	6851      	ldr	r1, [r2, #4]
 800426c:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 8004270:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004272:	6810      	ldr	r0, [r2, #0]
 8004274:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8004278:	d109      	bne.n	800428e <HAL_SPI_Transmit_IT+0xa2>
    __HAL_SPI_ENABLE(hspi);
 800427a:	6811      	ldr	r1, [r2, #0]
 800427c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004280:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8004282:	2200      	movs	r2, #0
 8004284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004288:	4770      	bx	lr
    errorcode = HAL_BUSY;
 800428a:	2002      	movs	r0, #2
 800428c:	e7f9      	b.n	8004282 <HAL_SPI_Transmit_IT+0x96>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800428e:	2000      	movs	r0, #0
 8004290:	e7f7      	b.n	8004282 <HAL_SPI_Transmit_IT+0x96>
  __HAL_LOCK(hspi);
 8004292:	2002      	movs	r0, #2
}
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	080044f3 	.word	0x080044f3
 800429c:	08004527 	.word	0x08004527

080042a0 <HAL_SPI_TransmitReceive_IT>:
{
 80042a0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hspi);
 80042a2:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 80042a6:	2c01      	cmp	r4, #1
 80042a8:	d070      	beq.n	800438c <HAL_SPI_TransmitReceive_IT+0xec>
 80042aa:	2401      	movs	r4, #1
 80042ac:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 80042b0:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042b4:	2c01      	cmp	r4, #1
  tmp_state           = hspi->State;
 80042b6:	b2e5      	uxtb	r5, r4
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042b8:	d008      	beq.n	80042cc <HAL_SPI_TransmitReceive_IT+0x2c>
 80042ba:	6844      	ldr	r4, [r0, #4]
 80042bc:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 80042c0:	d15e      	bne.n	8004380 <HAL_SPI_TransmitReceive_IT+0xe0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042c2:	6884      	ldr	r4, [r0, #8]
 80042c4:	2c00      	cmp	r4, #0
 80042c6:	d15b      	bne.n	8004380 <HAL_SPI_TransmitReceive_IT+0xe0>
 80042c8:	2d04      	cmp	r5, #4
 80042ca:	d159      	bne.n	8004380 <HAL_SPI_TransmitReceive_IT+0xe0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042cc:	2900      	cmp	r1, #0
 80042ce:	d059      	beq.n	8004384 <HAL_SPI_TransmitReceive_IT+0xe4>
 80042d0:	2a00      	cmp	r2, #0
 80042d2:	d057      	beq.n	8004384 <HAL_SPI_TransmitReceive_IT+0xe4>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d055      	beq.n	8004384 <HAL_SPI_TransmitReceive_IT+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042d8:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042dc:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042de:	2c04      	cmp	r4, #4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042e0:	68c1      	ldr	r1, [r0, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042e2:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042e4:	bf1c      	itt	ne
 80042e6:	2405      	movne	r4, #5
 80042e8:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80042f0:	bf8b      	itete	hi
 80042f2:	4a27      	ldrhi	r2, [pc, #156]	; (8004390 <HAL_SPI_TransmitReceive_IT+0xf0>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80042f4:	4a27      	ldrls	r2, [pc, #156]	; (8004394 <HAL_SPI_TransmitReceive_IT+0xf4>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80042f6:	64c2      	strhi	r2, [r0, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80042f8:	64c2      	strls	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80042fa:	bf8c      	ite	hi
 80042fc:	4a26      	ldrhi	r2, [pc, #152]	; (8004398 <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80042fe:	4a27      	ldrls	r2, [pc, #156]	; (800439c <HAL_SPI_TransmitReceive_IT+0xfc>)
 8004300:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004302:	6a82      	ldr	r2, [r0, #40]	; 0x28
  hspi->TxXferSize  = Size;
 8004304:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004306:	2400      	movs	r4, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004308:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800430c:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 800430e:	6802      	ldr	r2, [r0, #0]
 8004310:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004312:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004316:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800431a:	d12a      	bne.n	8004372 <HAL_SPI_TransmitReceive_IT+0xd2>
    hspi->CRCSize = 1U;
 800431c:	2401      	movs	r4, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800431e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8004322:	6484      	str	r4, [r0, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8004324:	d803      	bhi.n	800432e <HAL_SPI_TransmitReceive_IT+0x8e>
 8004326:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004328:	2c02      	cmp	r4, #2
      hspi->CRCSize = 2U;
 800432a:	bf08      	it	eq
 800432c:	6484      	streq	r4, [r0, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 800432e:	6814      	ldr	r4, [r2, #0]
 8004330:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8004334:	6014      	str	r4, [r2, #0]
 8004336:	6814      	ldr	r4, [r2, #0]
 8004338:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800433c:	6014      	str	r4, [r2, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800433e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004342:	d801      	bhi.n	8004348 <HAL_SPI_TransmitReceive_IT+0xa8>
 8004344:	2b01      	cmp	r3, #1
 8004346:	d017      	beq.n	8004378 <HAL_SPI_TransmitReceive_IT+0xd8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004348:	6853      	ldr	r3, [r2, #4]
 800434a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800434e:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004350:	6853      	ldr	r3, [r2, #4]
 8004352:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8004356:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004358:	6813      	ldr	r3, [r2, #0]
 800435a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800435e:	d113      	bne.n	8004388 <HAL_SPI_TransmitReceive_IT+0xe8>
    __HAL_SPI_ENABLE(hspi);
 8004360:	6811      	ldr	r1, [r2, #0]
 8004362:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004366:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8004368:	2200      	movs	r2, #0
 800436a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 800436e:	4618      	mov	r0, r3
 8004370:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 8004372:	2400      	movs	r4, #0
 8004374:	6484      	str	r4, [r0, #72]	; 0x48
 8004376:	e7e2      	b.n	800433e <HAL_SPI_TransmitReceive_IT+0x9e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004378:	6853      	ldr	r3, [r2, #4]
 800437a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800437e:	e7e6      	b.n	800434e <HAL_SPI_TransmitReceive_IT+0xae>
    errorcode = HAL_BUSY;
 8004380:	2302      	movs	r3, #2
 8004382:	e7f1      	b.n	8004368 <HAL_SPI_TransmitReceive_IT+0xc8>
    errorcode = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e7ef      	b.n	8004368 <HAL_SPI_TransmitReceive_IT+0xc8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	e7ed      	b.n	8004368 <HAL_SPI_TransmitReceive_IT+0xc8>
  __HAL_LOCK(hspi);
 800438c:	2302      	movs	r3, #2
 800438e:	e7ee      	b.n	800436e <HAL_SPI_TransmitReceive_IT+0xce>
 8004390:	08004889 	.word	0x08004889
 8004394:	08004779 	.word	0x08004779
 8004398:	08004833 	.word	0x08004833
 800439c:	08004713 	.word	0x08004713

080043a0 <HAL_SPI_Receive_IT>:
{
 80043a0:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80043a2:	6886      	ldr	r6, [r0, #8]
{
 80043a4:	4604      	mov	r4, r0
 80043a6:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80043a8:	b95e      	cbnz	r6, 80043c2 <HAL_SPI_Receive_IT+0x22>
 80043aa:	6843      	ldr	r3, [r0, #4]
 80043ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b0:	d107      	bne.n	80043c2 <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043b2:	2304      	movs	r3, #4
 80043b4:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 80043b8:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80043ba:	4613      	mov	r3, r2
 80043bc:	460a      	mov	r2, r1
 80043be:	f7ff bf6f 	b.w	80042a0 <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 80043c2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d061      	beq.n	800448e <HAL_SPI_Receive_IT+0xee>
 80043ca:	2301      	movs	r3, #1
 80043cc:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 80043d0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	b2d8      	uxtb	r0, r3
 80043d8:	d155      	bne.n	8004486 <HAL_SPI_Receive_IT+0xe6>
  if ((pData == NULL) || (Size == 0U))
 80043da:	2d00      	cmp	r5, #0
 80043dc:	d04b      	beq.n	8004476 <HAL_SPI_Receive_IT+0xd6>
 80043de:	2a00      	cmp	r2, #0
 80043e0:	d049      	beq.n	8004476 <HAL_SPI_Receive_IT+0xd6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043e2:	2304      	movs	r3, #4
 80043e4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043ec:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80043ee:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 80043f2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80043f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80043f6:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043f8:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043fa:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 80043fc:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004400:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004402:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004404:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004408:	bf8b      	itete	hi
 800440a:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800440e:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004412:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004414:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004416:	bf8c      	ite	hi
 8004418:	4a1e      	ldrhi	r2, [pc, #120]	; (8004494 <HAL_SPI_Receive_IT+0xf4>)
    hspi->RxISR = SPI_RxISR_8BIT;
 800441a:	4a1f      	ldrls	r2, [pc, #124]	; (8004498 <HAL_SPI_Receive_IT+0xf8>)
 800441c:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800441e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8004422:	d107      	bne.n	8004434 <HAL_SPI_Receive_IT+0x94>
    __HAL_SPI_DISABLE(hspi);
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004432:	601a      	str	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004434:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004436:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800443a:	d121      	bne.n	8004480 <HAL_SPI_Receive_IT+0xe0>
    hspi->CRCSize = 1U;
 800443c:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800443e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8004442:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8004444:	d803      	bhi.n	800444e <HAL_SPI_Receive_IT+0xae>
 8004446:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004448:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 800444a:	bf08      	it	eq
 800444c:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800445c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004464:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800446c:	d10d      	bne.n	800448a <HAL_SPI_Receive_IT+0xea>
    __HAL_SPI_ENABLE(hspi);
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004474:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8004476:	2300      	movs	r3, #0
 8004478:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800447c:	bc70      	pop	{r4, r5, r6}
 800447e:	4770      	bx	lr
    hspi->CRCSize = 0U;
 8004480:	2200      	movs	r2, #0
 8004482:	64a2      	str	r2, [r4, #72]	; 0x48
 8004484:	e7eb      	b.n	800445e <HAL_SPI_Receive_IT+0xbe>
    errorcode = HAL_BUSY;
 8004486:	2002      	movs	r0, #2
 8004488:	e7f5      	b.n	8004476 <HAL_SPI_Receive_IT+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800448a:	2000      	movs	r0, #0
 800448c:	e7f3      	b.n	8004476 <HAL_SPI_Receive_IT+0xd6>
  __HAL_LOCK(hspi);
 800448e:	2002      	movs	r0, #2
 8004490:	e7f4      	b.n	800447c <HAL_SPI_Receive_IT+0xdc>
 8004492:	bf00      	nop
 8004494:	08004631 	.word	0x08004631
 8004498:	080045b1 	.word	0x080045b1

0800449c <HAL_SPI_TxRxCpltCallback>:
 800449c:	4770      	bx	lr

0800449e <HAL_SPI_ErrorCallback>:
 800449e:	4770      	bx	lr

080044a0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80044a0:	b513      	push	{r0, r1, r4, lr}
 80044a2:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044a4:	f7fe f8fe 	bl	80026a4 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80044a8:	6821      	ldr	r1, [r4, #0]
 80044aa:	684b      	ldr	r3, [r1, #4]
 80044ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tickstart = HAL_GetTick();
 80044b0:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80044b2:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80044b4:	4620      	mov	r0, r4
 80044b6:	2164      	movs	r1, #100	; 0x64
 80044b8:	f7ff fae9 	bl	8003a8e <SPI_EndRxTxTransaction>
 80044bc:	b118      	cbz	r0, 80044c6 <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80044c0:	f043 0320 	orr.w	r3, r3, #32
 80044c4:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044c6:	68a3      	ldr	r3, [r4, #8]
 80044c8:	b933      	cbnz	r3, 80044d8 <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	9201      	str	r2, [sp, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80044d8:	2301      	movs	r3, #1
 80044da:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044de:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80044e0:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044e2:	b11b      	cbz	r3, 80044ec <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 80044e4:	f7ff ffdb 	bl	800449e <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80044e8:	b002      	add	sp, #8
 80044ea:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 80044ec:	f7fd fd50 	bl	8001f90 <HAL_SPI_TxCpltCallback>
}
 80044f0:	e7fa      	b.n	80044e8 <SPI_CloseTx_ISR+0x48>

080044f2 <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044f2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80044f4:	6803      	ldr	r3, [r0, #0]
 80044f6:	7812      	ldrb	r2, [r2, #0]
 80044f8:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 80044fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80044fc:	3301      	adds	r3, #1
 80044fe:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8004500:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004502:	3b01      	subs	r3, #1
 8004504:	b29b      	uxth	r3, r3
 8004506:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8004508:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800450a:	b29b      	uxth	r3, r3
 800450c:	b953      	cbnz	r3, 8004524 <SPI_TxISR_8BIT+0x32>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800450e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004514:	bf01      	itttt	eq
 8004516:	6802      	ldreq	r2, [r0, #0]
 8004518:	6813      	ldreq	r3, [r2, #0]
 800451a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800451e:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 8004520:	f7ff bfbe 	b.w	80044a0 <SPI_CloseTx_ISR>
}
 8004524:	4770      	bx	lr

08004526 <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004526:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004528:	6802      	ldr	r2, [r0, #0]
 800452a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800452e:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004530:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8004532:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004534:	3b01      	subs	r3, #1
 8004536:	b29b      	uxth	r3, r3
 8004538:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800453a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800453c:	b29b      	uxth	r3, r3
 800453e:	b94b      	cbnz	r3, 8004554 <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004540:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004546:	bf02      	ittt	eq
 8004548:	6813      	ldreq	r3, [r2, #0]
 800454a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800454e:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 8004550:	f7ff bfa6 	b.w	80044a0 <SPI_CloseTx_ISR>
}
 8004554:	4770      	bx	lr

08004556 <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004556:	6802      	ldr	r2, [r0, #0]
 8004558:	6853      	ldr	r3, [r2, #4]
 800455a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 800455e:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004560:	6053      	str	r3, [r2, #4]
{
 8004562:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8004564:	f7fe f89e 	bl	80026a4 <HAL_GetTick>
 8004568:	2164      	movs	r1, #100	; 0x64
 800456a:	4602      	mov	r2, r0
 800456c:	4620      	mov	r0, r4
 800456e:	f7ff fa53 	bl	8003a18 <SPI_EndRxTransaction>
 8004572:	b118      	cbz	r0, 800457c <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004574:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004576:	f043 0320 	orr.w	r3, r3, #32
 800457a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800457c:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800457e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 8004580:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8004584:	6893      	ldr	r3, [r2, #8]
 8004586:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800458a:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800458c:	d009      	beq.n	80045a2 <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800458e:	f043 0302 	orr.w	r3, r3, #2
 8004592:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004594:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004598:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 800459a:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 800459c:	f7ff ff7f 	bl	800449e <HAL_SPI_ErrorCallback>
}
 80045a0:	e004      	b.n	80045ac <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 80045a2:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1f9      	bne.n	800459c <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 80045a8:	f7fd fcea 	bl	8001f80 <HAL_SPI_RxCpltCallback>
}
 80045ac:	bd10      	pop	{r4, pc}
	...

080045b0 <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80045b0:	6802      	ldr	r2, [r0, #0]
 80045b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80045b4:	7b12      	ldrb	r2, [r2, #12]
 80045b6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80045b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80045ba:	3301      	adds	r3, #1
 80045bc:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 80045be:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80045ca:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d108      	bne.n	80045e6 <SPI_RxISR_8BIT+0x36>
 80045d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80045d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80045da:	bf01      	itttt	eq
 80045dc:	6802      	ldreq	r2, [r0, #0]
 80045de:	6813      	ldreq	r3, [r2, #0]
 80045e0:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80045e4:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 80045e6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	b943      	cbnz	r3, 8004600 <SPI_RxISR_8BIT+0x50>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80045f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f4:	d102      	bne.n	80045fc <SPI_RxISR_8BIT+0x4c>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 80045f6:	4b03      	ldr	r3, [pc, #12]	; (8004604 <SPI_RxISR_8BIT+0x54>)
 80045f8:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 80045fa:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 80045fc:	f7ff bfab 	b.w	8004556 <SPI_CloseRx_ISR>
}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	08004609 	.word	0x08004609

08004608 <SPI_RxISR_8BITCRC>:
{
 8004608:	b082      	sub	sp, #8
  __IO uint8_t  tmpreg8 = 0;
 800460a:	2200      	movs	r2, #0
 800460c:	f88d 2007 	strb.w	r2, [sp, #7]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004610:	6802      	ldr	r2, [r0, #0]
  tmpreg8 = *ptmpreg8;
 8004612:	7b12      	ldrb	r2, [r2, #12]
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg8);
 800461a:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 800461e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004620:	3a01      	subs	r2, #1
 8004622:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8004624:	b912      	cbnz	r2, 800462c <SPI_RxISR_8BITCRC+0x24>
}
 8004626:	b002      	add	sp, #8
    SPI_CloseRx_ISR(hspi);
 8004628:	f7ff bf95 	b.w	8004556 <SPI_CloseRx_ISR>
}
 800462c:	b002      	add	sp, #8
 800462e:	4770      	bx	lr

08004630 <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004630:	6802      	ldr	r2, [r0, #0]
 8004632:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004634:	68d1      	ldr	r1, [r2, #12]
 8004636:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800463a:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800463c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004640:	3b01      	subs	r3, #1
 8004642:	b29b      	uxth	r3, r3
 8004644:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8004648:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d107      	bne.n	8004662 <SPI_RxISR_16BIT+0x32>
 8004652:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004658:	bf02      	ittt	eq
 800465a:	6813      	ldreq	r3, [r2, #0]
 800465c:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8004660:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 8004662:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004666:	b29b      	uxth	r3, r3
 8004668:	b943      	cbnz	r3, 800467c <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800466a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800466c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004670:	d102      	bne.n	8004678 <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8004672:	4b03      	ldr	r3, [pc, #12]	; (8004680 <SPI_RxISR_16BIT+0x50>)
 8004674:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8004676:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 8004678:	f7ff bf6d 	b.w	8004556 <SPI_CloseRx_ISR>
}
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	08004685 	.word	0x08004685

08004684 <SPI_RxISR_16BITCRC>:
{
 8004684:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 800468a:	6803      	ldr	r3, [r0, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 8004690:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004698:	605a      	str	r2, [r3, #4]
}
 800469a:	b002      	add	sp, #8
  SPI_CloseRx_ISR(hspi);
 800469c:	f7ff bf5b 	b.w	8004556 <SPI_CloseRx_ISR>

080046a0 <SPI_CloseRxTx_ISR>:
{
 80046a0:	b510      	push	{r4, lr}
 80046a2:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80046a4:	f7fd fffe 	bl	80026a4 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80046a8:	6821      	ldr	r1, [r4, #0]
 80046aa:	684b      	ldr	r3, [r1, #4]
 80046ac:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 80046b0:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80046b2:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80046b4:	4620      	mov	r0, r4
 80046b6:	2164      	movs	r1, #100	; 0x64
 80046b8:	f7ff f9e9 	bl	8003a8e <SPI_EndRxTxTransaction>
 80046bc:	b118      	cbz	r0, 80046c6 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80046c0:	f043 0320 	orr.w	r3, r3, #32
 80046c4:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80046c6:	6822      	ldr	r2, [r4, #0]
 80046c8:	6893      	ldr	r3, [r2, #8]
 80046ca:	f013 0f10 	tst.w	r3, #16
 80046ce:	f04f 0301 	mov.w	r3, #1
 80046d2:	d00c      	beq.n	80046ee <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 80046d4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80046d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80046da:	f043 0302 	orr.w	r3, r3, #2
 80046de:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80046e0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80046e4:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 80046e6:	4620      	mov	r0, r4
 80046e8:	f7ff fed9 	bl	800449e <HAL_SPI_ErrorCallback>
}
 80046ec:	e00a      	b.n	8004704 <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80046ee:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80046f0:	b962      	cbnz	r2, 800470c <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80046f2:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 80046f6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80046fa:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 80046fc:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80046fe:	d102      	bne.n	8004706 <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 8004700:	f7fd fc3e 	bl	8001f80 <HAL_SPI_RxCpltCallback>
}
 8004704:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 8004706:	f7ff fec9 	bl	800449c <HAL_SPI_TxRxCpltCallback>
 800470a:	e7fb      	b.n	8004704 <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 800470c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8004710:	e7e9      	b.n	80046e6 <SPI_CloseRxTx_ISR+0x46>

08004712 <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 8004712:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004714:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004716:	6801      	ldr	r1, [r0, #0]
  if (hspi->TxXferCount >= 2U)
 8004718:	b292      	uxth	r2, r2
 800471a:	2a01      	cmp	r2, #1
 800471c:	d918      	bls.n	8004750 <SPI_2linesTxISR_8BIT+0x3e>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800471e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004722:	60ca      	str	r2, [r1, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004724:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004726:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004728:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 800472a:	b29b      	uxth	r3, r3
 800472c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800472e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004730:	b29b      	uxth	r3, r3
 8004732:	b9fb      	cbnz	r3, 8004774 <SPI_2linesTxISR_8BIT+0x62>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004734:	6a82      	ldr	r2, [r0, #40]	; 0x28
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004736:	6803      	ldr	r3, [r0, #0]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004738:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800473c:	d110      	bne.n	8004760 <SPI_2linesTxISR_8BIT+0x4e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004744:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800474c:	605a      	str	r2, [r3, #4]
      return;
 800474e:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	730b      	strb	r3, [r1, #12]
    hspi->pTxBuffPtr++;
 8004754:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004756:	3301      	adds	r3, #1
 8004758:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 800475a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800475c:	3b01      	subs	r3, #1
 800475e:	e7e4      	b.n	800472a <SPI_2linesTxISR_8BIT+0x18>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004766:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 8004768:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800476c:	b29b      	uxth	r3, r3
 800476e:	b90b      	cbnz	r3, 8004774 <SPI_2linesTxISR_8BIT+0x62>
      SPI_CloseRxTx_ISR(hspi);
 8004770:	f7ff bf96 	b.w	80046a0 <SPI_CloseRxTx_ISR>
}
 8004774:	4770      	bx	lr
	...

08004778 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 8004778:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800477c:	6802      	ldr	r2, [r0, #0]
 800477e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  if (hspi->RxXferCount > 1U)
 8004780:	b289      	uxth	r1, r1
 8004782:	2901      	cmp	r1, #1
 8004784:	d922      	bls.n	80047cc <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004786:	68d1      	ldr	r1, [r2, #12]
 8004788:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800478c:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800478e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004792:	3b02      	subs	r3, #2
 8004794:	b29b      	uxth	r3, r3
 8004796:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800479a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d103      	bne.n	80047ac <SPI_2linesRxISR_8BIT+0x34>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047a4:	6853      	ldr	r3, [r2, #4]
 80047a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047aa:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 80047ac:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	b9fb      	cbnz	r3, 80047f4 <SPI_2linesRxISR_8BIT+0x7c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047b6:	6803      	ldr	r3, [r0, #0]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047b8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047bc:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047be:	d111      	bne.n	80047e4 <SPI_2linesRxISR_8BIT+0x6c>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047c4:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 80047c6:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <SPI_2linesRxISR_8BIT+0x80>)
 80047c8:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 80047ca:	4770      	bx	lr
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80047cc:	7b12      	ldrb	r2, [r2, #12]
 80047ce:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80047d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80047d2:	3301      	adds	r3, #1
 80047d4:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 80047d6:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 80047e2:	e7e3      	b.n	80047ac <SPI_2linesRxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80047e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047e8:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 80047ea:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	b90b      	cbnz	r3, 80047f4 <SPI_2linesRxISR_8BIT+0x7c>
      SPI_CloseRxTx_ISR(hspi);
 80047f0:	f7ff bf56 	b.w	80046a0 <SPI_CloseRxTx_ISR>
}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	080047fd 	.word	0x080047fd

080047fc <SPI_2linesRxISR_8BITCRC>:
{
 80047fc:	b082      	sub	sp, #8
  __IO uint8_t  tmpreg8 = 0;
 80047fe:	2200      	movs	r2, #0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004800:	6801      	ldr	r1, [r0, #0]
  __IO uint8_t  tmpreg8 = 0;
 8004802:	f88d 2007 	strb.w	r2, [sp, #7]
  tmpreg8 = *ptmpreg8;
 8004806:	7b0a      	ldrb	r2, [r1, #12]
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg8);
 800480e:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 8004812:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004814:	3a01      	subs	r2, #1
 8004816:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8004818:	b94a      	cbnz	r2, 800482e <SPI_2linesRxISR_8BITCRC+0x32>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800481a:	684a      	ldr	r2, [r1, #4]
 800481c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004820:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8004822:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004824:	b29b      	uxth	r3, r3
 8004826:	b913      	cbnz	r3, 800482e <SPI_2linesRxISR_8BITCRC+0x32>
}
 8004828:	b002      	add	sp, #8
      SPI_CloseRxTx_ISR(hspi);
 800482a:	f7ff bf39 	b.w	80046a0 <SPI_CloseRxTx_ISR>
}
 800482e:	b002      	add	sp, #8
 8004830:	4770      	bx	lr

08004832 <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004832:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004834:	6802      	ldr	r2, [r0, #0]
{
 8004836:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004838:	f831 4b02 	ldrh.w	r4, [r1], #2
 800483c:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800483e:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8004840:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8004842:	3901      	subs	r1, #1
 8004844:	b289      	uxth	r1, r1
 8004846:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8004848:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800484a:	b289      	uxth	r1, r1
 800484c:	b959      	cbnz	r1, 8004866 <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800484e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004850:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004854:	d10a      	bne.n	800486c <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004856:	6813      	ldr	r3, [r2, #0]
 8004858:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800485c:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800485e:	6853      	ldr	r3, [r2, #4]
 8004860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004864:	6053      	str	r3, [r2, #4]
}
 8004866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800486a:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800486c:	6851      	ldr	r1, [r2, #4]
 800486e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004872:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8004874:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f3      	bne.n	8004866 <SPI_2linesTxISR_16BIT+0x34>
}
 800487e:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 8004882:	f7ff bf0d 	b.w	80046a0 <SPI_CloseRxTx_ISR>
	...

08004888 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004888:	6801      	ldr	r1, [r0, #0]
 800488a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800488c:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800488e:	68cc      	ldr	r4, [r1, #12]
 8004890:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004894:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8004896:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 800489a:	3a01      	subs	r2, #1
 800489c:	b292      	uxth	r2, r2
 800489e:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 80048a2:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 80048a6:	b292      	uxth	r2, r2
 80048a8:	b92a      	cbnz	r2, 80048b6 <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048aa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80048ac:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80048b0:	d104      	bne.n	80048bc <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 80048b2:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <SPI_2linesRxISR_16BIT+0x4c>)
 80048b4:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 80048b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048ba:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80048bc:	684a      	ldr	r2, [r1, #4]
 80048be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c2:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 80048c4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f4      	bne.n	80048b6 <SPI_2linesRxISR_16BIT+0x2e>
}
 80048cc:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 80048d0:	f7ff bee6 	b.w	80046a0 <SPI_CloseRxTx_ISR>
 80048d4:	080048d9 	.word	0x080048d9

080048d8 <SPI_2linesRxISR_16BITCRC>:
{
 80048d8:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 80048de:	6803      	ldr	r3, [r0, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 80048e4:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ec:	605a      	str	r2, [r3, #4]
}
 80048ee:	b002      	add	sp, #8
  SPI_CloseRxTx_ISR(hspi);
 80048f0:	f7ff bed6 	b.w	80046a0 <SPI_CloseRxTx_ISR>

080048f4 <HAL_SPI_IRQHandler>:
{
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80048f6:	6803      	ldr	r3, [r0, #0]
 80048f8:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80048fa:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048fc:	0656      	lsls	r6, r2, #25
{
 80048fe:	b085      	sub	sp, #20
 8004900:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004902:	ea4f 1192 	mov.w	r1, r2, lsr #6
 8004906:	f3c2 1780 	ubfx	r7, r2, #6, #1
 800490a:	d408      	bmi.n	800491e <HAL_SPI_IRQHandler+0x2a>
 800490c:	07d6      	lsls	r6, r2, #31
 800490e:	d506      	bpl.n	800491e <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004910:	066e      	lsls	r6, r5, #25
 8004912:	d504      	bpl.n	800491e <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8004914:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 8004916:	b005      	add	sp, #20
 8004918:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 800491c:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800491e:	0796      	lsls	r6, r2, #30
 8004920:	d504      	bpl.n	800492c <HAL_SPI_IRQHandler+0x38>
 8004922:	0628      	lsls	r0, r5, #24
 8004924:	d502      	bpl.n	800492c <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8004926:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004928:	4620      	mov	r0, r4
 800492a:	e7f4      	b.n	8004916 <HAL_SPI_IRQHandler+0x22>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800492c:	ea41 1152 	orr.w	r1, r1, r2, lsr #5
 8004930:	f3c2 2000 	ubfx	r0, r2, #8, #1
 8004934:	f001 0101 	and.w	r1, r1, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004938:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800493a:	ea51 0200 	orrs.w	r2, r1, r0
 800493e:	d057      	beq.n	80049f0 <HAL_SPI_IRQHandler+0xfc>
 8004940:	06aa      	lsls	r2, r5, #26
 8004942:	d555      	bpl.n	80049f0 <HAL_SPI_IRQHandler+0xfc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004944:	b17f      	cbz	r7, 8004966 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004946:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 800494a:	2a03      	cmp	r2, #3
 800494c:	f04f 0100 	mov.w	r1, #0
 8004950:	d048      	beq.n	80049e4 <HAL_SPI_IRQHandler+0xf0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004952:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004954:	f042 0204 	orr.w	r2, r2, #4
 8004958:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800495a:	9100      	str	r1, [sp, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	9200      	str	r2, [sp, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	9200      	str	r2, [sp, #0]
 8004964:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004966:	07f1      	lsls	r1, r6, #31
 8004968:	d50c      	bpl.n	8004984 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800496a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004972:	2200      	movs	r2, #0
 8004974:	9202      	str	r2, [sp, #8]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	9202      	str	r2, [sp, #8]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004980:	601a      	str	r2, [r3, #0]
 8004982:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004984:	b140      	cbz	r0, 8004998 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004986:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004988:	f042 0208 	orr.w	r2, r2, #8
 800498c:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800498e:	2200      	movs	r2, #0
 8004990:	9203      	str	r2, [sp, #12]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	9203      	str	r2, [sp, #12]
 8004996:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004998:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800499a:	b34a      	cbz	r2, 80049f0 <HAL_SPI_IRQHandler+0xfc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049a2:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80049a4:	2201      	movs	r2, #1
 80049a6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80049aa:	07aa      	lsls	r2, r5, #30
 80049ac:	d022      	beq.n	80049f4 <HAL_SPI_IRQHandler+0x100>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80049ae:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80049b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80049b2:	f022 0203 	bic.w	r2, r2, #3
 80049b6:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80049b8:	b140      	cbz	r0, 80049cc <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80049ba:	4b10      	ldr	r3, [pc, #64]	; (80049fc <HAL_SPI_IRQHandler+0x108>)
 80049bc:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80049be:	f7fd fef1 	bl	80027a4 <HAL_DMA_Abort_IT>
 80049c2:	b118      	cbz	r0, 80049cc <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80049c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ca:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80049cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049ce:	b178      	cbz	r0, 80049f0 <HAL_SPI_IRQHandler+0xfc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <HAL_SPI_IRQHandler+0x108>)
 80049d2:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80049d4:	f7fd fee6 	bl	80027a4 <HAL_DMA_Abort_IT>
 80049d8:	b150      	cbz	r0, 80049f0 <HAL_SPI_IRQHandler+0xfc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80049da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80049dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e0:	6623      	str	r3, [r4, #96]	; 0x60
 80049e2:	e005      	b.n	80049f0 <HAL_SPI_IRQHandler+0xfc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049e4:	9101      	str	r1, [sp, #4]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	9201      	str	r2, [sp, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	9301      	str	r3, [sp, #4]
 80049ee:	9b01      	ldr	r3, [sp, #4]
}
 80049f0:	b005      	add	sp, #20
 80049f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 80049f4:	4620      	mov	r0, r4
 80049f6:	f7ff fd52 	bl	800449e <HAL_SPI_ErrorCallback>
 80049fa:	e7f9      	b.n	80049f0 <HAL_SPI_IRQHandler+0xfc>
 80049fc:	08004a01 	.word	0x08004a01

08004a00 <SPI_DMAAbortOnError>:
{
 8004a00:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a02:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004a0a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8004a0c:	f7ff fd47 	bl	800449e <HAL_SPI_ErrorCallback>
}
 8004a10:	bd08      	pop	{r3, pc}

08004a12 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004a12:	4770      	bx	lr

08004a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a14:	b570      	push	{r4, r5, r6, lr}
 8004a16:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a18:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a1a:	6921      	ldr	r1, [r4, #16]
 8004a1c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a1e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a20:	69c0      	ldr	r0, [r0, #28]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	6961      	ldr	r1, [r4, #20]
 8004a26:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a28:	4992      	ldr	r1, [pc, #584]	; (8004c74 <UART_SetConfig+0x260>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a2a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a2c:	4029      	ands	r1, r5
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	68e1      	ldr	r1, [r4, #12]
 8004a36:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a3e:	4a8e      	ldr	r2, [pc, #568]	; (8004c78 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a40:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a42:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a44:	bf1c      	itt	ne
 8004a46:	6a22      	ldrne	r2, [r4, #32]
 8004a48:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8004a50:	430a      	orrs	r2, r1
 8004a52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a54:	4a89      	ldr	r2, [pc, #548]	; (8004c7c <UART_SetConfig+0x268>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d11b      	bne.n	8004a92 <UART_SetConfig+0x7e>
 8004a5a:	4b89      	ldr	r3, [pc, #548]	; (8004c80 <UART_SetConfig+0x26c>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	f200 80d5 	bhi.w	8004c16 <UART_SetConfig+0x202>
 8004a6c:	4a85      	ldr	r2, [pc, #532]	; (8004c84 <UART_SetConfig+0x270>)
 8004a6e:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a70:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004a74:	f040 809f 	bne.w	8004bb6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d828      	bhi.n	8004ace <UART_SetConfig+0xba>
 8004a7c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004a80:	00ce00df 	.word	0x00ce00df
 8004a84:	00270099 	.word	0x00270099
 8004a88:	002700d4 	.word	0x002700d4
 8004a8c:	00270027 	.word	0x00270027
 8004a90:	00e3      	.short	0x00e3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a92:	4a7d      	ldr	r2, [pc, #500]	; (8004c88 <UART_SetConfig+0x274>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d108      	bne.n	8004aaa <UART_SetConfig+0x96>
 8004a98:	4b79      	ldr	r3, [pc, #484]	; (8004c80 <UART_SetConfig+0x26c>)
 8004a9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a9e:	4b79      	ldr	r3, [pc, #484]	; (8004c84 <UART_SetConfig+0x270>)
 8004aa0:	f002 020c 	and.w	r2, r2, #12
 8004aa4:	4413      	add	r3, r2
 8004aa6:	78db      	ldrb	r3, [r3, #3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aa8:	e7e2      	b.n	8004a70 <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aaa:	4a78      	ldr	r2, [pc, #480]	; (8004c8c <UART_SetConfig+0x278>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d119      	bne.n	8004ae4 <UART_SetConfig+0xd0>
 8004ab0:	4b73      	ldr	r3, [pc, #460]	; (8004c80 <UART_SetConfig+0x26c>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	f000 80b7 	beq.w	8004c2e <UART_SetConfig+0x21a>
 8004ac0:	d807      	bhi.n	8004ad2 <UART_SetConfig+0xbe>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 80b8 	beq.w	8004c38 <UART_SetConfig+0x224>
 8004ac8:	2b10      	cmp	r3, #16
 8004aca:	f000 80aa 	beq.w	8004c22 <UART_SetConfig+0x20e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ace:	2001      	movs	r0, #1
 8004ad0:	e04e      	b.n	8004b70 <UART_SetConfig+0x15c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ad2:	2b30      	cmp	r3, #48	; 0x30
 8004ad4:	d1fb      	bne.n	8004ace <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ad6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004ada:	f000 80b4 	beq.w	8004c46 <UART_SetConfig+0x232>
 8004ade:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004ae2:	e083      	b.n	8004bec <UART_SetConfig+0x1d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ae4:	4a6a      	ldr	r2, [pc, #424]	; (8004c90 <UART_SetConfig+0x27c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d10f      	bne.n	8004b0a <UART_SetConfig+0xf6>
 8004aea:	4b65      	ldr	r3, [pc, #404]	; (8004c80 <UART_SetConfig+0x26c>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004af4:	2b80      	cmp	r3, #128	; 0x80
 8004af6:	f000 809a 	beq.w	8004c2e <UART_SetConfig+0x21a>
 8004afa:	d804      	bhi.n	8004b06 <UART_SetConfig+0xf2>
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 809b 	beq.w	8004c38 <UART_SetConfig+0x224>
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	e7e1      	b.n	8004aca <UART_SetConfig+0xb6>
 8004b06:	2bc0      	cmp	r3, #192	; 0xc0
 8004b08:	e7e4      	b.n	8004ad4 <UART_SetConfig+0xc0>
 8004b0a:	4a62      	ldr	r2, [pc, #392]	; (8004c94 <UART_SetConfig+0x280>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d112      	bne.n	8004b36 <UART_SetConfig+0x122>
 8004b10:	4b5b      	ldr	r3, [pc, #364]	; (8004c80 <UART_SetConfig+0x26c>)
 8004b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b1e:	f000 8086 	beq.w	8004c2e <UART_SetConfig+0x21a>
 8004b22:	d805      	bhi.n	8004b30 <UART_SetConfig+0x11c>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 8087 	beq.w	8004c38 <UART_SetConfig+0x224>
 8004b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2e:	e7cc      	b.n	8004aca <UART_SetConfig+0xb6>
 8004b30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b34:	e7ce      	b.n	8004ad4 <UART_SetConfig+0xc0>
 8004b36:	4a50      	ldr	r2, [pc, #320]	; (8004c78 <UART_SetConfig+0x264>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d1c8      	bne.n	8004ace <UART_SetConfig+0xba>
 8004b3c:	4b50      	ldr	r3, [pc, #320]	; (8004c80 <UART_SetConfig+0x26c>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b4a:	d015      	beq.n	8004b78 <UART_SetConfig+0x164>
 8004b4c:	d806      	bhi.n	8004b5c <UART_SetConfig+0x148>
 8004b4e:	b15b      	cbz	r3, 8004b68 <UART_SetConfig+0x154>
 8004b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b54:	d1bb      	bne.n	8004ace <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 8004b56:	f7fe fafb 	bl	8003150 <HAL_RCC_GetSysClockFreq>
        break;
 8004b5a:	e007      	b.n	8004b6c <UART_SetConfig+0x158>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b60:	d1b5      	bne.n	8004ace <UART_SetConfig+0xba>
        pclk = (uint32_t) LSE_VALUE;
 8004b62:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004b66:	e008      	b.n	8004b7a <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b68:	f7fe fe6a 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004b6c:	b928      	cbnz	r0, 8004b7a <UART_SetConfig+0x166>
 8004b6e:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b70:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8004b72:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8004b76:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8004b78:	4847      	ldr	r0, [pc, #284]	; (8004c98 <UART_SetConfig+0x284>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b7a:	6862      	ldr	r2, [r4, #4]
 8004b7c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004b80:	4283      	cmp	r3, r0
 8004b82:	d8a4      	bhi.n	8004ace <UART_SetConfig+0xba>
 8004b84:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8004b88:	d8a1      	bhi.n	8004ace <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b8a:	0851      	lsrs	r1, r2, #1
 8004b8c:	2500      	movs	r5, #0
 8004b8e:	468c      	mov	ip, r1
 8004b90:	f44f 7680 	mov.w	r6, #256	; 0x100
 8004b94:	4629      	mov	r1, r5
 8004b96:	fbe0 c106 	umlal	ip, r1, r0, r6
 8004b9a:	462b      	mov	r3, r5
 8004b9c:	4660      	mov	r0, ip
 8004b9e:	f7fc f803 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ba2:	4b3e      	ldr	r3, [pc, #248]	; (8004c9c <UART_SetConfig+0x288>)
 8004ba4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d890      	bhi.n	8004ace <UART_SetConfig+0xba>
          huart->Instance->BRR = usartdiv;
 8004bac:	6823      	ldr	r3, [r4, #0]
 8004bae:	60d8      	str	r0, [r3, #12]
 8004bb0:	e7dd      	b.n	8004b6e <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 8004bb2:	4839      	ldr	r0, [pc, #228]	; (8004c98 <UART_SetConfig+0x284>)
 8004bb4:	e047      	b.n	8004c46 <UART_SetConfig+0x232>
    switch (clocksource)
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d889      	bhi.n	8004ace <UART_SetConfig+0xba>
 8004bba:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <UART_SetConfig+0x1ac>)
 8004bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc0:	08004be5 	.word	0x08004be5
 8004bc4:	08004c0b 	.word	0x08004c0b
 8004bc8:	08004c35 	.word	0x08004c35
 8004bcc:	08004acf 	.word	0x08004acf
 8004bd0:	08004c11 	.word	0x08004c11
 8004bd4:	08004acf 	.word	0x08004acf
 8004bd8:	08004acf 	.word	0x08004acf
 8004bdc:	08004acf 	.word	0x08004acf
 8004be0:	08004adf 	.word	0x08004adf
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be4:	f7fe fe2c 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d0c0      	beq.n	8004b6e <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bec:	6862      	ldr	r2, [r4, #4]
 8004bee:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8004bf2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bf6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004bfa:	f1a3 0110 	sub.w	r1, r3, #16
 8004bfe:	4291      	cmp	r1, r2
 8004c00:	f63f af65 	bhi.w	8004ace <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c04:	6822      	ldr	r2, [r4, #0]
 8004c06:	60d3      	str	r3, [r2, #12]
 8004c08:	e7b1      	b.n	8004b6e <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c0a:	f7fe fe2b 	bl	8003864 <HAL_RCC_GetPCLK2Freq>
        break;
 8004c0e:	e7eb      	b.n	8004be8 <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 8004c10:	f7fe fa9e 	bl	8003150 <HAL_RCC_GetSysClockFreq>
        break;
 8004c14:	e7e8      	b.n	8004be8 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c16:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004c1a:	d1f6      	bne.n	8004c0a <UART_SetConfig+0x1f6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c1c:	f7fe fe22 	bl	8003864 <HAL_RCC_GetPCLK2Freq>
        break;
 8004c20:	e00f      	b.n	8004c42 <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c22:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004c26:	d1f3      	bne.n	8004c10 <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetSysClockFreq();
 8004c28:	f7fe fa92 	bl	8003150 <HAL_RCC_GetSysClockFreq>
        break;
 8004c2c:	e009      	b.n	8004c42 <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c2e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004c32:	d0be      	beq.n	8004bb2 <UART_SetConfig+0x19e>
        pclk = (uint32_t) HSI_VALUE;
 8004c34:	4818      	ldr	r0, [pc, #96]	; (8004c98 <UART_SetConfig+0x284>)
 8004c36:	e7d9      	b.n	8004bec <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c38:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004c3c:	d1d2      	bne.n	8004be4 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c3e:	f7fe fdff 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d093      	beq.n	8004b6e <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c46:	6862      	ldr	r2, [r4, #4]
 8004c48:	0853      	lsrs	r3, r2, #1
 8004c4a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c4e:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c52:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c56:	f1a0 0210 	sub.w	r2, r0, #16
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	f63f af37 	bhi.w	8004ace <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c60:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8004c64:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c66:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c68:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8004c6c:	4318      	orrs	r0, r3
 8004c6e:	60d0      	str	r0, [r2, #12]
 8004c70:	e77d      	b.n	8004b6e <UART_SetConfig+0x15a>
 8004c72:	bf00      	nop
 8004c74:	efff69f3 	.word	0xefff69f3
 8004c78:	40008000 	.word	0x40008000
 8004c7c:	40013800 	.word	0x40013800
 8004c80:	40021000 	.word	0x40021000
 8004c84:	08008198 	.word	0x08008198
 8004c88:	40004400 	.word	0x40004400
 8004c8c:	40004800 	.word	0x40004800
 8004c90:	40004c00 	.word	0x40004c00
 8004c94:	40005000 	.word	0x40005000
 8004c98:	00f42400 	.word	0x00f42400
 8004c9c:	000ffcff 	.word	0x000ffcff

08004ca0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ca0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ca2:	07da      	lsls	r2, r3, #31
{
 8004ca4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ca6:	d506      	bpl.n	8004cb6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca8:	6801      	ldr	r1, [r0, #0]
 8004caa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004cac:	684a      	ldr	r2, [r1, #4]
 8004cae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004cb2:	4322      	orrs	r2, r4
 8004cb4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cb6:	079c      	lsls	r4, r3, #30
 8004cb8:	d506      	bpl.n	8004cc8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cba:	6801      	ldr	r1, [r0, #0]
 8004cbc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004cbe:	684a      	ldr	r2, [r1, #4]
 8004cc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004cc4:	4322      	orrs	r2, r4
 8004cc6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc8:	0759      	lsls	r1, r3, #29
 8004cca:	d506      	bpl.n	8004cda <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ccc:	6801      	ldr	r1, [r0, #0]
 8004cce:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004cd0:	684a      	ldr	r2, [r1, #4]
 8004cd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cd6:	4322      	orrs	r2, r4
 8004cd8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cda:	071a      	lsls	r2, r3, #28
 8004cdc:	d506      	bpl.n	8004cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cde:	6801      	ldr	r1, [r0, #0]
 8004ce0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004ce2:	684a      	ldr	r2, [r1, #4]
 8004ce4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ce8:	4322      	orrs	r2, r4
 8004cea:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cec:	06dc      	lsls	r4, r3, #27
 8004cee:	d506      	bpl.n	8004cfe <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cf0:	6801      	ldr	r1, [r0, #0]
 8004cf2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004cf4:	688a      	ldr	r2, [r1, #8]
 8004cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cfa:	4322      	orrs	r2, r4
 8004cfc:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cfe:	0699      	lsls	r1, r3, #26
 8004d00:	d506      	bpl.n	8004d10 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d02:	6801      	ldr	r1, [r0, #0]
 8004d04:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004d06:	688a      	ldr	r2, [r1, #8]
 8004d08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d0c:	4322      	orrs	r2, r4
 8004d0e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d10:	065a      	lsls	r2, r3, #25
 8004d12:	d50f      	bpl.n	8004d34 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d14:	6801      	ldr	r1, [r0, #0]
 8004d16:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004d18:	684a      	ldr	r2, [r1, #4]
 8004d1a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004d1e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d20:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d24:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d26:	d105      	bne.n	8004d34 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d28:	684a      	ldr	r2, [r1, #4]
 8004d2a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004d2c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004d30:	4322      	orrs	r2, r4
 8004d32:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d34:	061b      	lsls	r3, r3, #24
 8004d36:	d506      	bpl.n	8004d46 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d38:	6802      	ldr	r2, [r0, #0]
 8004d3a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004d3c:	6853      	ldr	r3, [r2, #4]
 8004d3e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004d42:	430b      	orrs	r3, r1
 8004d44:	6053      	str	r3, [r2, #4]
  }
}
 8004d46:	bd10      	pop	{r4, pc}

08004d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004d50:	4604      	mov	r4, r0
 8004d52:	460e      	mov	r6, r1
 8004d54:	4615      	mov	r5, r2
 8004d56:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d58:	6822      	ldr	r2, [r4, #0]
 8004d5a:	69d3      	ldr	r3, [r2, #28]
 8004d5c:	ea36 0303 	bics.w	r3, r6, r3
 8004d60:	bf0c      	ite	eq
 8004d62:	2301      	moveq	r3, #1
 8004d64:	2300      	movne	r3, #0
 8004d66:	42ab      	cmp	r3, r5
 8004d68:	d001      	beq.n	8004d6e <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	e025      	b.n	8004dba <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 8004d6e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004d72:	d0f2      	beq.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d74:	f7fd fc96 	bl	80026a4 <HAL_GetTick>
 8004d78:	1bc0      	subs	r0, r0, r7
 8004d7a:	4540      	cmp	r0, r8
 8004d7c:	6820      	ldr	r0, [r4, #0]
 8004d7e:	d802      	bhi.n	8004d86 <UART_WaitOnFlagUntilTimeout+0x3e>
 8004d80:	f1b8 0f00 	cmp.w	r8, #0
 8004d84:	d11b      	bne.n	8004dbe <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	e840 3200 	strex	r2, r3, [r0]
 8004d92:	2a00      	cmp	r2, #0
 8004d94:	d1f7      	bne.n	8004d86 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d96:	f100 0308 	add.w	r3, r0, #8
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	f100 0108 	add.w	r1, r0, #8
 8004da6:	e841 3200 	strex	r2, r3, [r1]
 8004daa:	2a00      	cmp	r2, #0
 8004dac:	d1f3      	bne.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8004dae:	2320      	movs	r3, #32
 8004db0:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004db2:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8004db4:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8004db8:	2003      	movs	r0, #3
}
 8004dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dbe:	6803      	ldr	r3, [r0, #0]
 8004dc0:	075a      	lsls	r2, r3, #29
 8004dc2:	d5c9      	bpl.n	8004d58 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dc4:	69c3      	ldr	r3, [r0, #28]
 8004dc6:	051b      	lsls	r3, r3, #20
 8004dc8:	d5c6      	bpl.n	8004d58 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dce:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	e840 3200 	strex	r2, r3, [r0]
 8004ddc:	2a00      	cmp	r2, #0
 8004dde:	d1f7      	bne.n	8004dd0 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	f100 0308 	add.w	r3, r0, #8
 8004de4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	f100 0108 	add.w	r1, r0, #8
 8004df0:	e841 3200 	strex	r2, r3, [r1]
 8004df4:	2a00      	cmp	r2, #0
 8004df6:	d1f3      	bne.n	8004de0 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8004df8:	2320      	movs	r3, #32
 8004dfa:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004dfc:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dfe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8004e02:	e7d7      	b.n	8004db4 <UART_WaitOnFlagUntilTimeout+0x6c>

08004e04 <HAL_UART_Transmit>:
{
 8004e04:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004e08:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004e0a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004e0c:	2b20      	cmp	r3, #32
{
 8004e0e:	4604      	mov	r4, r0
 8004e10:	460e      	mov	r6, r1
 8004e12:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004e14:	d14e      	bne.n	8004eb4 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8004e16:	2900      	cmp	r1, #0
 8004e18:	d04a      	beq.n	8004eb0 <HAL_UART_Transmit+0xac>
 8004e1a:	2a00      	cmp	r2, #0
 8004e1c:	d048      	beq.n	8004eb0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8004e1e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d046      	beq.n	8004eb4 <HAL_UART_Transmit+0xb0>
 8004e26:	2301      	movs	r3, #1
 8004e28:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e2e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e30:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e34:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8004e36:	f7fd fc35 	bl	80026a4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e3a:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8004e3c:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e40:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8004e44:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8004e46:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e4a:	d103      	bne.n	8004e54 <HAL_UART_Transmit+0x50>
 8004e4c:	6922      	ldr	r2, [r4, #16]
 8004e4e:	b90a      	cbnz	r2, 8004e54 <HAL_UART_Transmit+0x50>
 8004e50:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004e52:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8004e54:	2200      	movs	r2, #0
 8004e56:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8004e5a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e5e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8004e62:	b292      	uxth	r2, r2
 8004e64:	b93a      	cbnz	r2, 8004e76 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e66:	2140      	movs	r1, #64	; 0x40
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f7ff ff6d 	bl	8004d48 <UART_WaitOnFlagUntilTimeout>
 8004e6e:	b950      	cbnz	r0, 8004e86 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8004e70:	2320      	movs	r3, #32
 8004e72:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8004e74:	e008      	b.n	8004e88 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e76:	2200      	movs	r2, #0
 8004e78:	2180      	movs	r1, #128	; 0x80
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	9303      	str	r3, [sp, #12]
 8004e7e:	f7ff ff63 	bl	8004d48 <UART_WaitOnFlagUntilTimeout>
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	b118      	cbz	r0, 8004e8e <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8004e86:	2003      	movs	r0, #3
}
 8004e88:	b004      	add	sp, #16
 8004e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e8e:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8004e90:	b95e      	cbnz	r6, 8004eaa <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e92:	f835 2b02 	ldrh.w	r2, [r5], #2
 8004e96:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e9a:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8004e9c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8004ea0:	3a01      	subs	r2, #1
 8004ea2:	b292      	uxth	r2, r2
 8004ea4:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8004ea8:	e7d7      	b.n	8004e5a <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004eaa:	f816 2b01 	ldrb.w	r2, [r6], #1
 8004eae:	e7f4      	b.n	8004e9a <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8004eb0:	2001      	movs	r0, #1
 8004eb2:	e7e9      	b.n	8004e88 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8004eb4:	2002      	movs	r0, #2
 8004eb6:	e7e7      	b.n	8004e88 <HAL_UART_Transmit+0x84>

08004eb8 <UART_CheckIdleState>:
{
 8004eb8:	b530      	push	{r4, r5, lr}
 8004eba:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebc:	2500      	movs	r5, #0
{
 8004ebe:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec0:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8004ec4:	f7fd fbee 	bl	80026a4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ec8:	6822      	ldr	r2, [r4, #0]
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8004ece:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ed0:	d415      	bmi.n	8004efe <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ed2:	6822      	ldr	r2, [r4, #0]
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	0752      	lsls	r2, r2, #29
 8004ed8:	d509      	bpl.n	8004eee <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004eda:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004ede:	9200      	str	r2, [sp, #0]
 8004ee0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f7ff ff2e 	bl	8004d48 <UART_WaitOnFlagUntilTimeout>
 8004eec:	b9a0      	cbnz	r0, 8004f18 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004eee:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004ef2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004ef4:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004ef8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efa:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8004efc:	e00d      	b.n	8004f1a <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004efe:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004f02:	9200      	str	r2, [sp, #0]
 8004f04:	9003      	str	r0, [sp, #12]
 8004f06:	462a      	mov	r2, r5
 8004f08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f7ff ff1b 	bl	8004d48 <UART_WaitOnFlagUntilTimeout>
 8004f12:	9b03      	ldr	r3, [sp, #12]
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d0dc      	beq.n	8004ed2 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004f18:	2003      	movs	r0, #3
}
 8004f1a:	b005      	add	sp, #20
 8004f1c:	bd30      	pop	{r4, r5, pc}

08004f1e <HAL_UART_Init>:
{
 8004f1e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004f20:	4604      	mov	r4, r0
 8004f22:	b340      	cbz	r0, 8004f76 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004f24:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004f26:	b91b      	cbnz	r3, 8004f30 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8004f28:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8004f2c:	f7ff fd71 	bl	8004a12 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004f30:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004f32:	2324      	movs	r3, #36	; 0x24
 8004f34:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8004f36:	6813      	ldr	r3, [r2, #0]
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f7ff fd68 	bl	8004a14 <UART_SetConfig>
 8004f44:	2801      	cmp	r0, #1
 8004f46:	d016      	beq.n	8004f76 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f4a:	b113      	cbz	r3, 8004f52 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f7ff fea7 	bl	8004ca0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f62:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004f6a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004f6c:	601a      	str	r2, [r3, #0]
}
 8004f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004f72:	f7ff bfa1 	b.w	8004eb8 <UART_CheckIdleState>
}
 8004f76:	2001      	movs	r0, #1
 8004f78:	bd10      	pop	{r4, pc}
	...

08004f7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004f80:	f7fd fb2a 	bl	80025d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004f84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004f86:	e003      	b.n	8004f90 <LoopCopyDataInit>

08004f88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004f88:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004f8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004f8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004f8e:	3104      	adds	r1, #4

08004f90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004f90:	480a      	ldr	r0, [pc, #40]	; (8004fbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004f94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004f96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004f98:	d3f6      	bcc.n	8004f88 <CopyDataInit>
	ldr	r2, =_sbss
 8004f9a:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004f9c:	e002      	b.n	8004fa4 <LoopFillZerobss>

08004f9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004f9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004fa0:	f842 3b04 	str.w	r3, [r2], #4

08004fa4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004fa4:	4b08      	ldr	r3, [pc, #32]	; (8004fc8 <LoopForever+0x16>)
	cmp	r2, r3
 8004fa6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004fa8:	d3f9      	bcc.n	8004f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004faa:	f000 f861 	bl	8005070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004fae:	f7fb ff7d 	bl	8000eac <main>

08004fb2 <LoopForever>:

LoopForever:
    b LoopForever
 8004fb2:	e7fe      	b.n	8004fb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004fb4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004fb8:	08008e50 	.word	0x08008e50
	ldr	r0, =_sdata
 8004fbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004fc0:	20000260 	.word	0x20000260
	ldr	r2, =_sbss
 8004fc4:	20000260 	.word	0x20000260
	ldr	r3, = _ebss
 8004fc8:	20000ee4 	.word	0x20000ee4

08004fcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004fcc:	e7fe      	b.n	8004fcc <ADC1_2_IRQHandler>

08004fce <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004fce:	2001      	movs	r0, #1
 8004fd0:	4770      	bx	lr

08004fd2 <_kill>:

int _kill(int pid, int sig)
{
 8004fd2:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004fd4:	f000 f846 	bl	8005064 <__errno>
 8004fd8:	2316      	movs	r3, #22
 8004fda:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fe0:	bd08      	pop	{r3, pc}

08004fe2 <_exit>:

void _exit (int status)
{
 8004fe2:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004fe4:	f000 f83e 	bl	8005064 <__errno>
 8004fe8:	2316      	movs	r3, #22
 8004fea:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8004fec:	e7fe      	b.n	8004fec <_exit+0xa>

08004fee <_read>:
}

int _read (int file, char *ptr, int len)
{
 8004fee:	b510      	push	{r4, lr}
 8004ff0:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 8004ff2:	f3af 8000 	nop.w
 8004ff6:	7020      	strb	r0, [r4, #0]

	return 1;
}
 8004ff8:	2001      	movs	r0, #1
 8004ffa:	bd10      	pop	{r4, pc}

08004ffc <_write>:

int _write(int file, char *ptr, int len)
{
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	460d      	mov	r5, r1
 8005000:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005002:	460e      	mov	r6, r1
 8005004:	1b73      	subs	r3, r6, r5
 8005006:	429c      	cmp	r4, r3
 8005008:	dc01      	bgt.n	800500e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800500a:	4620      	mov	r0, r4
 800500c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800500e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8005012:	f7fc f8b5 	bl	8001180 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005016:	e7f5      	b.n	8005004 <_write+0x8>

08005018 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005018:	4a0a      	ldr	r2, [pc, #40]	; (8005044 <_sbrk+0x2c>)
 800501a:	6811      	ldr	r1, [r2, #0]
{
 800501c:	b508      	push	{r3, lr}
 800501e:	4603      	mov	r3, r0
	if (heap_end == 0)
 8005020:	b909      	cbnz	r1, 8005026 <_sbrk+0xe>
		heap_end = &end;
 8005022:	4909      	ldr	r1, [pc, #36]	; (8005048 <_sbrk+0x30>)
 8005024:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8005026:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8005028:	4669      	mov	r1, sp
 800502a:	4403      	add	r3, r0
 800502c:	428b      	cmp	r3, r1
 800502e:	d906      	bls.n	800503e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005030:	f000 f818 	bl	8005064 <__errno>
 8005034:	230c      	movs	r3, #12
 8005036:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800503c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800503e:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8005040:	e7fc      	b.n	800503c <_sbrk+0x24>
 8005042:	bf00      	nop
 8005044:	20000ecc 	.word	0x20000ecc
 8005048:	20000ee8 	.word	0x20000ee8

0800504c <_close>:

int _close(int file)
{
	return -1;
}
 800504c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005050:	4770      	bx	lr

08005052 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005056:	604b      	str	r3, [r1, #4]
	return 0;
}
 8005058:	2000      	movs	r0, #0
 800505a:	4770      	bx	lr

0800505c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800505c:	2001      	movs	r0, #1
 800505e:	4770      	bx	lr

08005060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005060:	2000      	movs	r0, #0
 8005062:	4770      	bx	lr

08005064 <__errno>:
 8005064:	4b01      	ldr	r3, [pc, #4]	; (800506c <__errno+0x8>)
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	2000008c 	.word	0x2000008c

08005070 <__libc_init_array>:
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	4d0d      	ldr	r5, [pc, #52]	; (80050a8 <__libc_init_array+0x38>)
 8005074:	4c0d      	ldr	r4, [pc, #52]	; (80050ac <__libc_init_array+0x3c>)
 8005076:	1b64      	subs	r4, r4, r5
 8005078:	10a4      	asrs	r4, r4, #2
 800507a:	2600      	movs	r6, #0
 800507c:	42a6      	cmp	r6, r4
 800507e:	d109      	bne.n	8005094 <__libc_init_array+0x24>
 8005080:	4d0b      	ldr	r5, [pc, #44]	; (80050b0 <__libc_init_array+0x40>)
 8005082:	4c0c      	ldr	r4, [pc, #48]	; (80050b4 <__libc_init_array+0x44>)
 8005084:	f003 f822 	bl	80080cc <_init>
 8005088:	1b64      	subs	r4, r4, r5
 800508a:	10a4      	asrs	r4, r4, #2
 800508c:	2600      	movs	r6, #0
 800508e:	42a6      	cmp	r6, r4
 8005090:	d105      	bne.n	800509e <__libc_init_array+0x2e>
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	f855 3b04 	ldr.w	r3, [r5], #4
 8005098:	4798      	blx	r3
 800509a:	3601      	adds	r6, #1
 800509c:	e7ee      	b.n	800507c <__libc_init_array+0xc>
 800509e:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a2:	4798      	blx	r3
 80050a4:	3601      	adds	r6, #1
 80050a6:	e7f2      	b.n	800508e <__libc_init_array+0x1e>
 80050a8:	08008e40 	.word	0x08008e40
 80050ac:	08008e40 	.word	0x08008e40
 80050b0:	08008e40 	.word	0x08008e40
 80050b4:	08008e44 	.word	0x08008e44

080050b8 <memcpy>:
 80050b8:	440a      	add	r2, r1
 80050ba:	4291      	cmp	r1, r2
 80050bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80050c0:	d100      	bne.n	80050c4 <memcpy+0xc>
 80050c2:	4770      	bx	lr
 80050c4:	b510      	push	{r4, lr}
 80050c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050ce:	4291      	cmp	r1, r2
 80050d0:	d1f9      	bne.n	80050c6 <memcpy+0xe>
 80050d2:	bd10      	pop	{r4, pc}

080050d4 <memset>:
 80050d4:	4402      	add	r2, r0
 80050d6:	4603      	mov	r3, r0
 80050d8:	4293      	cmp	r3, r2
 80050da:	d100      	bne.n	80050de <memset+0xa>
 80050dc:	4770      	bx	lr
 80050de:	f803 1b01 	strb.w	r1, [r3], #1
 80050e2:	e7f9      	b.n	80050d8 <memset+0x4>

080050e4 <__cvt>:
 80050e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	ec55 4b10 	vmov	r4, r5, d0
 80050ec:	2d00      	cmp	r5, #0
 80050ee:	460e      	mov	r6, r1
 80050f0:	4619      	mov	r1, r3
 80050f2:	462b      	mov	r3, r5
 80050f4:	bfbb      	ittet	lt
 80050f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80050fa:	461d      	movlt	r5, r3
 80050fc:	2300      	movge	r3, #0
 80050fe:	232d      	movlt	r3, #45	; 0x2d
 8005100:	700b      	strb	r3, [r1, #0]
 8005102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005104:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005108:	4691      	mov	r9, r2
 800510a:	f023 0820 	bic.w	r8, r3, #32
 800510e:	bfbc      	itt	lt
 8005110:	4622      	movlt	r2, r4
 8005112:	4614      	movlt	r4, r2
 8005114:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005118:	d005      	beq.n	8005126 <__cvt+0x42>
 800511a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800511e:	d100      	bne.n	8005122 <__cvt+0x3e>
 8005120:	3601      	adds	r6, #1
 8005122:	2102      	movs	r1, #2
 8005124:	e000      	b.n	8005128 <__cvt+0x44>
 8005126:	2103      	movs	r1, #3
 8005128:	ab03      	add	r3, sp, #12
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	ab02      	add	r3, sp, #8
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	ec45 4b10 	vmov	d0, r4, r5
 8005134:	4653      	mov	r3, sl
 8005136:	4632      	mov	r2, r6
 8005138:	f000 fee6 	bl	8005f08 <_dtoa_r>
 800513c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005140:	4607      	mov	r7, r0
 8005142:	d102      	bne.n	800514a <__cvt+0x66>
 8005144:	f019 0f01 	tst.w	r9, #1
 8005148:	d022      	beq.n	8005190 <__cvt+0xac>
 800514a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800514e:	eb07 0906 	add.w	r9, r7, r6
 8005152:	d110      	bne.n	8005176 <__cvt+0x92>
 8005154:	783b      	ldrb	r3, [r7, #0]
 8005156:	2b30      	cmp	r3, #48	; 0x30
 8005158:	d10a      	bne.n	8005170 <__cvt+0x8c>
 800515a:	2200      	movs	r2, #0
 800515c:	2300      	movs	r3, #0
 800515e:	4620      	mov	r0, r4
 8005160:	4629      	mov	r1, r5
 8005162:	f7fb fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005166:	b918      	cbnz	r0, 8005170 <__cvt+0x8c>
 8005168:	f1c6 0601 	rsb	r6, r6, #1
 800516c:	f8ca 6000 	str.w	r6, [sl]
 8005170:	f8da 3000 	ldr.w	r3, [sl]
 8005174:	4499      	add	r9, r3
 8005176:	2200      	movs	r2, #0
 8005178:	2300      	movs	r3, #0
 800517a:	4620      	mov	r0, r4
 800517c:	4629      	mov	r1, r5
 800517e:	f7fb fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005182:	b108      	cbz	r0, 8005188 <__cvt+0xa4>
 8005184:	f8cd 900c 	str.w	r9, [sp, #12]
 8005188:	2230      	movs	r2, #48	; 0x30
 800518a:	9b03      	ldr	r3, [sp, #12]
 800518c:	454b      	cmp	r3, r9
 800518e:	d307      	bcc.n	80051a0 <__cvt+0xbc>
 8005190:	9b03      	ldr	r3, [sp, #12]
 8005192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005194:	1bdb      	subs	r3, r3, r7
 8005196:	4638      	mov	r0, r7
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	b004      	add	sp, #16
 800519c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051a0:	1c59      	adds	r1, r3, #1
 80051a2:	9103      	str	r1, [sp, #12]
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	e7f0      	b.n	800518a <__cvt+0xa6>

080051a8 <__exponent>:
 80051a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051aa:	4603      	mov	r3, r0
 80051ac:	2900      	cmp	r1, #0
 80051ae:	bfb8      	it	lt
 80051b0:	4249      	neglt	r1, r1
 80051b2:	f803 2b02 	strb.w	r2, [r3], #2
 80051b6:	bfb4      	ite	lt
 80051b8:	222d      	movlt	r2, #45	; 0x2d
 80051ba:	222b      	movge	r2, #43	; 0x2b
 80051bc:	2909      	cmp	r1, #9
 80051be:	7042      	strb	r2, [r0, #1]
 80051c0:	dd2a      	ble.n	8005218 <__exponent+0x70>
 80051c2:	f10d 0407 	add.w	r4, sp, #7
 80051c6:	46a4      	mov	ip, r4
 80051c8:	270a      	movs	r7, #10
 80051ca:	46a6      	mov	lr, r4
 80051cc:	460a      	mov	r2, r1
 80051ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80051d2:	fb07 1516 	mls	r5, r7, r6, r1
 80051d6:	3530      	adds	r5, #48	; 0x30
 80051d8:	2a63      	cmp	r2, #99	; 0x63
 80051da:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80051de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80051e2:	4631      	mov	r1, r6
 80051e4:	dcf1      	bgt.n	80051ca <__exponent+0x22>
 80051e6:	3130      	adds	r1, #48	; 0x30
 80051e8:	f1ae 0502 	sub.w	r5, lr, #2
 80051ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80051f0:	1c44      	adds	r4, r0, #1
 80051f2:	4629      	mov	r1, r5
 80051f4:	4561      	cmp	r1, ip
 80051f6:	d30a      	bcc.n	800520e <__exponent+0x66>
 80051f8:	f10d 0209 	add.w	r2, sp, #9
 80051fc:	eba2 020e 	sub.w	r2, r2, lr
 8005200:	4565      	cmp	r5, ip
 8005202:	bf88      	it	hi
 8005204:	2200      	movhi	r2, #0
 8005206:	4413      	add	r3, r2
 8005208:	1a18      	subs	r0, r3, r0
 800520a:	b003      	add	sp, #12
 800520c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800520e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005212:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005216:	e7ed      	b.n	80051f4 <__exponent+0x4c>
 8005218:	2330      	movs	r3, #48	; 0x30
 800521a:	3130      	adds	r1, #48	; 0x30
 800521c:	7083      	strb	r3, [r0, #2]
 800521e:	70c1      	strb	r1, [r0, #3]
 8005220:	1d03      	adds	r3, r0, #4
 8005222:	e7f1      	b.n	8005208 <__exponent+0x60>

08005224 <_printf_float>:
 8005224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005228:	ed2d 8b02 	vpush	{d8}
 800522c:	b08d      	sub	sp, #52	; 0x34
 800522e:	460c      	mov	r4, r1
 8005230:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005234:	4616      	mov	r6, r2
 8005236:	461f      	mov	r7, r3
 8005238:	4605      	mov	r5, r0
 800523a:	f001 fe1d 	bl	8006e78 <_localeconv_r>
 800523e:	f8d0 a000 	ldr.w	sl, [r0]
 8005242:	4650      	mov	r0, sl
 8005244:	f7fa ffc4 	bl	80001d0 <strlen>
 8005248:	2300      	movs	r3, #0
 800524a:	930a      	str	r3, [sp, #40]	; 0x28
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	9305      	str	r3, [sp, #20]
 8005250:	f8d8 3000 	ldr.w	r3, [r8]
 8005254:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005258:	3307      	adds	r3, #7
 800525a:	f023 0307 	bic.w	r3, r3, #7
 800525e:	f103 0208 	add.w	r2, r3, #8
 8005262:	f8c8 2000 	str.w	r2, [r8]
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800526e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005272:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005276:	9307      	str	r3, [sp, #28]
 8005278:	f8cd 8018 	str.w	r8, [sp, #24]
 800527c:	ee08 0a10 	vmov	s16, r0
 8005280:	4b9f      	ldr	r3, [pc, #636]	; (8005500 <_printf_float+0x2dc>)
 8005282:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800528a:	f7fb fc4f 	bl	8000b2c <__aeabi_dcmpun>
 800528e:	bb88      	cbnz	r0, 80052f4 <_printf_float+0xd0>
 8005290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005294:	4b9a      	ldr	r3, [pc, #616]	; (8005500 <_printf_float+0x2dc>)
 8005296:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800529a:	f7fb fc29 	bl	8000af0 <__aeabi_dcmple>
 800529e:	bb48      	cbnz	r0, 80052f4 <_printf_float+0xd0>
 80052a0:	2200      	movs	r2, #0
 80052a2:	2300      	movs	r3, #0
 80052a4:	4640      	mov	r0, r8
 80052a6:	4649      	mov	r1, r9
 80052a8:	f7fb fc18 	bl	8000adc <__aeabi_dcmplt>
 80052ac:	b110      	cbz	r0, 80052b4 <_printf_float+0x90>
 80052ae:	232d      	movs	r3, #45	; 0x2d
 80052b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052b4:	4b93      	ldr	r3, [pc, #588]	; (8005504 <_printf_float+0x2e0>)
 80052b6:	4894      	ldr	r0, [pc, #592]	; (8005508 <_printf_float+0x2e4>)
 80052b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80052bc:	bf94      	ite	ls
 80052be:	4698      	movls	r8, r3
 80052c0:	4680      	movhi	r8, r0
 80052c2:	2303      	movs	r3, #3
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	9b05      	ldr	r3, [sp, #20]
 80052c8:	f023 0204 	bic.w	r2, r3, #4
 80052cc:	6022      	str	r2, [r4, #0]
 80052ce:	f04f 0900 	mov.w	r9, #0
 80052d2:	9700      	str	r7, [sp, #0]
 80052d4:	4633      	mov	r3, r6
 80052d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80052d8:	4621      	mov	r1, r4
 80052da:	4628      	mov	r0, r5
 80052dc:	f000 f9d8 	bl	8005690 <_printf_common>
 80052e0:	3001      	adds	r0, #1
 80052e2:	f040 8090 	bne.w	8005406 <_printf_float+0x1e2>
 80052e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052ea:	b00d      	add	sp, #52	; 0x34
 80052ec:	ecbd 8b02 	vpop	{d8}
 80052f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f4:	4642      	mov	r2, r8
 80052f6:	464b      	mov	r3, r9
 80052f8:	4640      	mov	r0, r8
 80052fa:	4649      	mov	r1, r9
 80052fc:	f7fb fc16 	bl	8000b2c <__aeabi_dcmpun>
 8005300:	b140      	cbz	r0, 8005314 <_printf_float+0xf0>
 8005302:	464b      	mov	r3, r9
 8005304:	2b00      	cmp	r3, #0
 8005306:	bfbc      	itt	lt
 8005308:	232d      	movlt	r3, #45	; 0x2d
 800530a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800530e:	487f      	ldr	r0, [pc, #508]	; (800550c <_printf_float+0x2e8>)
 8005310:	4b7f      	ldr	r3, [pc, #508]	; (8005510 <_printf_float+0x2ec>)
 8005312:	e7d1      	b.n	80052b8 <_printf_float+0x94>
 8005314:	6863      	ldr	r3, [r4, #4]
 8005316:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800531a:	9206      	str	r2, [sp, #24]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	d13f      	bne.n	80053a0 <_printf_float+0x17c>
 8005320:	2306      	movs	r3, #6
 8005322:	6063      	str	r3, [r4, #4]
 8005324:	9b05      	ldr	r3, [sp, #20]
 8005326:	6861      	ldr	r1, [r4, #4]
 8005328:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800532c:	2300      	movs	r3, #0
 800532e:	9303      	str	r3, [sp, #12]
 8005330:	ab0a      	add	r3, sp, #40	; 0x28
 8005332:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005336:	ab09      	add	r3, sp, #36	; 0x24
 8005338:	ec49 8b10 	vmov	d0, r8, r9
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	6022      	str	r2, [r4, #0]
 8005340:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005344:	4628      	mov	r0, r5
 8005346:	f7ff fecd 	bl	80050e4 <__cvt>
 800534a:	9b06      	ldr	r3, [sp, #24]
 800534c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800534e:	2b47      	cmp	r3, #71	; 0x47
 8005350:	4680      	mov	r8, r0
 8005352:	d108      	bne.n	8005366 <_printf_float+0x142>
 8005354:	1cc8      	adds	r0, r1, #3
 8005356:	db02      	blt.n	800535e <_printf_float+0x13a>
 8005358:	6863      	ldr	r3, [r4, #4]
 800535a:	4299      	cmp	r1, r3
 800535c:	dd41      	ble.n	80053e2 <_printf_float+0x1be>
 800535e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005362:	fa5f fb8b 	uxtb.w	fp, fp
 8005366:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800536a:	d820      	bhi.n	80053ae <_printf_float+0x18a>
 800536c:	3901      	subs	r1, #1
 800536e:	465a      	mov	r2, fp
 8005370:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005374:	9109      	str	r1, [sp, #36]	; 0x24
 8005376:	f7ff ff17 	bl	80051a8 <__exponent>
 800537a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800537c:	1813      	adds	r3, r2, r0
 800537e:	2a01      	cmp	r2, #1
 8005380:	4681      	mov	r9, r0
 8005382:	6123      	str	r3, [r4, #16]
 8005384:	dc02      	bgt.n	800538c <_printf_float+0x168>
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	07d2      	lsls	r2, r2, #31
 800538a:	d501      	bpl.n	8005390 <_printf_float+0x16c>
 800538c:	3301      	adds	r3, #1
 800538e:	6123      	str	r3, [r4, #16]
 8005390:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005394:	2b00      	cmp	r3, #0
 8005396:	d09c      	beq.n	80052d2 <_printf_float+0xae>
 8005398:	232d      	movs	r3, #45	; 0x2d
 800539a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800539e:	e798      	b.n	80052d2 <_printf_float+0xae>
 80053a0:	9a06      	ldr	r2, [sp, #24]
 80053a2:	2a47      	cmp	r2, #71	; 0x47
 80053a4:	d1be      	bne.n	8005324 <_printf_float+0x100>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1bc      	bne.n	8005324 <_printf_float+0x100>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e7b9      	b.n	8005322 <_printf_float+0xfe>
 80053ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80053b2:	d118      	bne.n	80053e6 <_printf_float+0x1c2>
 80053b4:	2900      	cmp	r1, #0
 80053b6:	6863      	ldr	r3, [r4, #4]
 80053b8:	dd0b      	ble.n	80053d2 <_printf_float+0x1ae>
 80053ba:	6121      	str	r1, [r4, #16]
 80053bc:	b913      	cbnz	r3, 80053c4 <_printf_float+0x1a0>
 80053be:	6822      	ldr	r2, [r4, #0]
 80053c0:	07d0      	lsls	r0, r2, #31
 80053c2:	d502      	bpl.n	80053ca <_printf_float+0x1a6>
 80053c4:	3301      	adds	r3, #1
 80053c6:	440b      	add	r3, r1
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80053cc:	f04f 0900 	mov.w	r9, #0
 80053d0:	e7de      	b.n	8005390 <_printf_float+0x16c>
 80053d2:	b913      	cbnz	r3, 80053da <_printf_float+0x1b6>
 80053d4:	6822      	ldr	r2, [r4, #0]
 80053d6:	07d2      	lsls	r2, r2, #31
 80053d8:	d501      	bpl.n	80053de <_printf_float+0x1ba>
 80053da:	3302      	adds	r3, #2
 80053dc:	e7f4      	b.n	80053c8 <_printf_float+0x1a4>
 80053de:	2301      	movs	r3, #1
 80053e0:	e7f2      	b.n	80053c8 <_printf_float+0x1a4>
 80053e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80053e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e8:	4299      	cmp	r1, r3
 80053ea:	db05      	blt.n	80053f8 <_printf_float+0x1d4>
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	6121      	str	r1, [r4, #16]
 80053f0:	07d8      	lsls	r0, r3, #31
 80053f2:	d5ea      	bpl.n	80053ca <_printf_float+0x1a6>
 80053f4:	1c4b      	adds	r3, r1, #1
 80053f6:	e7e7      	b.n	80053c8 <_printf_float+0x1a4>
 80053f8:	2900      	cmp	r1, #0
 80053fa:	bfd4      	ite	le
 80053fc:	f1c1 0202 	rsble	r2, r1, #2
 8005400:	2201      	movgt	r2, #1
 8005402:	4413      	add	r3, r2
 8005404:	e7e0      	b.n	80053c8 <_printf_float+0x1a4>
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	055a      	lsls	r2, r3, #21
 800540a:	d407      	bmi.n	800541c <_printf_float+0x1f8>
 800540c:	6923      	ldr	r3, [r4, #16]
 800540e:	4642      	mov	r2, r8
 8005410:	4631      	mov	r1, r6
 8005412:	4628      	mov	r0, r5
 8005414:	47b8      	blx	r7
 8005416:	3001      	adds	r0, #1
 8005418:	d12c      	bne.n	8005474 <_printf_float+0x250>
 800541a:	e764      	b.n	80052e6 <_printf_float+0xc2>
 800541c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005420:	f240 80e0 	bls.w	80055e4 <_printf_float+0x3c0>
 8005424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005428:	2200      	movs	r2, #0
 800542a:	2300      	movs	r3, #0
 800542c:	f7fb fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005430:	2800      	cmp	r0, #0
 8005432:	d034      	beq.n	800549e <_printf_float+0x27a>
 8005434:	4a37      	ldr	r2, [pc, #220]	; (8005514 <_printf_float+0x2f0>)
 8005436:	2301      	movs	r3, #1
 8005438:	4631      	mov	r1, r6
 800543a:	4628      	mov	r0, r5
 800543c:	47b8      	blx	r7
 800543e:	3001      	adds	r0, #1
 8005440:	f43f af51 	beq.w	80052e6 <_printf_float+0xc2>
 8005444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005448:	429a      	cmp	r2, r3
 800544a:	db02      	blt.n	8005452 <_printf_float+0x22e>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	07d8      	lsls	r0, r3, #31
 8005450:	d510      	bpl.n	8005474 <_printf_float+0x250>
 8005452:	ee18 3a10 	vmov	r3, s16
 8005456:	4652      	mov	r2, sl
 8005458:	4631      	mov	r1, r6
 800545a:	4628      	mov	r0, r5
 800545c:	47b8      	blx	r7
 800545e:	3001      	adds	r0, #1
 8005460:	f43f af41 	beq.w	80052e6 <_printf_float+0xc2>
 8005464:	f04f 0800 	mov.w	r8, #0
 8005468:	f104 091a 	add.w	r9, r4, #26
 800546c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800546e:	3b01      	subs	r3, #1
 8005470:	4543      	cmp	r3, r8
 8005472:	dc09      	bgt.n	8005488 <_printf_float+0x264>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	079b      	lsls	r3, r3, #30
 8005478:	f100 8105 	bmi.w	8005686 <_printf_float+0x462>
 800547c:	68e0      	ldr	r0, [r4, #12]
 800547e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005480:	4298      	cmp	r0, r3
 8005482:	bfb8      	it	lt
 8005484:	4618      	movlt	r0, r3
 8005486:	e730      	b.n	80052ea <_printf_float+0xc6>
 8005488:	2301      	movs	r3, #1
 800548a:	464a      	mov	r2, r9
 800548c:	4631      	mov	r1, r6
 800548e:	4628      	mov	r0, r5
 8005490:	47b8      	blx	r7
 8005492:	3001      	adds	r0, #1
 8005494:	f43f af27 	beq.w	80052e6 <_printf_float+0xc2>
 8005498:	f108 0801 	add.w	r8, r8, #1
 800549c:	e7e6      	b.n	800546c <_printf_float+0x248>
 800549e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	dc39      	bgt.n	8005518 <_printf_float+0x2f4>
 80054a4:	4a1b      	ldr	r2, [pc, #108]	; (8005514 <_printf_float+0x2f0>)
 80054a6:	2301      	movs	r3, #1
 80054a8:	4631      	mov	r1, r6
 80054aa:	4628      	mov	r0, r5
 80054ac:	47b8      	blx	r7
 80054ae:	3001      	adds	r0, #1
 80054b0:	f43f af19 	beq.w	80052e6 <_printf_float+0xc2>
 80054b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054b8:	4313      	orrs	r3, r2
 80054ba:	d102      	bne.n	80054c2 <_printf_float+0x29e>
 80054bc:	6823      	ldr	r3, [r4, #0]
 80054be:	07d9      	lsls	r1, r3, #31
 80054c0:	d5d8      	bpl.n	8005474 <_printf_float+0x250>
 80054c2:	ee18 3a10 	vmov	r3, s16
 80054c6:	4652      	mov	r2, sl
 80054c8:	4631      	mov	r1, r6
 80054ca:	4628      	mov	r0, r5
 80054cc:	47b8      	blx	r7
 80054ce:	3001      	adds	r0, #1
 80054d0:	f43f af09 	beq.w	80052e6 <_printf_float+0xc2>
 80054d4:	f04f 0900 	mov.w	r9, #0
 80054d8:	f104 0a1a 	add.w	sl, r4, #26
 80054dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054de:	425b      	negs	r3, r3
 80054e0:	454b      	cmp	r3, r9
 80054e2:	dc01      	bgt.n	80054e8 <_printf_float+0x2c4>
 80054e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054e6:	e792      	b.n	800540e <_printf_float+0x1ea>
 80054e8:	2301      	movs	r3, #1
 80054ea:	4652      	mov	r2, sl
 80054ec:	4631      	mov	r1, r6
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b8      	blx	r7
 80054f2:	3001      	adds	r0, #1
 80054f4:	f43f aef7 	beq.w	80052e6 <_printf_float+0xc2>
 80054f8:	f109 0901 	add.w	r9, r9, #1
 80054fc:	e7ee      	b.n	80054dc <_printf_float+0x2b8>
 80054fe:	bf00      	nop
 8005500:	7fefffff 	.word	0x7fefffff
 8005504:	08008a08 	.word	0x08008a08
 8005508:	08008a0c 	.word	0x08008a0c
 800550c:	08008a14 	.word	0x08008a14
 8005510:	08008a10 	.word	0x08008a10
 8005514:	08008391 	.word	0x08008391
 8005518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800551a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800551c:	429a      	cmp	r2, r3
 800551e:	bfa8      	it	ge
 8005520:	461a      	movge	r2, r3
 8005522:	2a00      	cmp	r2, #0
 8005524:	4691      	mov	r9, r2
 8005526:	dc37      	bgt.n	8005598 <_printf_float+0x374>
 8005528:	f04f 0b00 	mov.w	fp, #0
 800552c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005530:	f104 021a 	add.w	r2, r4, #26
 8005534:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005536:	9305      	str	r3, [sp, #20]
 8005538:	eba3 0309 	sub.w	r3, r3, r9
 800553c:	455b      	cmp	r3, fp
 800553e:	dc33      	bgt.n	80055a8 <_printf_float+0x384>
 8005540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005544:	429a      	cmp	r2, r3
 8005546:	db3b      	blt.n	80055c0 <_printf_float+0x39c>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	07da      	lsls	r2, r3, #31
 800554c:	d438      	bmi.n	80055c0 <_printf_float+0x39c>
 800554e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005550:	9a05      	ldr	r2, [sp, #20]
 8005552:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005554:	1a9a      	subs	r2, r3, r2
 8005556:	eba3 0901 	sub.w	r9, r3, r1
 800555a:	4591      	cmp	r9, r2
 800555c:	bfa8      	it	ge
 800555e:	4691      	movge	r9, r2
 8005560:	f1b9 0f00 	cmp.w	r9, #0
 8005564:	dc35      	bgt.n	80055d2 <_printf_float+0x3ae>
 8005566:	f04f 0800 	mov.w	r8, #0
 800556a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800556e:	f104 0a1a 	add.w	sl, r4, #26
 8005572:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	eba3 0309 	sub.w	r3, r3, r9
 800557c:	4543      	cmp	r3, r8
 800557e:	f77f af79 	ble.w	8005474 <_printf_float+0x250>
 8005582:	2301      	movs	r3, #1
 8005584:	4652      	mov	r2, sl
 8005586:	4631      	mov	r1, r6
 8005588:	4628      	mov	r0, r5
 800558a:	47b8      	blx	r7
 800558c:	3001      	adds	r0, #1
 800558e:	f43f aeaa 	beq.w	80052e6 <_printf_float+0xc2>
 8005592:	f108 0801 	add.w	r8, r8, #1
 8005596:	e7ec      	b.n	8005572 <_printf_float+0x34e>
 8005598:	4613      	mov	r3, r2
 800559a:	4631      	mov	r1, r6
 800559c:	4642      	mov	r2, r8
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	d1c0      	bne.n	8005528 <_printf_float+0x304>
 80055a6:	e69e      	b.n	80052e6 <_printf_float+0xc2>
 80055a8:	2301      	movs	r3, #1
 80055aa:	4631      	mov	r1, r6
 80055ac:	4628      	mov	r0, r5
 80055ae:	9205      	str	r2, [sp, #20]
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	f43f ae97 	beq.w	80052e6 <_printf_float+0xc2>
 80055b8:	9a05      	ldr	r2, [sp, #20]
 80055ba:	f10b 0b01 	add.w	fp, fp, #1
 80055be:	e7b9      	b.n	8005534 <_printf_float+0x310>
 80055c0:	ee18 3a10 	vmov	r3, s16
 80055c4:	4652      	mov	r2, sl
 80055c6:	4631      	mov	r1, r6
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b8      	blx	r7
 80055cc:	3001      	adds	r0, #1
 80055ce:	d1be      	bne.n	800554e <_printf_float+0x32a>
 80055d0:	e689      	b.n	80052e6 <_printf_float+0xc2>
 80055d2:	9a05      	ldr	r2, [sp, #20]
 80055d4:	464b      	mov	r3, r9
 80055d6:	4442      	add	r2, r8
 80055d8:	4631      	mov	r1, r6
 80055da:	4628      	mov	r0, r5
 80055dc:	47b8      	blx	r7
 80055de:	3001      	adds	r0, #1
 80055e0:	d1c1      	bne.n	8005566 <_printf_float+0x342>
 80055e2:	e680      	b.n	80052e6 <_printf_float+0xc2>
 80055e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055e6:	2a01      	cmp	r2, #1
 80055e8:	dc01      	bgt.n	80055ee <_printf_float+0x3ca>
 80055ea:	07db      	lsls	r3, r3, #31
 80055ec:	d538      	bpl.n	8005660 <_printf_float+0x43c>
 80055ee:	2301      	movs	r3, #1
 80055f0:	4642      	mov	r2, r8
 80055f2:	4631      	mov	r1, r6
 80055f4:	4628      	mov	r0, r5
 80055f6:	47b8      	blx	r7
 80055f8:	3001      	adds	r0, #1
 80055fa:	f43f ae74 	beq.w	80052e6 <_printf_float+0xc2>
 80055fe:	ee18 3a10 	vmov	r3, s16
 8005602:	4652      	mov	r2, sl
 8005604:	4631      	mov	r1, r6
 8005606:	4628      	mov	r0, r5
 8005608:	47b8      	blx	r7
 800560a:	3001      	adds	r0, #1
 800560c:	f43f ae6b 	beq.w	80052e6 <_printf_float+0xc2>
 8005610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005614:	2200      	movs	r2, #0
 8005616:	2300      	movs	r3, #0
 8005618:	f7fb fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800561c:	b9d8      	cbnz	r0, 8005656 <_printf_float+0x432>
 800561e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005620:	f108 0201 	add.w	r2, r8, #1
 8005624:	3b01      	subs	r3, #1
 8005626:	4631      	mov	r1, r6
 8005628:	4628      	mov	r0, r5
 800562a:	47b8      	blx	r7
 800562c:	3001      	adds	r0, #1
 800562e:	d10e      	bne.n	800564e <_printf_float+0x42a>
 8005630:	e659      	b.n	80052e6 <_printf_float+0xc2>
 8005632:	2301      	movs	r3, #1
 8005634:	4652      	mov	r2, sl
 8005636:	4631      	mov	r1, r6
 8005638:	4628      	mov	r0, r5
 800563a:	47b8      	blx	r7
 800563c:	3001      	adds	r0, #1
 800563e:	f43f ae52 	beq.w	80052e6 <_printf_float+0xc2>
 8005642:	f108 0801 	add.w	r8, r8, #1
 8005646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005648:	3b01      	subs	r3, #1
 800564a:	4543      	cmp	r3, r8
 800564c:	dcf1      	bgt.n	8005632 <_printf_float+0x40e>
 800564e:	464b      	mov	r3, r9
 8005650:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005654:	e6dc      	b.n	8005410 <_printf_float+0x1ec>
 8005656:	f04f 0800 	mov.w	r8, #0
 800565a:	f104 0a1a 	add.w	sl, r4, #26
 800565e:	e7f2      	b.n	8005646 <_printf_float+0x422>
 8005660:	2301      	movs	r3, #1
 8005662:	4642      	mov	r2, r8
 8005664:	e7df      	b.n	8005626 <_printf_float+0x402>
 8005666:	2301      	movs	r3, #1
 8005668:	464a      	mov	r2, r9
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	47b8      	blx	r7
 8005670:	3001      	adds	r0, #1
 8005672:	f43f ae38 	beq.w	80052e6 <_printf_float+0xc2>
 8005676:	f108 0801 	add.w	r8, r8, #1
 800567a:	68e3      	ldr	r3, [r4, #12]
 800567c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800567e:	1a5b      	subs	r3, r3, r1
 8005680:	4543      	cmp	r3, r8
 8005682:	dcf0      	bgt.n	8005666 <_printf_float+0x442>
 8005684:	e6fa      	b.n	800547c <_printf_float+0x258>
 8005686:	f04f 0800 	mov.w	r8, #0
 800568a:	f104 0919 	add.w	r9, r4, #25
 800568e:	e7f4      	b.n	800567a <_printf_float+0x456>

08005690 <_printf_common>:
 8005690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005694:	4616      	mov	r6, r2
 8005696:	4699      	mov	r9, r3
 8005698:	688a      	ldr	r2, [r1, #8]
 800569a:	690b      	ldr	r3, [r1, #16]
 800569c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056a0:	4293      	cmp	r3, r2
 80056a2:	bfb8      	it	lt
 80056a4:	4613      	movlt	r3, r2
 80056a6:	6033      	str	r3, [r6, #0]
 80056a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056ac:	4607      	mov	r7, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	b10a      	cbz	r2, 80056b6 <_printf_common+0x26>
 80056b2:	3301      	adds	r3, #1
 80056b4:	6033      	str	r3, [r6, #0]
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	0699      	lsls	r1, r3, #26
 80056ba:	bf42      	ittt	mi
 80056bc:	6833      	ldrmi	r3, [r6, #0]
 80056be:	3302      	addmi	r3, #2
 80056c0:	6033      	strmi	r3, [r6, #0]
 80056c2:	6825      	ldr	r5, [r4, #0]
 80056c4:	f015 0506 	ands.w	r5, r5, #6
 80056c8:	d106      	bne.n	80056d8 <_printf_common+0x48>
 80056ca:	f104 0a19 	add.w	sl, r4, #25
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	6832      	ldr	r2, [r6, #0]
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	42ab      	cmp	r3, r5
 80056d6:	dc26      	bgt.n	8005726 <_printf_common+0x96>
 80056d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056dc:	1e13      	subs	r3, r2, #0
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	bf18      	it	ne
 80056e2:	2301      	movne	r3, #1
 80056e4:	0692      	lsls	r2, r2, #26
 80056e6:	d42b      	bmi.n	8005740 <_printf_common+0xb0>
 80056e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ec:	4649      	mov	r1, r9
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c0      	blx	r8
 80056f2:	3001      	adds	r0, #1
 80056f4:	d01e      	beq.n	8005734 <_printf_common+0xa4>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	68e5      	ldr	r5, [r4, #12]
 80056fa:	6832      	ldr	r2, [r6, #0]
 80056fc:	f003 0306 	and.w	r3, r3, #6
 8005700:	2b04      	cmp	r3, #4
 8005702:	bf08      	it	eq
 8005704:	1aad      	subeq	r5, r5, r2
 8005706:	68a3      	ldr	r3, [r4, #8]
 8005708:	6922      	ldr	r2, [r4, #16]
 800570a:	bf0c      	ite	eq
 800570c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005710:	2500      	movne	r5, #0
 8005712:	4293      	cmp	r3, r2
 8005714:	bfc4      	itt	gt
 8005716:	1a9b      	subgt	r3, r3, r2
 8005718:	18ed      	addgt	r5, r5, r3
 800571a:	2600      	movs	r6, #0
 800571c:	341a      	adds	r4, #26
 800571e:	42b5      	cmp	r5, r6
 8005720:	d11a      	bne.n	8005758 <_printf_common+0xc8>
 8005722:	2000      	movs	r0, #0
 8005724:	e008      	b.n	8005738 <_printf_common+0xa8>
 8005726:	2301      	movs	r3, #1
 8005728:	4652      	mov	r2, sl
 800572a:	4649      	mov	r1, r9
 800572c:	4638      	mov	r0, r7
 800572e:	47c0      	blx	r8
 8005730:	3001      	adds	r0, #1
 8005732:	d103      	bne.n	800573c <_printf_common+0xac>
 8005734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800573c:	3501      	adds	r5, #1
 800573e:	e7c6      	b.n	80056ce <_printf_common+0x3e>
 8005740:	18e1      	adds	r1, r4, r3
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	2030      	movs	r0, #48	; 0x30
 8005746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800574a:	4422      	add	r2, r4
 800574c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005754:	3302      	adds	r3, #2
 8005756:	e7c7      	b.n	80056e8 <_printf_common+0x58>
 8005758:	2301      	movs	r3, #1
 800575a:	4622      	mov	r2, r4
 800575c:	4649      	mov	r1, r9
 800575e:	4638      	mov	r0, r7
 8005760:	47c0      	blx	r8
 8005762:	3001      	adds	r0, #1
 8005764:	d0e6      	beq.n	8005734 <_printf_common+0xa4>
 8005766:	3601      	adds	r6, #1
 8005768:	e7d9      	b.n	800571e <_printf_common+0x8e>
	...

0800576c <_printf_i>:
 800576c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	7e0f      	ldrb	r7, [r1, #24]
 8005772:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005774:	2f78      	cmp	r7, #120	; 0x78
 8005776:	4691      	mov	r9, r2
 8005778:	4680      	mov	r8, r0
 800577a:	460c      	mov	r4, r1
 800577c:	469a      	mov	sl, r3
 800577e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005782:	d807      	bhi.n	8005794 <_printf_i+0x28>
 8005784:	2f62      	cmp	r7, #98	; 0x62
 8005786:	d80a      	bhi.n	800579e <_printf_i+0x32>
 8005788:	2f00      	cmp	r7, #0
 800578a:	f000 80d8 	beq.w	800593e <_printf_i+0x1d2>
 800578e:	2f58      	cmp	r7, #88	; 0x58
 8005790:	f000 80a3 	beq.w	80058da <_printf_i+0x16e>
 8005794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800579c:	e03a      	b.n	8005814 <_printf_i+0xa8>
 800579e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057a2:	2b15      	cmp	r3, #21
 80057a4:	d8f6      	bhi.n	8005794 <_printf_i+0x28>
 80057a6:	a101      	add	r1, pc, #4	; (adr r1, 80057ac <_printf_i+0x40>)
 80057a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057ac:	08005805 	.word	0x08005805
 80057b0:	08005819 	.word	0x08005819
 80057b4:	08005795 	.word	0x08005795
 80057b8:	08005795 	.word	0x08005795
 80057bc:	08005795 	.word	0x08005795
 80057c0:	08005795 	.word	0x08005795
 80057c4:	08005819 	.word	0x08005819
 80057c8:	08005795 	.word	0x08005795
 80057cc:	08005795 	.word	0x08005795
 80057d0:	08005795 	.word	0x08005795
 80057d4:	08005795 	.word	0x08005795
 80057d8:	08005925 	.word	0x08005925
 80057dc:	08005849 	.word	0x08005849
 80057e0:	08005907 	.word	0x08005907
 80057e4:	08005795 	.word	0x08005795
 80057e8:	08005795 	.word	0x08005795
 80057ec:	08005947 	.word	0x08005947
 80057f0:	08005795 	.word	0x08005795
 80057f4:	08005849 	.word	0x08005849
 80057f8:	08005795 	.word	0x08005795
 80057fc:	08005795 	.word	0x08005795
 8005800:	0800590f 	.word	0x0800590f
 8005804:	682b      	ldr	r3, [r5, #0]
 8005806:	1d1a      	adds	r2, r3, #4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	602a      	str	r2, [r5, #0]
 800580c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005814:	2301      	movs	r3, #1
 8005816:	e0a3      	b.n	8005960 <_printf_i+0x1f4>
 8005818:	6820      	ldr	r0, [r4, #0]
 800581a:	6829      	ldr	r1, [r5, #0]
 800581c:	0606      	lsls	r6, r0, #24
 800581e:	f101 0304 	add.w	r3, r1, #4
 8005822:	d50a      	bpl.n	800583a <_printf_i+0xce>
 8005824:	680e      	ldr	r6, [r1, #0]
 8005826:	602b      	str	r3, [r5, #0]
 8005828:	2e00      	cmp	r6, #0
 800582a:	da03      	bge.n	8005834 <_printf_i+0xc8>
 800582c:	232d      	movs	r3, #45	; 0x2d
 800582e:	4276      	negs	r6, r6
 8005830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005834:	485e      	ldr	r0, [pc, #376]	; (80059b0 <_printf_i+0x244>)
 8005836:	230a      	movs	r3, #10
 8005838:	e019      	b.n	800586e <_printf_i+0x102>
 800583a:	680e      	ldr	r6, [r1, #0]
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005842:	bf18      	it	ne
 8005844:	b236      	sxthne	r6, r6
 8005846:	e7ef      	b.n	8005828 <_printf_i+0xbc>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	6820      	ldr	r0, [r4, #0]
 800584c:	1d19      	adds	r1, r3, #4
 800584e:	6029      	str	r1, [r5, #0]
 8005850:	0601      	lsls	r1, r0, #24
 8005852:	d501      	bpl.n	8005858 <_printf_i+0xec>
 8005854:	681e      	ldr	r6, [r3, #0]
 8005856:	e002      	b.n	800585e <_printf_i+0xf2>
 8005858:	0646      	lsls	r6, r0, #25
 800585a:	d5fb      	bpl.n	8005854 <_printf_i+0xe8>
 800585c:	881e      	ldrh	r6, [r3, #0]
 800585e:	4854      	ldr	r0, [pc, #336]	; (80059b0 <_printf_i+0x244>)
 8005860:	2f6f      	cmp	r7, #111	; 0x6f
 8005862:	bf0c      	ite	eq
 8005864:	2308      	moveq	r3, #8
 8005866:	230a      	movne	r3, #10
 8005868:	2100      	movs	r1, #0
 800586a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800586e:	6865      	ldr	r5, [r4, #4]
 8005870:	60a5      	str	r5, [r4, #8]
 8005872:	2d00      	cmp	r5, #0
 8005874:	bfa2      	ittt	ge
 8005876:	6821      	ldrge	r1, [r4, #0]
 8005878:	f021 0104 	bicge.w	r1, r1, #4
 800587c:	6021      	strge	r1, [r4, #0]
 800587e:	b90e      	cbnz	r6, 8005884 <_printf_i+0x118>
 8005880:	2d00      	cmp	r5, #0
 8005882:	d04d      	beq.n	8005920 <_printf_i+0x1b4>
 8005884:	4615      	mov	r5, r2
 8005886:	fbb6 f1f3 	udiv	r1, r6, r3
 800588a:	fb03 6711 	mls	r7, r3, r1, r6
 800588e:	5dc7      	ldrb	r7, [r0, r7]
 8005890:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005894:	4637      	mov	r7, r6
 8005896:	42bb      	cmp	r3, r7
 8005898:	460e      	mov	r6, r1
 800589a:	d9f4      	bls.n	8005886 <_printf_i+0x11a>
 800589c:	2b08      	cmp	r3, #8
 800589e:	d10b      	bne.n	80058b8 <_printf_i+0x14c>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	07de      	lsls	r6, r3, #31
 80058a4:	d508      	bpl.n	80058b8 <_printf_i+0x14c>
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	6861      	ldr	r1, [r4, #4]
 80058aa:	4299      	cmp	r1, r3
 80058ac:	bfde      	ittt	le
 80058ae:	2330      	movle	r3, #48	; 0x30
 80058b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058b8:	1b52      	subs	r2, r2, r5
 80058ba:	6122      	str	r2, [r4, #16]
 80058bc:	f8cd a000 	str.w	sl, [sp]
 80058c0:	464b      	mov	r3, r9
 80058c2:	aa03      	add	r2, sp, #12
 80058c4:	4621      	mov	r1, r4
 80058c6:	4640      	mov	r0, r8
 80058c8:	f7ff fee2 	bl	8005690 <_printf_common>
 80058cc:	3001      	adds	r0, #1
 80058ce:	d14c      	bne.n	800596a <_printf_i+0x1fe>
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058d4:	b004      	add	sp, #16
 80058d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058da:	4835      	ldr	r0, [pc, #212]	; (80059b0 <_printf_i+0x244>)
 80058dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058e0:	6829      	ldr	r1, [r5, #0]
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80058e8:	6029      	str	r1, [r5, #0]
 80058ea:	061d      	lsls	r5, r3, #24
 80058ec:	d514      	bpl.n	8005918 <_printf_i+0x1ac>
 80058ee:	07df      	lsls	r7, r3, #31
 80058f0:	bf44      	itt	mi
 80058f2:	f043 0320 	orrmi.w	r3, r3, #32
 80058f6:	6023      	strmi	r3, [r4, #0]
 80058f8:	b91e      	cbnz	r6, 8005902 <_printf_i+0x196>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	f023 0320 	bic.w	r3, r3, #32
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	2310      	movs	r3, #16
 8005904:	e7b0      	b.n	8005868 <_printf_i+0xfc>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	f043 0320 	orr.w	r3, r3, #32
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	2378      	movs	r3, #120	; 0x78
 8005910:	4828      	ldr	r0, [pc, #160]	; (80059b4 <_printf_i+0x248>)
 8005912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005916:	e7e3      	b.n	80058e0 <_printf_i+0x174>
 8005918:	0659      	lsls	r1, r3, #25
 800591a:	bf48      	it	mi
 800591c:	b2b6      	uxthmi	r6, r6
 800591e:	e7e6      	b.n	80058ee <_printf_i+0x182>
 8005920:	4615      	mov	r5, r2
 8005922:	e7bb      	b.n	800589c <_printf_i+0x130>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	6826      	ldr	r6, [r4, #0]
 8005928:	6961      	ldr	r1, [r4, #20]
 800592a:	1d18      	adds	r0, r3, #4
 800592c:	6028      	str	r0, [r5, #0]
 800592e:	0635      	lsls	r5, r6, #24
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	d501      	bpl.n	8005938 <_printf_i+0x1cc>
 8005934:	6019      	str	r1, [r3, #0]
 8005936:	e002      	b.n	800593e <_printf_i+0x1d2>
 8005938:	0670      	lsls	r0, r6, #25
 800593a:	d5fb      	bpl.n	8005934 <_printf_i+0x1c8>
 800593c:	8019      	strh	r1, [r3, #0]
 800593e:	2300      	movs	r3, #0
 8005940:	6123      	str	r3, [r4, #16]
 8005942:	4615      	mov	r5, r2
 8005944:	e7ba      	b.n	80058bc <_printf_i+0x150>
 8005946:	682b      	ldr	r3, [r5, #0]
 8005948:	1d1a      	adds	r2, r3, #4
 800594a:	602a      	str	r2, [r5, #0]
 800594c:	681d      	ldr	r5, [r3, #0]
 800594e:	6862      	ldr	r2, [r4, #4]
 8005950:	2100      	movs	r1, #0
 8005952:	4628      	mov	r0, r5
 8005954:	f7fa fc44 	bl	80001e0 <memchr>
 8005958:	b108      	cbz	r0, 800595e <_printf_i+0x1f2>
 800595a:	1b40      	subs	r0, r0, r5
 800595c:	6060      	str	r0, [r4, #4]
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	2300      	movs	r3, #0
 8005964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005968:	e7a8      	b.n	80058bc <_printf_i+0x150>
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	462a      	mov	r2, r5
 800596e:	4649      	mov	r1, r9
 8005970:	4640      	mov	r0, r8
 8005972:	47d0      	blx	sl
 8005974:	3001      	adds	r0, #1
 8005976:	d0ab      	beq.n	80058d0 <_printf_i+0x164>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	079b      	lsls	r3, r3, #30
 800597c:	d413      	bmi.n	80059a6 <_printf_i+0x23a>
 800597e:	68e0      	ldr	r0, [r4, #12]
 8005980:	9b03      	ldr	r3, [sp, #12]
 8005982:	4298      	cmp	r0, r3
 8005984:	bfb8      	it	lt
 8005986:	4618      	movlt	r0, r3
 8005988:	e7a4      	b.n	80058d4 <_printf_i+0x168>
 800598a:	2301      	movs	r3, #1
 800598c:	4632      	mov	r2, r6
 800598e:	4649      	mov	r1, r9
 8005990:	4640      	mov	r0, r8
 8005992:	47d0      	blx	sl
 8005994:	3001      	adds	r0, #1
 8005996:	d09b      	beq.n	80058d0 <_printf_i+0x164>
 8005998:	3501      	adds	r5, #1
 800599a:	68e3      	ldr	r3, [r4, #12]
 800599c:	9903      	ldr	r1, [sp, #12]
 800599e:	1a5b      	subs	r3, r3, r1
 80059a0:	42ab      	cmp	r3, r5
 80059a2:	dcf2      	bgt.n	800598a <_printf_i+0x21e>
 80059a4:	e7eb      	b.n	800597e <_printf_i+0x212>
 80059a6:	2500      	movs	r5, #0
 80059a8:	f104 0619 	add.w	r6, r4, #25
 80059ac:	e7f5      	b.n	800599a <_printf_i+0x22e>
 80059ae:	bf00      	nop
 80059b0:	08008a18 	.word	0x08008a18
 80059b4:	08008a29 	.word	0x08008a29

080059b8 <iprintf>:
 80059b8:	b40f      	push	{r0, r1, r2, r3}
 80059ba:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <iprintf+0x2c>)
 80059bc:	b513      	push	{r0, r1, r4, lr}
 80059be:	681c      	ldr	r4, [r3, #0]
 80059c0:	b124      	cbz	r4, 80059cc <iprintf+0x14>
 80059c2:	69a3      	ldr	r3, [r4, #24]
 80059c4:	b913      	cbnz	r3, 80059cc <iprintf+0x14>
 80059c6:	4620      	mov	r0, r4
 80059c8:	f001 f9a6 	bl	8006d18 <__sinit>
 80059cc:	ab05      	add	r3, sp, #20
 80059ce:	9a04      	ldr	r2, [sp, #16]
 80059d0:	68a1      	ldr	r1, [r4, #8]
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	4620      	mov	r0, r4
 80059d6:	f002 f8c3 	bl	8007b60 <_vfiprintf_r>
 80059da:	b002      	add	sp, #8
 80059dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e0:	b004      	add	sp, #16
 80059e2:	4770      	bx	lr
 80059e4:	2000008c 	.word	0x2000008c

080059e8 <_puts_r>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	460e      	mov	r6, r1
 80059ec:	4605      	mov	r5, r0
 80059ee:	b118      	cbz	r0, 80059f8 <_puts_r+0x10>
 80059f0:	6983      	ldr	r3, [r0, #24]
 80059f2:	b90b      	cbnz	r3, 80059f8 <_puts_r+0x10>
 80059f4:	f001 f990 	bl	8006d18 <__sinit>
 80059f8:	69ab      	ldr	r3, [r5, #24]
 80059fa:	68ac      	ldr	r4, [r5, #8]
 80059fc:	b913      	cbnz	r3, 8005a04 <_puts_r+0x1c>
 80059fe:	4628      	mov	r0, r5
 8005a00:	f001 f98a 	bl	8006d18 <__sinit>
 8005a04:	4b2c      	ldr	r3, [pc, #176]	; (8005ab8 <_puts_r+0xd0>)
 8005a06:	429c      	cmp	r4, r3
 8005a08:	d120      	bne.n	8005a4c <_puts_r+0x64>
 8005a0a:	686c      	ldr	r4, [r5, #4]
 8005a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a0e:	07db      	lsls	r3, r3, #31
 8005a10:	d405      	bmi.n	8005a1e <_puts_r+0x36>
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	0598      	lsls	r0, r3, #22
 8005a16:	d402      	bmi.n	8005a1e <_puts_r+0x36>
 8005a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a1a:	f001 fa32 	bl	8006e82 <__retarget_lock_acquire_recursive>
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	0719      	lsls	r1, r3, #28
 8005a22:	d51d      	bpl.n	8005a60 <_puts_r+0x78>
 8005a24:	6923      	ldr	r3, [r4, #16]
 8005a26:	b1db      	cbz	r3, 8005a60 <_puts_r+0x78>
 8005a28:	3e01      	subs	r6, #1
 8005a2a:	68a3      	ldr	r3, [r4, #8]
 8005a2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a30:	3b01      	subs	r3, #1
 8005a32:	60a3      	str	r3, [r4, #8]
 8005a34:	bb39      	cbnz	r1, 8005a86 <_puts_r+0x9e>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	da38      	bge.n	8005aac <_puts_r+0xc4>
 8005a3a:	4622      	mov	r2, r4
 8005a3c:	210a      	movs	r1, #10
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 f8f6 	bl	8005c30 <__swbuf_r>
 8005a44:	3001      	adds	r0, #1
 8005a46:	d011      	beq.n	8005a6c <_puts_r+0x84>
 8005a48:	250a      	movs	r5, #10
 8005a4a:	e011      	b.n	8005a70 <_puts_r+0x88>
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <_puts_r+0xd4>)
 8005a4e:	429c      	cmp	r4, r3
 8005a50:	d101      	bne.n	8005a56 <_puts_r+0x6e>
 8005a52:	68ac      	ldr	r4, [r5, #8]
 8005a54:	e7da      	b.n	8005a0c <_puts_r+0x24>
 8005a56:	4b1a      	ldr	r3, [pc, #104]	; (8005ac0 <_puts_r+0xd8>)
 8005a58:	429c      	cmp	r4, r3
 8005a5a:	bf08      	it	eq
 8005a5c:	68ec      	ldreq	r4, [r5, #12]
 8005a5e:	e7d5      	b.n	8005a0c <_puts_r+0x24>
 8005a60:	4621      	mov	r1, r4
 8005a62:	4628      	mov	r0, r5
 8005a64:	f000 f936 	bl	8005cd4 <__swsetup_r>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d0dd      	beq.n	8005a28 <_puts_r+0x40>
 8005a6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a72:	07da      	lsls	r2, r3, #31
 8005a74:	d405      	bmi.n	8005a82 <_puts_r+0x9a>
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	059b      	lsls	r3, r3, #22
 8005a7a:	d402      	bmi.n	8005a82 <_puts_r+0x9a>
 8005a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a7e:	f001 fa01 	bl	8006e84 <__retarget_lock_release_recursive>
 8005a82:	4628      	mov	r0, r5
 8005a84:	bd70      	pop	{r4, r5, r6, pc}
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	da04      	bge.n	8005a94 <_puts_r+0xac>
 8005a8a:	69a2      	ldr	r2, [r4, #24]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	dc06      	bgt.n	8005a9e <_puts_r+0xb6>
 8005a90:	290a      	cmp	r1, #10
 8005a92:	d004      	beq.n	8005a9e <_puts_r+0xb6>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	6022      	str	r2, [r4, #0]
 8005a9a:	7019      	strb	r1, [r3, #0]
 8005a9c:	e7c5      	b.n	8005a2a <_puts_r+0x42>
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f000 f8c5 	bl	8005c30 <__swbuf_r>
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d1bf      	bne.n	8005a2a <_puts_r+0x42>
 8005aaa:	e7df      	b.n	8005a6c <_puts_r+0x84>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	250a      	movs	r5, #10
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	6022      	str	r2, [r4, #0]
 8005ab4:	701d      	strb	r5, [r3, #0]
 8005ab6:	e7db      	b.n	8005a70 <_puts_r+0x88>
 8005ab8:	08008b84 	.word	0x08008b84
 8005abc:	08008ba4 	.word	0x08008ba4
 8005ac0:	08008b64 	.word	0x08008b64

08005ac4 <puts>:
 8005ac4:	4b02      	ldr	r3, [pc, #8]	; (8005ad0 <puts+0xc>)
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	f7ff bf8d 	b.w	80059e8 <_puts_r>
 8005ace:	bf00      	nop
 8005ad0:	2000008c 	.word	0x2000008c

08005ad4 <siprintf>:
 8005ad4:	b40e      	push	{r1, r2, r3}
 8005ad6:	b500      	push	{lr}
 8005ad8:	b09c      	sub	sp, #112	; 0x70
 8005ada:	ab1d      	add	r3, sp, #116	; 0x74
 8005adc:	9002      	str	r0, [sp, #8]
 8005ade:	9006      	str	r0, [sp, #24]
 8005ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ae4:	4809      	ldr	r0, [pc, #36]	; (8005b0c <siprintf+0x38>)
 8005ae6:	9107      	str	r1, [sp, #28]
 8005ae8:	9104      	str	r1, [sp, #16]
 8005aea:	4909      	ldr	r1, [pc, #36]	; (8005b10 <siprintf+0x3c>)
 8005aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8005af0:	9105      	str	r1, [sp, #20]
 8005af2:	6800      	ldr	r0, [r0, #0]
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	a902      	add	r1, sp, #8
 8005af8:	f001 ff08 	bl	800790c <_svfiprintf_r>
 8005afc:	9b02      	ldr	r3, [sp, #8]
 8005afe:	2200      	movs	r2, #0
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	b01c      	add	sp, #112	; 0x70
 8005b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b08:	b003      	add	sp, #12
 8005b0a:	4770      	bx	lr
 8005b0c:	2000008c 	.word	0x2000008c
 8005b10:	ffff0208 	.word	0xffff0208

08005b14 <strcpy>:
 8005b14:	4603      	mov	r3, r0
 8005b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b1a:	f803 2b01 	strb.w	r2, [r3], #1
 8005b1e:	2a00      	cmp	r2, #0
 8005b20:	d1f9      	bne.n	8005b16 <strcpy+0x2>
 8005b22:	4770      	bx	lr

08005b24 <strncpy>:
 8005b24:	b510      	push	{r4, lr}
 8005b26:	3901      	subs	r1, #1
 8005b28:	4603      	mov	r3, r0
 8005b2a:	b132      	cbz	r2, 8005b3a <strncpy+0x16>
 8005b2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b30:	f803 4b01 	strb.w	r4, [r3], #1
 8005b34:	3a01      	subs	r2, #1
 8005b36:	2c00      	cmp	r4, #0
 8005b38:	d1f7      	bne.n	8005b2a <strncpy+0x6>
 8005b3a:	441a      	add	r2, r3
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d100      	bne.n	8005b44 <strncpy+0x20>
 8005b42:	bd10      	pop	{r4, pc}
 8005b44:	f803 1b01 	strb.w	r1, [r3], #1
 8005b48:	e7f9      	b.n	8005b3e <strncpy+0x1a>

08005b4a <strstr>:
 8005b4a:	780a      	ldrb	r2, [r1, #0]
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	b96a      	cbnz	r2, 8005b6c <strstr+0x22>
 8005b50:	bd70      	pop	{r4, r5, r6, pc}
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d109      	bne.n	8005b6a <strstr+0x20>
 8005b56:	460c      	mov	r4, r1
 8005b58:	4605      	mov	r5, r0
 8005b5a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0f6      	beq.n	8005b50 <strstr+0x6>
 8005b62:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005b66:	429e      	cmp	r6, r3
 8005b68:	d0f7      	beq.n	8005b5a <strstr+0x10>
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	7803      	ldrb	r3, [r0, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1ef      	bne.n	8005b52 <strstr+0x8>
 8005b72:	4618      	mov	r0, r3
 8005b74:	e7ec      	b.n	8005b50 <strstr+0x6>
	...

08005b78 <strtok>:
 8005b78:	4b16      	ldr	r3, [pc, #88]	; (8005bd4 <strtok+0x5c>)
 8005b7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b7c:	681e      	ldr	r6, [r3, #0]
 8005b7e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8005b80:	4605      	mov	r5, r0
 8005b82:	b9fc      	cbnz	r4, 8005bc4 <strtok+0x4c>
 8005b84:	2050      	movs	r0, #80	; 0x50
 8005b86:	9101      	str	r1, [sp, #4]
 8005b88:	f001 f9e2 	bl	8006f50 <malloc>
 8005b8c:	9901      	ldr	r1, [sp, #4]
 8005b8e:	65b0      	str	r0, [r6, #88]	; 0x58
 8005b90:	4602      	mov	r2, r0
 8005b92:	b920      	cbnz	r0, 8005b9e <strtok+0x26>
 8005b94:	4b10      	ldr	r3, [pc, #64]	; (8005bd8 <strtok+0x60>)
 8005b96:	4811      	ldr	r0, [pc, #68]	; (8005bdc <strtok+0x64>)
 8005b98:	2157      	movs	r1, #87	; 0x57
 8005b9a:	f000 f909 	bl	8005db0 <__assert_func>
 8005b9e:	e9c0 4400 	strd	r4, r4, [r0]
 8005ba2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005ba6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005baa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005bae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005bb2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005bb6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005bba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005bbe:	6184      	str	r4, [r0, #24]
 8005bc0:	7704      	strb	r4, [r0, #28]
 8005bc2:	6244      	str	r4, [r0, #36]	; 0x24
 8005bc4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	4628      	mov	r0, r5
 8005bca:	b002      	add	sp, #8
 8005bcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005bd0:	f000 b806 	b.w	8005be0 <__strtok_r>
 8005bd4:	2000008c 	.word	0x2000008c
 8005bd8:	08008a3a 	.word	0x08008a3a
 8005bdc:	08008a51 	.word	0x08008a51

08005be0 <__strtok_r>:
 8005be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be2:	b908      	cbnz	r0, 8005be8 <__strtok_r+0x8>
 8005be4:	6810      	ldr	r0, [r2, #0]
 8005be6:	b188      	cbz	r0, 8005c0c <__strtok_r+0x2c>
 8005be8:	4604      	mov	r4, r0
 8005bea:	4620      	mov	r0, r4
 8005bec:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005bf0:	460f      	mov	r7, r1
 8005bf2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005bf6:	b91e      	cbnz	r6, 8005c00 <__strtok_r+0x20>
 8005bf8:	b965      	cbnz	r5, 8005c14 <__strtok_r+0x34>
 8005bfa:	6015      	str	r5, [r2, #0]
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	e005      	b.n	8005c0c <__strtok_r+0x2c>
 8005c00:	42b5      	cmp	r5, r6
 8005c02:	d1f6      	bne.n	8005bf2 <__strtok_r+0x12>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1f0      	bne.n	8005bea <__strtok_r+0xa>
 8005c08:	6014      	str	r4, [r2, #0]
 8005c0a:	7003      	strb	r3, [r0, #0]
 8005c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c0e:	461c      	mov	r4, r3
 8005c10:	e00c      	b.n	8005c2c <__strtok_r+0x4c>
 8005c12:	b915      	cbnz	r5, 8005c1a <__strtok_r+0x3a>
 8005c14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005c18:	460e      	mov	r6, r1
 8005c1a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005c1e:	42ab      	cmp	r3, r5
 8005c20:	d1f7      	bne.n	8005c12 <__strtok_r+0x32>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0f3      	beq.n	8005c0e <__strtok_r+0x2e>
 8005c26:	2300      	movs	r3, #0
 8005c28:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005c2c:	6014      	str	r4, [r2, #0]
 8005c2e:	e7ed      	b.n	8005c0c <__strtok_r+0x2c>

08005c30 <__swbuf_r>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	460e      	mov	r6, r1
 8005c34:	4614      	mov	r4, r2
 8005c36:	4605      	mov	r5, r0
 8005c38:	b118      	cbz	r0, 8005c42 <__swbuf_r+0x12>
 8005c3a:	6983      	ldr	r3, [r0, #24]
 8005c3c:	b90b      	cbnz	r3, 8005c42 <__swbuf_r+0x12>
 8005c3e:	f001 f86b 	bl	8006d18 <__sinit>
 8005c42:	4b21      	ldr	r3, [pc, #132]	; (8005cc8 <__swbuf_r+0x98>)
 8005c44:	429c      	cmp	r4, r3
 8005c46:	d12b      	bne.n	8005ca0 <__swbuf_r+0x70>
 8005c48:	686c      	ldr	r4, [r5, #4]
 8005c4a:	69a3      	ldr	r3, [r4, #24]
 8005c4c:	60a3      	str	r3, [r4, #8]
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	071a      	lsls	r2, r3, #28
 8005c52:	d52f      	bpl.n	8005cb4 <__swbuf_r+0x84>
 8005c54:	6923      	ldr	r3, [r4, #16]
 8005c56:	b36b      	cbz	r3, 8005cb4 <__swbuf_r+0x84>
 8005c58:	6923      	ldr	r3, [r4, #16]
 8005c5a:	6820      	ldr	r0, [r4, #0]
 8005c5c:	1ac0      	subs	r0, r0, r3
 8005c5e:	6963      	ldr	r3, [r4, #20]
 8005c60:	b2f6      	uxtb	r6, r6
 8005c62:	4283      	cmp	r3, r0
 8005c64:	4637      	mov	r7, r6
 8005c66:	dc04      	bgt.n	8005c72 <__swbuf_r+0x42>
 8005c68:	4621      	mov	r1, r4
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	f000 ffc0 	bl	8006bf0 <_fflush_r>
 8005c70:	bb30      	cbnz	r0, 8005cc0 <__swbuf_r+0x90>
 8005c72:	68a3      	ldr	r3, [r4, #8]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	60a3      	str	r3, [r4, #8]
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	6022      	str	r2, [r4, #0]
 8005c7e:	701e      	strb	r6, [r3, #0]
 8005c80:	6963      	ldr	r3, [r4, #20]
 8005c82:	3001      	adds	r0, #1
 8005c84:	4283      	cmp	r3, r0
 8005c86:	d004      	beq.n	8005c92 <__swbuf_r+0x62>
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	07db      	lsls	r3, r3, #31
 8005c8c:	d506      	bpl.n	8005c9c <__swbuf_r+0x6c>
 8005c8e:	2e0a      	cmp	r6, #10
 8005c90:	d104      	bne.n	8005c9c <__swbuf_r+0x6c>
 8005c92:	4621      	mov	r1, r4
 8005c94:	4628      	mov	r0, r5
 8005c96:	f000 ffab 	bl	8006bf0 <_fflush_r>
 8005c9a:	b988      	cbnz	r0, 8005cc0 <__swbuf_r+0x90>
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ca0:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <__swbuf_r+0x9c>)
 8005ca2:	429c      	cmp	r4, r3
 8005ca4:	d101      	bne.n	8005caa <__swbuf_r+0x7a>
 8005ca6:	68ac      	ldr	r4, [r5, #8]
 8005ca8:	e7cf      	b.n	8005c4a <__swbuf_r+0x1a>
 8005caa:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <__swbuf_r+0xa0>)
 8005cac:	429c      	cmp	r4, r3
 8005cae:	bf08      	it	eq
 8005cb0:	68ec      	ldreq	r4, [r5, #12]
 8005cb2:	e7ca      	b.n	8005c4a <__swbuf_r+0x1a>
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	f000 f80c 	bl	8005cd4 <__swsetup_r>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d0cb      	beq.n	8005c58 <__swbuf_r+0x28>
 8005cc0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005cc4:	e7ea      	b.n	8005c9c <__swbuf_r+0x6c>
 8005cc6:	bf00      	nop
 8005cc8:	08008b84 	.word	0x08008b84
 8005ccc:	08008ba4 	.word	0x08008ba4
 8005cd0:	08008b64 	.word	0x08008b64

08005cd4 <__swsetup_r>:
 8005cd4:	4b32      	ldr	r3, [pc, #200]	; (8005da0 <__swsetup_r+0xcc>)
 8005cd6:	b570      	push	{r4, r5, r6, lr}
 8005cd8:	681d      	ldr	r5, [r3, #0]
 8005cda:	4606      	mov	r6, r0
 8005cdc:	460c      	mov	r4, r1
 8005cde:	b125      	cbz	r5, 8005cea <__swsetup_r+0x16>
 8005ce0:	69ab      	ldr	r3, [r5, #24]
 8005ce2:	b913      	cbnz	r3, 8005cea <__swsetup_r+0x16>
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	f001 f817 	bl	8006d18 <__sinit>
 8005cea:	4b2e      	ldr	r3, [pc, #184]	; (8005da4 <__swsetup_r+0xd0>)
 8005cec:	429c      	cmp	r4, r3
 8005cee:	d10f      	bne.n	8005d10 <__swsetup_r+0x3c>
 8005cf0:	686c      	ldr	r4, [r5, #4]
 8005cf2:	89a3      	ldrh	r3, [r4, #12]
 8005cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cf8:	0719      	lsls	r1, r3, #28
 8005cfa:	d42c      	bmi.n	8005d56 <__swsetup_r+0x82>
 8005cfc:	06dd      	lsls	r5, r3, #27
 8005cfe:	d411      	bmi.n	8005d24 <__swsetup_r+0x50>
 8005d00:	2309      	movs	r3, #9
 8005d02:	6033      	str	r3, [r6, #0]
 8005d04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d08:	81a3      	strh	r3, [r4, #12]
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d0e:	e03e      	b.n	8005d8e <__swsetup_r+0xba>
 8005d10:	4b25      	ldr	r3, [pc, #148]	; (8005da8 <__swsetup_r+0xd4>)
 8005d12:	429c      	cmp	r4, r3
 8005d14:	d101      	bne.n	8005d1a <__swsetup_r+0x46>
 8005d16:	68ac      	ldr	r4, [r5, #8]
 8005d18:	e7eb      	b.n	8005cf2 <__swsetup_r+0x1e>
 8005d1a:	4b24      	ldr	r3, [pc, #144]	; (8005dac <__swsetup_r+0xd8>)
 8005d1c:	429c      	cmp	r4, r3
 8005d1e:	bf08      	it	eq
 8005d20:	68ec      	ldreq	r4, [r5, #12]
 8005d22:	e7e6      	b.n	8005cf2 <__swsetup_r+0x1e>
 8005d24:	0758      	lsls	r0, r3, #29
 8005d26:	d512      	bpl.n	8005d4e <__swsetup_r+0x7a>
 8005d28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d2a:	b141      	cbz	r1, 8005d3e <__swsetup_r+0x6a>
 8005d2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d30:	4299      	cmp	r1, r3
 8005d32:	d002      	beq.n	8005d3a <__swsetup_r+0x66>
 8005d34:	4630      	mov	r0, r6
 8005d36:	f001 fcad 	bl	8007694 <_free_r>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d44:	81a3      	strh	r3, [r4, #12]
 8005d46:	2300      	movs	r3, #0
 8005d48:	6063      	str	r3, [r4, #4]
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	f043 0308 	orr.w	r3, r3, #8
 8005d54:	81a3      	strh	r3, [r4, #12]
 8005d56:	6923      	ldr	r3, [r4, #16]
 8005d58:	b94b      	cbnz	r3, 8005d6e <__swsetup_r+0x9a>
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d64:	d003      	beq.n	8005d6e <__swsetup_r+0x9a>
 8005d66:	4621      	mov	r1, r4
 8005d68:	4630      	mov	r0, r6
 8005d6a:	f001 f8b1 	bl	8006ed0 <__smakebuf_r>
 8005d6e:	89a0      	ldrh	r0, [r4, #12]
 8005d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d74:	f010 0301 	ands.w	r3, r0, #1
 8005d78:	d00a      	beq.n	8005d90 <__swsetup_r+0xbc>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60a3      	str	r3, [r4, #8]
 8005d7e:	6963      	ldr	r3, [r4, #20]
 8005d80:	425b      	negs	r3, r3
 8005d82:	61a3      	str	r3, [r4, #24]
 8005d84:	6923      	ldr	r3, [r4, #16]
 8005d86:	b943      	cbnz	r3, 8005d9a <__swsetup_r+0xc6>
 8005d88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d8c:	d1ba      	bne.n	8005d04 <__swsetup_r+0x30>
 8005d8e:	bd70      	pop	{r4, r5, r6, pc}
 8005d90:	0781      	lsls	r1, r0, #30
 8005d92:	bf58      	it	pl
 8005d94:	6963      	ldrpl	r3, [r4, #20]
 8005d96:	60a3      	str	r3, [r4, #8]
 8005d98:	e7f4      	b.n	8005d84 <__swsetup_r+0xb0>
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	e7f7      	b.n	8005d8e <__swsetup_r+0xba>
 8005d9e:	bf00      	nop
 8005da0:	2000008c 	.word	0x2000008c
 8005da4:	08008b84 	.word	0x08008b84
 8005da8:	08008ba4 	.word	0x08008ba4
 8005dac:	08008b64 	.word	0x08008b64

08005db0 <__assert_func>:
 8005db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005db2:	4614      	mov	r4, r2
 8005db4:	461a      	mov	r2, r3
 8005db6:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <__assert_func+0x2c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4605      	mov	r5, r0
 8005dbc:	68d8      	ldr	r0, [r3, #12]
 8005dbe:	b14c      	cbz	r4, 8005dd4 <__assert_func+0x24>
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <__assert_func+0x30>)
 8005dc2:	9100      	str	r1, [sp, #0]
 8005dc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005dc8:	4906      	ldr	r1, [pc, #24]	; (8005de4 <__assert_func+0x34>)
 8005dca:	462b      	mov	r3, r5
 8005dcc:	f001 f822 	bl	8006e14 <fiprintf>
 8005dd0:	f002 f85c 	bl	8007e8c <abort>
 8005dd4:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <__assert_func+0x38>)
 8005dd6:	461c      	mov	r4, r3
 8005dd8:	e7f3      	b.n	8005dc2 <__assert_func+0x12>
 8005dda:	bf00      	nop
 8005ddc:	2000008c 	.word	0x2000008c
 8005de0:	08008aae 	.word	0x08008aae
 8005de4:	08008abb 	.word	0x08008abb
 8005de8:	08008891 	.word	0x08008891

08005dec <quorem>:
 8005dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df0:	6903      	ldr	r3, [r0, #16]
 8005df2:	690c      	ldr	r4, [r1, #16]
 8005df4:	42a3      	cmp	r3, r4
 8005df6:	4607      	mov	r7, r0
 8005df8:	f2c0 8081 	blt.w	8005efe <quorem+0x112>
 8005dfc:	3c01      	subs	r4, #1
 8005dfe:	f101 0814 	add.w	r8, r1, #20
 8005e02:	f100 0514 	add.w	r5, r0, #20
 8005e06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e14:	3301      	adds	r3, #1
 8005e16:	429a      	cmp	r2, r3
 8005e18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e20:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e24:	d331      	bcc.n	8005e8a <quorem+0x9e>
 8005e26:	f04f 0e00 	mov.w	lr, #0
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	46ac      	mov	ip, r5
 8005e2e:	46f2      	mov	sl, lr
 8005e30:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e34:	b293      	uxth	r3, r2
 8005e36:	fb06 e303 	mla	r3, r6, r3, lr
 8005e3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	ebaa 0303 	sub.w	r3, sl, r3
 8005e44:	f8dc a000 	ldr.w	sl, [ip]
 8005e48:	0c12      	lsrs	r2, r2, #16
 8005e4a:	fa13 f38a 	uxtah	r3, r3, sl
 8005e4e:	fb06 e202 	mla	r2, r6, r2, lr
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	9b00      	ldr	r3, [sp, #0]
 8005e56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e5a:	b292      	uxth	r2, r2
 8005e5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e64:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e68:	4581      	cmp	r9, r0
 8005e6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e6e:	f84c 3b04 	str.w	r3, [ip], #4
 8005e72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e76:	d2db      	bcs.n	8005e30 <quorem+0x44>
 8005e78:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e7c:	b92b      	cbnz	r3, 8005e8a <quorem+0x9e>
 8005e7e:	9b01      	ldr	r3, [sp, #4]
 8005e80:	3b04      	subs	r3, #4
 8005e82:	429d      	cmp	r5, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	d32e      	bcc.n	8005ee6 <quorem+0xfa>
 8005e88:	613c      	str	r4, [r7, #16]
 8005e8a:	4638      	mov	r0, r7
 8005e8c:	f001 faea 	bl	8007464 <__mcmp>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	db24      	blt.n	8005ede <quorem+0xf2>
 8005e94:	3601      	adds	r6, #1
 8005e96:	4628      	mov	r0, r5
 8005e98:	f04f 0c00 	mov.w	ip, #0
 8005e9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ea0:	f8d0 e000 	ldr.w	lr, [r0]
 8005ea4:	b293      	uxth	r3, r2
 8005ea6:	ebac 0303 	sub.w	r3, ip, r3
 8005eaa:	0c12      	lsrs	r2, r2, #16
 8005eac:	fa13 f38e 	uxtah	r3, r3, lr
 8005eb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005eb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ebe:	45c1      	cmp	r9, r8
 8005ec0:	f840 3b04 	str.w	r3, [r0], #4
 8005ec4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ec8:	d2e8      	bcs.n	8005e9c <quorem+0xb0>
 8005eca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ece:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ed2:	b922      	cbnz	r2, 8005ede <quorem+0xf2>
 8005ed4:	3b04      	subs	r3, #4
 8005ed6:	429d      	cmp	r5, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	d30a      	bcc.n	8005ef2 <quorem+0x106>
 8005edc:	613c      	str	r4, [r7, #16]
 8005ede:	4630      	mov	r0, r6
 8005ee0:	b003      	add	sp, #12
 8005ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ee6:	6812      	ldr	r2, [r2, #0]
 8005ee8:	3b04      	subs	r3, #4
 8005eea:	2a00      	cmp	r2, #0
 8005eec:	d1cc      	bne.n	8005e88 <quorem+0x9c>
 8005eee:	3c01      	subs	r4, #1
 8005ef0:	e7c7      	b.n	8005e82 <quorem+0x96>
 8005ef2:	6812      	ldr	r2, [r2, #0]
 8005ef4:	3b04      	subs	r3, #4
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	d1f0      	bne.n	8005edc <quorem+0xf0>
 8005efa:	3c01      	subs	r4, #1
 8005efc:	e7eb      	b.n	8005ed6 <quorem+0xea>
 8005efe:	2000      	movs	r0, #0
 8005f00:	e7ee      	b.n	8005ee0 <quorem+0xf4>
 8005f02:	0000      	movs	r0, r0
 8005f04:	0000      	movs	r0, r0
	...

08005f08 <_dtoa_r>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	ed2d 8b04 	vpush	{d8-d9}
 8005f10:	ec57 6b10 	vmov	r6, r7, d0
 8005f14:	b093      	sub	sp, #76	; 0x4c
 8005f16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f1c:	9106      	str	r1, [sp, #24]
 8005f1e:	ee10 aa10 	vmov	sl, s0
 8005f22:	4604      	mov	r4, r0
 8005f24:	9209      	str	r2, [sp, #36]	; 0x24
 8005f26:	930c      	str	r3, [sp, #48]	; 0x30
 8005f28:	46bb      	mov	fp, r7
 8005f2a:	b975      	cbnz	r5, 8005f4a <_dtoa_r+0x42>
 8005f2c:	2010      	movs	r0, #16
 8005f2e:	f001 f80f 	bl	8006f50 <malloc>
 8005f32:	4602      	mov	r2, r0
 8005f34:	6260      	str	r0, [r4, #36]	; 0x24
 8005f36:	b920      	cbnz	r0, 8005f42 <_dtoa_r+0x3a>
 8005f38:	4ba7      	ldr	r3, [pc, #668]	; (80061d8 <_dtoa_r+0x2d0>)
 8005f3a:	21ea      	movs	r1, #234	; 0xea
 8005f3c:	48a7      	ldr	r0, [pc, #668]	; (80061dc <_dtoa_r+0x2d4>)
 8005f3e:	f7ff ff37 	bl	8005db0 <__assert_func>
 8005f42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f46:	6005      	str	r5, [r0, #0]
 8005f48:	60c5      	str	r5, [r0, #12]
 8005f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f4c:	6819      	ldr	r1, [r3, #0]
 8005f4e:	b151      	cbz	r1, 8005f66 <_dtoa_r+0x5e>
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	604a      	str	r2, [r1, #4]
 8005f54:	2301      	movs	r3, #1
 8005f56:	4093      	lsls	r3, r2
 8005f58:	608b      	str	r3, [r1, #8]
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f001 f840 	bl	8006fe0 <_Bfree>
 8005f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f62:	2200      	movs	r2, #0
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	1e3b      	subs	r3, r7, #0
 8005f68:	bfaa      	itet	ge
 8005f6a:	2300      	movge	r3, #0
 8005f6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005f70:	f8c8 3000 	strge.w	r3, [r8]
 8005f74:	4b9a      	ldr	r3, [pc, #616]	; (80061e0 <_dtoa_r+0x2d8>)
 8005f76:	bfbc      	itt	lt
 8005f78:	2201      	movlt	r2, #1
 8005f7a:	f8c8 2000 	strlt.w	r2, [r8]
 8005f7e:	ea33 030b 	bics.w	r3, r3, fp
 8005f82:	d11b      	bne.n	8005fbc <_dtoa_r+0xb4>
 8005f84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f86:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f90:	4333      	orrs	r3, r6
 8005f92:	f000 8592 	beq.w	8006aba <_dtoa_r+0xbb2>
 8005f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f98:	b963      	cbnz	r3, 8005fb4 <_dtoa_r+0xac>
 8005f9a:	4b92      	ldr	r3, [pc, #584]	; (80061e4 <_dtoa_r+0x2dc>)
 8005f9c:	e022      	b.n	8005fe4 <_dtoa_r+0xdc>
 8005f9e:	4b92      	ldr	r3, [pc, #584]	; (80061e8 <_dtoa_r+0x2e0>)
 8005fa0:	9301      	str	r3, [sp, #4]
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	9801      	ldr	r0, [sp, #4]
 8005faa:	b013      	add	sp, #76	; 0x4c
 8005fac:	ecbd 8b04 	vpop	{d8-d9}
 8005fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb4:	4b8b      	ldr	r3, [pc, #556]	; (80061e4 <_dtoa_r+0x2dc>)
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	3303      	adds	r3, #3
 8005fba:	e7f3      	b.n	8005fa4 <_dtoa_r+0x9c>
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	f7fa fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fc8:	ec4b ab19 	vmov	d9, sl, fp
 8005fcc:	4680      	mov	r8, r0
 8005fce:	b158      	cbz	r0, 8005fe8 <_dtoa_r+0xe0>
 8005fd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 856b 	beq.w	8006ab4 <_dtoa_r+0xbac>
 8005fde:	4883      	ldr	r0, [pc, #524]	; (80061ec <_dtoa_r+0x2e4>)
 8005fe0:	6018      	str	r0, [r3, #0]
 8005fe2:	1e43      	subs	r3, r0, #1
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	e7df      	b.n	8005fa8 <_dtoa_r+0xa0>
 8005fe8:	ec4b ab10 	vmov	d0, sl, fp
 8005fec:	aa10      	add	r2, sp, #64	; 0x40
 8005fee:	a911      	add	r1, sp, #68	; 0x44
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f001 fadd 	bl	80075b0 <__d2b>
 8005ff6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005ffa:	ee08 0a10 	vmov	s16, r0
 8005ffe:	2d00      	cmp	r5, #0
 8006000:	f000 8084 	beq.w	800610c <_dtoa_r+0x204>
 8006004:	ee19 3a90 	vmov	r3, s19
 8006008:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800600c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006010:	4656      	mov	r6, sl
 8006012:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006016:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800601a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800601e:	4b74      	ldr	r3, [pc, #464]	; (80061f0 <_dtoa_r+0x2e8>)
 8006020:	2200      	movs	r2, #0
 8006022:	4630      	mov	r0, r6
 8006024:	4639      	mov	r1, r7
 8006026:	f7fa f92f 	bl	8000288 <__aeabi_dsub>
 800602a:	a365      	add	r3, pc, #404	; (adr r3, 80061c0 <_dtoa_r+0x2b8>)
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f7fa fae2 	bl	80005f8 <__aeabi_dmul>
 8006034:	a364      	add	r3, pc, #400	; (adr r3, 80061c8 <_dtoa_r+0x2c0>)
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f7fa f927 	bl	800028c <__adddf3>
 800603e:	4606      	mov	r6, r0
 8006040:	4628      	mov	r0, r5
 8006042:	460f      	mov	r7, r1
 8006044:	f7fa fa6e 	bl	8000524 <__aeabi_i2d>
 8006048:	a361      	add	r3, pc, #388	; (adr r3, 80061d0 <_dtoa_r+0x2c8>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa fad3 	bl	80005f8 <__aeabi_dmul>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4630      	mov	r0, r6
 8006058:	4639      	mov	r1, r7
 800605a:	f7fa f917 	bl	800028c <__adddf3>
 800605e:	4606      	mov	r6, r0
 8006060:	460f      	mov	r7, r1
 8006062:	f7fa fd79 	bl	8000b58 <__aeabi_d2iz>
 8006066:	2200      	movs	r2, #0
 8006068:	9000      	str	r0, [sp, #0]
 800606a:	2300      	movs	r3, #0
 800606c:	4630      	mov	r0, r6
 800606e:	4639      	mov	r1, r7
 8006070:	f7fa fd34 	bl	8000adc <__aeabi_dcmplt>
 8006074:	b150      	cbz	r0, 800608c <_dtoa_r+0x184>
 8006076:	9800      	ldr	r0, [sp, #0]
 8006078:	f7fa fa54 	bl	8000524 <__aeabi_i2d>
 800607c:	4632      	mov	r2, r6
 800607e:	463b      	mov	r3, r7
 8006080:	f7fa fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 8006084:	b910      	cbnz	r0, 800608c <_dtoa_r+0x184>
 8006086:	9b00      	ldr	r3, [sp, #0]
 8006088:	3b01      	subs	r3, #1
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	9b00      	ldr	r3, [sp, #0]
 800608e:	2b16      	cmp	r3, #22
 8006090:	d85a      	bhi.n	8006148 <_dtoa_r+0x240>
 8006092:	9a00      	ldr	r2, [sp, #0]
 8006094:	4b57      	ldr	r3, [pc, #348]	; (80061f4 <_dtoa_r+0x2ec>)
 8006096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	ec51 0b19 	vmov	r0, r1, d9
 80060a2:	f7fa fd1b 	bl	8000adc <__aeabi_dcmplt>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d050      	beq.n	800614c <_dtoa_r+0x244>
 80060aa:	9b00      	ldr	r3, [sp, #0]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	2300      	movs	r3, #0
 80060b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80060b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060b6:	1b5d      	subs	r5, r3, r5
 80060b8:	1e6b      	subs	r3, r5, #1
 80060ba:	9305      	str	r3, [sp, #20]
 80060bc:	bf45      	ittet	mi
 80060be:	f1c5 0301 	rsbmi	r3, r5, #1
 80060c2:	9304      	strmi	r3, [sp, #16]
 80060c4:	2300      	movpl	r3, #0
 80060c6:	2300      	movmi	r3, #0
 80060c8:	bf4c      	ite	mi
 80060ca:	9305      	strmi	r3, [sp, #20]
 80060cc:	9304      	strpl	r3, [sp, #16]
 80060ce:	9b00      	ldr	r3, [sp, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	db3d      	blt.n	8006150 <_dtoa_r+0x248>
 80060d4:	9b05      	ldr	r3, [sp, #20]
 80060d6:	9a00      	ldr	r2, [sp, #0]
 80060d8:	920a      	str	r2, [sp, #40]	; 0x28
 80060da:	4413      	add	r3, r2
 80060dc:	9305      	str	r3, [sp, #20]
 80060de:	2300      	movs	r3, #0
 80060e0:	9307      	str	r3, [sp, #28]
 80060e2:	9b06      	ldr	r3, [sp, #24]
 80060e4:	2b09      	cmp	r3, #9
 80060e6:	f200 8089 	bhi.w	80061fc <_dtoa_r+0x2f4>
 80060ea:	2b05      	cmp	r3, #5
 80060ec:	bfc4      	itt	gt
 80060ee:	3b04      	subgt	r3, #4
 80060f0:	9306      	strgt	r3, [sp, #24]
 80060f2:	9b06      	ldr	r3, [sp, #24]
 80060f4:	f1a3 0302 	sub.w	r3, r3, #2
 80060f8:	bfcc      	ite	gt
 80060fa:	2500      	movgt	r5, #0
 80060fc:	2501      	movle	r5, #1
 80060fe:	2b03      	cmp	r3, #3
 8006100:	f200 8087 	bhi.w	8006212 <_dtoa_r+0x30a>
 8006104:	e8df f003 	tbb	[pc, r3]
 8006108:	59383a2d 	.word	0x59383a2d
 800610c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006110:	441d      	add	r5, r3
 8006112:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006116:	2b20      	cmp	r3, #32
 8006118:	bfc1      	itttt	gt
 800611a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800611e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006122:	fa0b f303 	lslgt.w	r3, fp, r3
 8006126:	fa26 f000 	lsrgt.w	r0, r6, r0
 800612a:	bfda      	itte	le
 800612c:	f1c3 0320 	rsble	r3, r3, #32
 8006130:	fa06 f003 	lslle.w	r0, r6, r3
 8006134:	4318      	orrgt	r0, r3
 8006136:	f7fa f9e5 	bl	8000504 <__aeabi_ui2d>
 800613a:	2301      	movs	r3, #1
 800613c:	4606      	mov	r6, r0
 800613e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006142:	3d01      	subs	r5, #1
 8006144:	930e      	str	r3, [sp, #56]	; 0x38
 8006146:	e76a      	b.n	800601e <_dtoa_r+0x116>
 8006148:	2301      	movs	r3, #1
 800614a:	e7b2      	b.n	80060b2 <_dtoa_r+0x1aa>
 800614c:	900b      	str	r0, [sp, #44]	; 0x2c
 800614e:	e7b1      	b.n	80060b4 <_dtoa_r+0x1ac>
 8006150:	9b04      	ldr	r3, [sp, #16]
 8006152:	9a00      	ldr	r2, [sp, #0]
 8006154:	1a9b      	subs	r3, r3, r2
 8006156:	9304      	str	r3, [sp, #16]
 8006158:	4253      	negs	r3, r2
 800615a:	9307      	str	r3, [sp, #28]
 800615c:	2300      	movs	r3, #0
 800615e:	930a      	str	r3, [sp, #40]	; 0x28
 8006160:	e7bf      	b.n	80060e2 <_dtoa_r+0x1da>
 8006162:	2300      	movs	r3, #0
 8006164:	9308      	str	r3, [sp, #32]
 8006166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	dc55      	bgt.n	8006218 <_dtoa_r+0x310>
 800616c:	2301      	movs	r3, #1
 800616e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006172:	461a      	mov	r2, r3
 8006174:	9209      	str	r2, [sp, #36]	; 0x24
 8006176:	e00c      	b.n	8006192 <_dtoa_r+0x28a>
 8006178:	2301      	movs	r3, #1
 800617a:	e7f3      	b.n	8006164 <_dtoa_r+0x25c>
 800617c:	2300      	movs	r3, #0
 800617e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006180:	9308      	str	r3, [sp, #32]
 8006182:	9b00      	ldr	r3, [sp, #0]
 8006184:	4413      	add	r3, r2
 8006186:	9302      	str	r3, [sp, #8]
 8006188:	3301      	adds	r3, #1
 800618a:	2b01      	cmp	r3, #1
 800618c:	9303      	str	r3, [sp, #12]
 800618e:	bfb8      	it	lt
 8006190:	2301      	movlt	r3, #1
 8006192:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006194:	2200      	movs	r2, #0
 8006196:	6042      	str	r2, [r0, #4]
 8006198:	2204      	movs	r2, #4
 800619a:	f102 0614 	add.w	r6, r2, #20
 800619e:	429e      	cmp	r6, r3
 80061a0:	6841      	ldr	r1, [r0, #4]
 80061a2:	d93d      	bls.n	8006220 <_dtoa_r+0x318>
 80061a4:	4620      	mov	r0, r4
 80061a6:	f000 fedb 	bl	8006f60 <_Balloc>
 80061aa:	9001      	str	r0, [sp, #4]
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d13b      	bne.n	8006228 <_dtoa_r+0x320>
 80061b0:	4b11      	ldr	r3, [pc, #68]	; (80061f8 <_dtoa_r+0x2f0>)
 80061b2:	4602      	mov	r2, r0
 80061b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061b8:	e6c0      	b.n	8005f3c <_dtoa_r+0x34>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e7df      	b.n	800617e <_dtoa_r+0x276>
 80061be:	bf00      	nop
 80061c0:	636f4361 	.word	0x636f4361
 80061c4:	3fd287a7 	.word	0x3fd287a7
 80061c8:	8b60c8b3 	.word	0x8b60c8b3
 80061cc:	3fc68a28 	.word	0x3fc68a28
 80061d0:	509f79fb 	.word	0x509f79fb
 80061d4:	3fd34413 	.word	0x3fd34413
 80061d8:	08008a3a 	.word	0x08008a3a
 80061dc:	08008af7 	.word	0x08008af7
 80061e0:	7ff00000 	.word	0x7ff00000
 80061e4:	08008af3 	.word	0x08008af3
 80061e8:	08008aea 	.word	0x08008aea
 80061ec:	08008392 	.word	0x08008392
 80061f0:	3ff80000 	.word	0x3ff80000
 80061f4:	08008c48 	.word	0x08008c48
 80061f8:	08008b52 	.word	0x08008b52
 80061fc:	2501      	movs	r5, #1
 80061fe:	2300      	movs	r3, #0
 8006200:	9306      	str	r3, [sp, #24]
 8006202:	9508      	str	r5, [sp, #32]
 8006204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006208:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800620c:	2200      	movs	r2, #0
 800620e:	2312      	movs	r3, #18
 8006210:	e7b0      	b.n	8006174 <_dtoa_r+0x26c>
 8006212:	2301      	movs	r3, #1
 8006214:	9308      	str	r3, [sp, #32]
 8006216:	e7f5      	b.n	8006204 <_dtoa_r+0x2fc>
 8006218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800621a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800621e:	e7b8      	b.n	8006192 <_dtoa_r+0x28a>
 8006220:	3101      	adds	r1, #1
 8006222:	6041      	str	r1, [r0, #4]
 8006224:	0052      	lsls	r2, r2, #1
 8006226:	e7b8      	b.n	800619a <_dtoa_r+0x292>
 8006228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800622a:	9a01      	ldr	r2, [sp, #4]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	9b03      	ldr	r3, [sp, #12]
 8006230:	2b0e      	cmp	r3, #14
 8006232:	f200 809d 	bhi.w	8006370 <_dtoa_r+0x468>
 8006236:	2d00      	cmp	r5, #0
 8006238:	f000 809a 	beq.w	8006370 <_dtoa_r+0x468>
 800623c:	9b00      	ldr	r3, [sp, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	dd32      	ble.n	80062a8 <_dtoa_r+0x3a0>
 8006242:	4ab7      	ldr	r2, [pc, #732]	; (8006520 <_dtoa_r+0x618>)
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800624c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006250:	9b00      	ldr	r3, [sp, #0]
 8006252:	05d8      	lsls	r0, r3, #23
 8006254:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006258:	d516      	bpl.n	8006288 <_dtoa_r+0x380>
 800625a:	4bb2      	ldr	r3, [pc, #712]	; (8006524 <_dtoa_r+0x61c>)
 800625c:	ec51 0b19 	vmov	r0, r1, d9
 8006260:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006264:	f7fa faf2 	bl	800084c <__aeabi_ddiv>
 8006268:	f007 070f 	and.w	r7, r7, #15
 800626c:	4682      	mov	sl, r0
 800626e:	468b      	mov	fp, r1
 8006270:	2503      	movs	r5, #3
 8006272:	4eac      	ldr	r6, [pc, #688]	; (8006524 <_dtoa_r+0x61c>)
 8006274:	b957      	cbnz	r7, 800628c <_dtoa_r+0x384>
 8006276:	4642      	mov	r2, r8
 8006278:	464b      	mov	r3, r9
 800627a:	4650      	mov	r0, sl
 800627c:	4659      	mov	r1, fp
 800627e:	f7fa fae5 	bl	800084c <__aeabi_ddiv>
 8006282:	4682      	mov	sl, r0
 8006284:	468b      	mov	fp, r1
 8006286:	e028      	b.n	80062da <_dtoa_r+0x3d2>
 8006288:	2502      	movs	r5, #2
 800628a:	e7f2      	b.n	8006272 <_dtoa_r+0x36a>
 800628c:	07f9      	lsls	r1, r7, #31
 800628e:	d508      	bpl.n	80062a2 <_dtoa_r+0x39a>
 8006290:	4640      	mov	r0, r8
 8006292:	4649      	mov	r1, r9
 8006294:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006298:	f7fa f9ae 	bl	80005f8 <__aeabi_dmul>
 800629c:	3501      	adds	r5, #1
 800629e:	4680      	mov	r8, r0
 80062a0:	4689      	mov	r9, r1
 80062a2:	107f      	asrs	r7, r7, #1
 80062a4:	3608      	adds	r6, #8
 80062a6:	e7e5      	b.n	8006274 <_dtoa_r+0x36c>
 80062a8:	f000 809b 	beq.w	80063e2 <_dtoa_r+0x4da>
 80062ac:	9b00      	ldr	r3, [sp, #0]
 80062ae:	4f9d      	ldr	r7, [pc, #628]	; (8006524 <_dtoa_r+0x61c>)
 80062b0:	425e      	negs	r6, r3
 80062b2:	4b9b      	ldr	r3, [pc, #620]	; (8006520 <_dtoa_r+0x618>)
 80062b4:	f006 020f 	and.w	r2, r6, #15
 80062b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	ec51 0b19 	vmov	r0, r1, d9
 80062c4:	f7fa f998 	bl	80005f8 <__aeabi_dmul>
 80062c8:	1136      	asrs	r6, r6, #4
 80062ca:	4682      	mov	sl, r0
 80062cc:	468b      	mov	fp, r1
 80062ce:	2300      	movs	r3, #0
 80062d0:	2502      	movs	r5, #2
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	d17a      	bne.n	80063cc <_dtoa_r+0x4c4>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1d3      	bne.n	8006282 <_dtoa_r+0x37a>
 80062da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 8082 	beq.w	80063e6 <_dtoa_r+0x4de>
 80062e2:	4b91      	ldr	r3, [pc, #580]	; (8006528 <_dtoa_r+0x620>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	4650      	mov	r0, sl
 80062e8:	4659      	mov	r1, fp
 80062ea:	f7fa fbf7 	bl	8000adc <__aeabi_dcmplt>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d079      	beq.n	80063e6 <_dtoa_r+0x4de>
 80062f2:	9b03      	ldr	r3, [sp, #12]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d076      	beq.n	80063e6 <_dtoa_r+0x4de>
 80062f8:	9b02      	ldr	r3, [sp, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dd36      	ble.n	800636c <_dtoa_r+0x464>
 80062fe:	9b00      	ldr	r3, [sp, #0]
 8006300:	4650      	mov	r0, sl
 8006302:	4659      	mov	r1, fp
 8006304:	1e5f      	subs	r7, r3, #1
 8006306:	2200      	movs	r2, #0
 8006308:	4b88      	ldr	r3, [pc, #544]	; (800652c <_dtoa_r+0x624>)
 800630a:	f7fa f975 	bl	80005f8 <__aeabi_dmul>
 800630e:	9e02      	ldr	r6, [sp, #8]
 8006310:	4682      	mov	sl, r0
 8006312:	468b      	mov	fp, r1
 8006314:	3501      	adds	r5, #1
 8006316:	4628      	mov	r0, r5
 8006318:	f7fa f904 	bl	8000524 <__aeabi_i2d>
 800631c:	4652      	mov	r2, sl
 800631e:	465b      	mov	r3, fp
 8006320:	f7fa f96a 	bl	80005f8 <__aeabi_dmul>
 8006324:	4b82      	ldr	r3, [pc, #520]	; (8006530 <_dtoa_r+0x628>)
 8006326:	2200      	movs	r2, #0
 8006328:	f7f9 ffb0 	bl	800028c <__adddf3>
 800632c:	46d0      	mov	r8, sl
 800632e:	46d9      	mov	r9, fp
 8006330:	4682      	mov	sl, r0
 8006332:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006336:	2e00      	cmp	r6, #0
 8006338:	d158      	bne.n	80063ec <_dtoa_r+0x4e4>
 800633a:	4b7e      	ldr	r3, [pc, #504]	; (8006534 <_dtoa_r+0x62c>)
 800633c:	2200      	movs	r2, #0
 800633e:	4640      	mov	r0, r8
 8006340:	4649      	mov	r1, r9
 8006342:	f7f9 ffa1 	bl	8000288 <__aeabi_dsub>
 8006346:	4652      	mov	r2, sl
 8006348:	465b      	mov	r3, fp
 800634a:	4680      	mov	r8, r0
 800634c:	4689      	mov	r9, r1
 800634e:	f7fa fbe3 	bl	8000b18 <__aeabi_dcmpgt>
 8006352:	2800      	cmp	r0, #0
 8006354:	f040 8295 	bne.w	8006882 <_dtoa_r+0x97a>
 8006358:	4652      	mov	r2, sl
 800635a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800635e:	4640      	mov	r0, r8
 8006360:	4649      	mov	r1, r9
 8006362:	f7fa fbbb 	bl	8000adc <__aeabi_dcmplt>
 8006366:	2800      	cmp	r0, #0
 8006368:	f040 8289 	bne.w	800687e <_dtoa_r+0x976>
 800636c:	ec5b ab19 	vmov	sl, fp, d9
 8006370:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006372:	2b00      	cmp	r3, #0
 8006374:	f2c0 8148 	blt.w	8006608 <_dtoa_r+0x700>
 8006378:	9a00      	ldr	r2, [sp, #0]
 800637a:	2a0e      	cmp	r2, #14
 800637c:	f300 8144 	bgt.w	8006608 <_dtoa_r+0x700>
 8006380:	4b67      	ldr	r3, [pc, #412]	; (8006520 <_dtoa_r+0x618>)
 8006382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006386:	e9d3 8900 	ldrd	r8, r9, [r3]
 800638a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638c:	2b00      	cmp	r3, #0
 800638e:	f280 80d5 	bge.w	800653c <_dtoa_r+0x634>
 8006392:	9b03      	ldr	r3, [sp, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f300 80d1 	bgt.w	800653c <_dtoa_r+0x634>
 800639a:	f040 826f 	bne.w	800687c <_dtoa_r+0x974>
 800639e:	4b65      	ldr	r3, [pc, #404]	; (8006534 <_dtoa_r+0x62c>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	4640      	mov	r0, r8
 80063a4:	4649      	mov	r1, r9
 80063a6:	f7fa f927 	bl	80005f8 <__aeabi_dmul>
 80063aa:	4652      	mov	r2, sl
 80063ac:	465b      	mov	r3, fp
 80063ae:	f7fa fba9 	bl	8000b04 <__aeabi_dcmpge>
 80063b2:	9e03      	ldr	r6, [sp, #12]
 80063b4:	4637      	mov	r7, r6
 80063b6:	2800      	cmp	r0, #0
 80063b8:	f040 8245 	bne.w	8006846 <_dtoa_r+0x93e>
 80063bc:	9d01      	ldr	r5, [sp, #4]
 80063be:	2331      	movs	r3, #49	; 0x31
 80063c0:	f805 3b01 	strb.w	r3, [r5], #1
 80063c4:	9b00      	ldr	r3, [sp, #0]
 80063c6:	3301      	adds	r3, #1
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	e240      	b.n	800684e <_dtoa_r+0x946>
 80063cc:	07f2      	lsls	r2, r6, #31
 80063ce:	d505      	bpl.n	80063dc <_dtoa_r+0x4d4>
 80063d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d4:	f7fa f910 	bl	80005f8 <__aeabi_dmul>
 80063d8:	3501      	adds	r5, #1
 80063da:	2301      	movs	r3, #1
 80063dc:	1076      	asrs	r6, r6, #1
 80063de:	3708      	adds	r7, #8
 80063e0:	e777      	b.n	80062d2 <_dtoa_r+0x3ca>
 80063e2:	2502      	movs	r5, #2
 80063e4:	e779      	b.n	80062da <_dtoa_r+0x3d2>
 80063e6:	9f00      	ldr	r7, [sp, #0]
 80063e8:	9e03      	ldr	r6, [sp, #12]
 80063ea:	e794      	b.n	8006316 <_dtoa_r+0x40e>
 80063ec:	9901      	ldr	r1, [sp, #4]
 80063ee:	4b4c      	ldr	r3, [pc, #304]	; (8006520 <_dtoa_r+0x618>)
 80063f0:	4431      	add	r1, r6
 80063f2:	910d      	str	r1, [sp, #52]	; 0x34
 80063f4:	9908      	ldr	r1, [sp, #32]
 80063f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80063fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80063fe:	2900      	cmp	r1, #0
 8006400:	d043      	beq.n	800648a <_dtoa_r+0x582>
 8006402:	494d      	ldr	r1, [pc, #308]	; (8006538 <_dtoa_r+0x630>)
 8006404:	2000      	movs	r0, #0
 8006406:	f7fa fa21 	bl	800084c <__aeabi_ddiv>
 800640a:	4652      	mov	r2, sl
 800640c:	465b      	mov	r3, fp
 800640e:	f7f9 ff3b 	bl	8000288 <__aeabi_dsub>
 8006412:	9d01      	ldr	r5, [sp, #4]
 8006414:	4682      	mov	sl, r0
 8006416:	468b      	mov	fp, r1
 8006418:	4649      	mov	r1, r9
 800641a:	4640      	mov	r0, r8
 800641c:	f7fa fb9c 	bl	8000b58 <__aeabi_d2iz>
 8006420:	4606      	mov	r6, r0
 8006422:	f7fa f87f 	bl	8000524 <__aeabi_i2d>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4640      	mov	r0, r8
 800642c:	4649      	mov	r1, r9
 800642e:	f7f9 ff2b 	bl	8000288 <__aeabi_dsub>
 8006432:	3630      	adds	r6, #48	; 0x30
 8006434:	f805 6b01 	strb.w	r6, [r5], #1
 8006438:	4652      	mov	r2, sl
 800643a:	465b      	mov	r3, fp
 800643c:	4680      	mov	r8, r0
 800643e:	4689      	mov	r9, r1
 8006440:	f7fa fb4c 	bl	8000adc <__aeabi_dcmplt>
 8006444:	2800      	cmp	r0, #0
 8006446:	d163      	bne.n	8006510 <_dtoa_r+0x608>
 8006448:	4642      	mov	r2, r8
 800644a:	464b      	mov	r3, r9
 800644c:	4936      	ldr	r1, [pc, #216]	; (8006528 <_dtoa_r+0x620>)
 800644e:	2000      	movs	r0, #0
 8006450:	f7f9 ff1a 	bl	8000288 <__aeabi_dsub>
 8006454:	4652      	mov	r2, sl
 8006456:	465b      	mov	r3, fp
 8006458:	f7fa fb40 	bl	8000adc <__aeabi_dcmplt>
 800645c:	2800      	cmp	r0, #0
 800645e:	f040 80b5 	bne.w	80065cc <_dtoa_r+0x6c4>
 8006462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006464:	429d      	cmp	r5, r3
 8006466:	d081      	beq.n	800636c <_dtoa_r+0x464>
 8006468:	4b30      	ldr	r3, [pc, #192]	; (800652c <_dtoa_r+0x624>)
 800646a:	2200      	movs	r2, #0
 800646c:	4650      	mov	r0, sl
 800646e:	4659      	mov	r1, fp
 8006470:	f7fa f8c2 	bl	80005f8 <__aeabi_dmul>
 8006474:	4b2d      	ldr	r3, [pc, #180]	; (800652c <_dtoa_r+0x624>)
 8006476:	4682      	mov	sl, r0
 8006478:	468b      	mov	fp, r1
 800647a:	4640      	mov	r0, r8
 800647c:	4649      	mov	r1, r9
 800647e:	2200      	movs	r2, #0
 8006480:	f7fa f8ba 	bl	80005f8 <__aeabi_dmul>
 8006484:	4680      	mov	r8, r0
 8006486:	4689      	mov	r9, r1
 8006488:	e7c6      	b.n	8006418 <_dtoa_r+0x510>
 800648a:	4650      	mov	r0, sl
 800648c:	4659      	mov	r1, fp
 800648e:	f7fa f8b3 	bl	80005f8 <__aeabi_dmul>
 8006492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006494:	9d01      	ldr	r5, [sp, #4]
 8006496:	930f      	str	r3, [sp, #60]	; 0x3c
 8006498:	4682      	mov	sl, r0
 800649a:	468b      	mov	fp, r1
 800649c:	4649      	mov	r1, r9
 800649e:	4640      	mov	r0, r8
 80064a0:	f7fa fb5a 	bl	8000b58 <__aeabi_d2iz>
 80064a4:	4606      	mov	r6, r0
 80064a6:	f7fa f83d 	bl	8000524 <__aeabi_i2d>
 80064aa:	3630      	adds	r6, #48	; 0x30
 80064ac:	4602      	mov	r2, r0
 80064ae:	460b      	mov	r3, r1
 80064b0:	4640      	mov	r0, r8
 80064b2:	4649      	mov	r1, r9
 80064b4:	f7f9 fee8 	bl	8000288 <__aeabi_dsub>
 80064b8:	f805 6b01 	strb.w	r6, [r5], #1
 80064bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064be:	429d      	cmp	r5, r3
 80064c0:	4680      	mov	r8, r0
 80064c2:	4689      	mov	r9, r1
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	d124      	bne.n	8006514 <_dtoa_r+0x60c>
 80064ca:	4b1b      	ldr	r3, [pc, #108]	; (8006538 <_dtoa_r+0x630>)
 80064cc:	4650      	mov	r0, sl
 80064ce:	4659      	mov	r1, fp
 80064d0:	f7f9 fedc 	bl	800028c <__adddf3>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4640      	mov	r0, r8
 80064da:	4649      	mov	r1, r9
 80064dc:	f7fa fb1c 	bl	8000b18 <__aeabi_dcmpgt>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d173      	bne.n	80065cc <_dtoa_r+0x6c4>
 80064e4:	4652      	mov	r2, sl
 80064e6:	465b      	mov	r3, fp
 80064e8:	4913      	ldr	r1, [pc, #76]	; (8006538 <_dtoa_r+0x630>)
 80064ea:	2000      	movs	r0, #0
 80064ec:	f7f9 fecc 	bl	8000288 <__aeabi_dsub>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4640      	mov	r0, r8
 80064f6:	4649      	mov	r1, r9
 80064f8:	f7fa faf0 	bl	8000adc <__aeabi_dcmplt>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	f43f af35 	beq.w	800636c <_dtoa_r+0x464>
 8006502:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006504:	1e6b      	subs	r3, r5, #1
 8006506:	930f      	str	r3, [sp, #60]	; 0x3c
 8006508:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800650c:	2b30      	cmp	r3, #48	; 0x30
 800650e:	d0f8      	beq.n	8006502 <_dtoa_r+0x5fa>
 8006510:	9700      	str	r7, [sp, #0]
 8006512:	e049      	b.n	80065a8 <_dtoa_r+0x6a0>
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <_dtoa_r+0x624>)
 8006516:	f7fa f86f 	bl	80005f8 <__aeabi_dmul>
 800651a:	4680      	mov	r8, r0
 800651c:	4689      	mov	r9, r1
 800651e:	e7bd      	b.n	800649c <_dtoa_r+0x594>
 8006520:	08008c48 	.word	0x08008c48
 8006524:	08008c20 	.word	0x08008c20
 8006528:	3ff00000 	.word	0x3ff00000
 800652c:	40240000 	.word	0x40240000
 8006530:	401c0000 	.word	0x401c0000
 8006534:	40140000 	.word	0x40140000
 8006538:	3fe00000 	.word	0x3fe00000
 800653c:	9d01      	ldr	r5, [sp, #4]
 800653e:	4656      	mov	r6, sl
 8006540:	465f      	mov	r7, fp
 8006542:	4642      	mov	r2, r8
 8006544:	464b      	mov	r3, r9
 8006546:	4630      	mov	r0, r6
 8006548:	4639      	mov	r1, r7
 800654a:	f7fa f97f 	bl	800084c <__aeabi_ddiv>
 800654e:	f7fa fb03 	bl	8000b58 <__aeabi_d2iz>
 8006552:	4682      	mov	sl, r0
 8006554:	f7f9 ffe6 	bl	8000524 <__aeabi_i2d>
 8006558:	4642      	mov	r2, r8
 800655a:	464b      	mov	r3, r9
 800655c:	f7fa f84c 	bl	80005f8 <__aeabi_dmul>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4630      	mov	r0, r6
 8006566:	4639      	mov	r1, r7
 8006568:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800656c:	f7f9 fe8c 	bl	8000288 <__aeabi_dsub>
 8006570:	f805 6b01 	strb.w	r6, [r5], #1
 8006574:	9e01      	ldr	r6, [sp, #4]
 8006576:	9f03      	ldr	r7, [sp, #12]
 8006578:	1bae      	subs	r6, r5, r6
 800657a:	42b7      	cmp	r7, r6
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	d135      	bne.n	80065ee <_dtoa_r+0x6e6>
 8006582:	f7f9 fe83 	bl	800028c <__adddf3>
 8006586:	4642      	mov	r2, r8
 8006588:	464b      	mov	r3, r9
 800658a:	4606      	mov	r6, r0
 800658c:	460f      	mov	r7, r1
 800658e:	f7fa fac3 	bl	8000b18 <__aeabi_dcmpgt>
 8006592:	b9d0      	cbnz	r0, 80065ca <_dtoa_r+0x6c2>
 8006594:	4642      	mov	r2, r8
 8006596:	464b      	mov	r3, r9
 8006598:	4630      	mov	r0, r6
 800659a:	4639      	mov	r1, r7
 800659c:	f7fa fa94 	bl	8000ac8 <__aeabi_dcmpeq>
 80065a0:	b110      	cbz	r0, 80065a8 <_dtoa_r+0x6a0>
 80065a2:	f01a 0f01 	tst.w	sl, #1
 80065a6:	d110      	bne.n	80065ca <_dtoa_r+0x6c2>
 80065a8:	4620      	mov	r0, r4
 80065aa:	ee18 1a10 	vmov	r1, s16
 80065ae:	f000 fd17 	bl	8006fe0 <_Bfree>
 80065b2:	2300      	movs	r3, #0
 80065b4:	9800      	ldr	r0, [sp, #0]
 80065b6:	702b      	strb	r3, [r5, #0]
 80065b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065ba:	3001      	adds	r0, #1
 80065bc:	6018      	str	r0, [r3, #0]
 80065be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f43f acf1 	beq.w	8005fa8 <_dtoa_r+0xa0>
 80065c6:	601d      	str	r5, [r3, #0]
 80065c8:	e4ee      	b.n	8005fa8 <_dtoa_r+0xa0>
 80065ca:	9f00      	ldr	r7, [sp, #0]
 80065cc:	462b      	mov	r3, r5
 80065ce:	461d      	mov	r5, r3
 80065d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065d4:	2a39      	cmp	r2, #57	; 0x39
 80065d6:	d106      	bne.n	80065e6 <_dtoa_r+0x6de>
 80065d8:	9a01      	ldr	r2, [sp, #4]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d1f7      	bne.n	80065ce <_dtoa_r+0x6c6>
 80065de:	9901      	ldr	r1, [sp, #4]
 80065e0:	2230      	movs	r2, #48	; 0x30
 80065e2:	3701      	adds	r7, #1
 80065e4:	700a      	strb	r2, [r1, #0]
 80065e6:	781a      	ldrb	r2, [r3, #0]
 80065e8:	3201      	adds	r2, #1
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	e790      	b.n	8006510 <_dtoa_r+0x608>
 80065ee:	4ba6      	ldr	r3, [pc, #664]	; (8006888 <_dtoa_r+0x980>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	f7fa f801 	bl	80005f8 <__aeabi_dmul>
 80065f6:	2200      	movs	r2, #0
 80065f8:	2300      	movs	r3, #0
 80065fa:	4606      	mov	r6, r0
 80065fc:	460f      	mov	r7, r1
 80065fe:	f7fa fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8006602:	2800      	cmp	r0, #0
 8006604:	d09d      	beq.n	8006542 <_dtoa_r+0x63a>
 8006606:	e7cf      	b.n	80065a8 <_dtoa_r+0x6a0>
 8006608:	9a08      	ldr	r2, [sp, #32]
 800660a:	2a00      	cmp	r2, #0
 800660c:	f000 80d7 	beq.w	80067be <_dtoa_r+0x8b6>
 8006610:	9a06      	ldr	r2, [sp, #24]
 8006612:	2a01      	cmp	r2, #1
 8006614:	f300 80ba 	bgt.w	800678c <_dtoa_r+0x884>
 8006618:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800661a:	2a00      	cmp	r2, #0
 800661c:	f000 80b2 	beq.w	8006784 <_dtoa_r+0x87c>
 8006620:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006624:	9e07      	ldr	r6, [sp, #28]
 8006626:	9d04      	ldr	r5, [sp, #16]
 8006628:	9a04      	ldr	r2, [sp, #16]
 800662a:	441a      	add	r2, r3
 800662c:	9204      	str	r2, [sp, #16]
 800662e:	9a05      	ldr	r2, [sp, #20]
 8006630:	2101      	movs	r1, #1
 8006632:	441a      	add	r2, r3
 8006634:	4620      	mov	r0, r4
 8006636:	9205      	str	r2, [sp, #20]
 8006638:	f000 fd8a 	bl	8007150 <__i2b>
 800663c:	4607      	mov	r7, r0
 800663e:	2d00      	cmp	r5, #0
 8006640:	dd0c      	ble.n	800665c <_dtoa_r+0x754>
 8006642:	9b05      	ldr	r3, [sp, #20]
 8006644:	2b00      	cmp	r3, #0
 8006646:	dd09      	ble.n	800665c <_dtoa_r+0x754>
 8006648:	42ab      	cmp	r3, r5
 800664a:	9a04      	ldr	r2, [sp, #16]
 800664c:	bfa8      	it	ge
 800664e:	462b      	movge	r3, r5
 8006650:	1ad2      	subs	r2, r2, r3
 8006652:	9204      	str	r2, [sp, #16]
 8006654:	9a05      	ldr	r2, [sp, #20]
 8006656:	1aed      	subs	r5, r5, r3
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	9305      	str	r3, [sp, #20]
 800665c:	9b07      	ldr	r3, [sp, #28]
 800665e:	b31b      	cbz	r3, 80066a8 <_dtoa_r+0x7a0>
 8006660:	9b08      	ldr	r3, [sp, #32]
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 80af 	beq.w	80067c6 <_dtoa_r+0x8be>
 8006668:	2e00      	cmp	r6, #0
 800666a:	dd13      	ble.n	8006694 <_dtoa_r+0x78c>
 800666c:	4639      	mov	r1, r7
 800666e:	4632      	mov	r2, r6
 8006670:	4620      	mov	r0, r4
 8006672:	f000 fe2d 	bl	80072d0 <__pow5mult>
 8006676:	ee18 2a10 	vmov	r2, s16
 800667a:	4601      	mov	r1, r0
 800667c:	4607      	mov	r7, r0
 800667e:	4620      	mov	r0, r4
 8006680:	f000 fd7c 	bl	800717c <__multiply>
 8006684:	ee18 1a10 	vmov	r1, s16
 8006688:	4680      	mov	r8, r0
 800668a:	4620      	mov	r0, r4
 800668c:	f000 fca8 	bl	8006fe0 <_Bfree>
 8006690:	ee08 8a10 	vmov	s16, r8
 8006694:	9b07      	ldr	r3, [sp, #28]
 8006696:	1b9a      	subs	r2, r3, r6
 8006698:	d006      	beq.n	80066a8 <_dtoa_r+0x7a0>
 800669a:	ee18 1a10 	vmov	r1, s16
 800669e:	4620      	mov	r0, r4
 80066a0:	f000 fe16 	bl	80072d0 <__pow5mult>
 80066a4:	ee08 0a10 	vmov	s16, r0
 80066a8:	2101      	movs	r1, #1
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 fd50 	bl	8007150 <__i2b>
 80066b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	4606      	mov	r6, r0
 80066b6:	f340 8088 	ble.w	80067ca <_dtoa_r+0x8c2>
 80066ba:	461a      	mov	r2, r3
 80066bc:	4601      	mov	r1, r0
 80066be:	4620      	mov	r0, r4
 80066c0:	f000 fe06 	bl	80072d0 <__pow5mult>
 80066c4:	9b06      	ldr	r3, [sp, #24]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	4606      	mov	r6, r0
 80066ca:	f340 8081 	ble.w	80067d0 <_dtoa_r+0x8c8>
 80066ce:	f04f 0800 	mov.w	r8, #0
 80066d2:	6933      	ldr	r3, [r6, #16]
 80066d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066d8:	6918      	ldr	r0, [r3, #16]
 80066da:	f000 fce9 	bl	80070b0 <__hi0bits>
 80066de:	f1c0 0020 	rsb	r0, r0, #32
 80066e2:	9b05      	ldr	r3, [sp, #20]
 80066e4:	4418      	add	r0, r3
 80066e6:	f010 001f 	ands.w	r0, r0, #31
 80066ea:	f000 8092 	beq.w	8006812 <_dtoa_r+0x90a>
 80066ee:	f1c0 0320 	rsb	r3, r0, #32
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	f340 808a 	ble.w	800680c <_dtoa_r+0x904>
 80066f8:	f1c0 001c 	rsb	r0, r0, #28
 80066fc:	9b04      	ldr	r3, [sp, #16]
 80066fe:	4403      	add	r3, r0
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	9b05      	ldr	r3, [sp, #20]
 8006704:	4403      	add	r3, r0
 8006706:	4405      	add	r5, r0
 8006708:	9305      	str	r3, [sp, #20]
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	dd07      	ble.n	8006720 <_dtoa_r+0x818>
 8006710:	ee18 1a10 	vmov	r1, s16
 8006714:	461a      	mov	r2, r3
 8006716:	4620      	mov	r0, r4
 8006718:	f000 fe34 	bl	8007384 <__lshift>
 800671c:	ee08 0a10 	vmov	s16, r0
 8006720:	9b05      	ldr	r3, [sp, #20]
 8006722:	2b00      	cmp	r3, #0
 8006724:	dd05      	ble.n	8006732 <_dtoa_r+0x82a>
 8006726:	4631      	mov	r1, r6
 8006728:	461a      	mov	r2, r3
 800672a:	4620      	mov	r0, r4
 800672c:	f000 fe2a 	bl	8007384 <__lshift>
 8006730:	4606      	mov	r6, r0
 8006732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d06e      	beq.n	8006816 <_dtoa_r+0x90e>
 8006738:	ee18 0a10 	vmov	r0, s16
 800673c:	4631      	mov	r1, r6
 800673e:	f000 fe91 	bl	8007464 <__mcmp>
 8006742:	2800      	cmp	r0, #0
 8006744:	da67      	bge.n	8006816 <_dtoa_r+0x90e>
 8006746:	9b00      	ldr	r3, [sp, #0]
 8006748:	3b01      	subs	r3, #1
 800674a:	ee18 1a10 	vmov	r1, s16
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	220a      	movs	r2, #10
 8006752:	2300      	movs	r3, #0
 8006754:	4620      	mov	r0, r4
 8006756:	f000 fc65 	bl	8007024 <__multadd>
 800675a:	9b08      	ldr	r3, [sp, #32]
 800675c:	ee08 0a10 	vmov	s16, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 81b1 	beq.w	8006ac8 <_dtoa_r+0xbc0>
 8006766:	2300      	movs	r3, #0
 8006768:	4639      	mov	r1, r7
 800676a:	220a      	movs	r2, #10
 800676c:	4620      	mov	r0, r4
 800676e:	f000 fc59 	bl	8007024 <__multadd>
 8006772:	9b02      	ldr	r3, [sp, #8]
 8006774:	2b00      	cmp	r3, #0
 8006776:	4607      	mov	r7, r0
 8006778:	f300 808e 	bgt.w	8006898 <_dtoa_r+0x990>
 800677c:	9b06      	ldr	r3, [sp, #24]
 800677e:	2b02      	cmp	r3, #2
 8006780:	dc51      	bgt.n	8006826 <_dtoa_r+0x91e>
 8006782:	e089      	b.n	8006898 <_dtoa_r+0x990>
 8006784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800678a:	e74b      	b.n	8006624 <_dtoa_r+0x71c>
 800678c:	9b03      	ldr	r3, [sp, #12]
 800678e:	1e5e      	subs	r6, r3, #1
 8006790:	9b07      	ldr	r3, [sp, #28]
 8006792:	42b3      	cmp	r3, r6
 8006794:	bfbf      	itttt	lt
 8006796:	9b07      	ldrlt	r3, [sp, #28]
 8006798:	9607      	strlt	r6, [sp, #28]
 800679a:	1af2      	sublt	r2, r6, r3
 800679c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800679e:	bfb6      	itet	lt
 80067a0:	189b      	addlt	r3, r3, r2
 80067a2:	1b9e      	subge	r6, r3, r6
 80067a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	bfb8      	it	lt
 80067aa:	2600      	movlt	r6, #0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	bfb7      	itett	lt
 80067b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80067b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80067b8:	1a9d      	sublt	r5, r3, r2
 80067ba:	2300      	movlt	r3, #0
 80067bc:	e734      	b.n	8006628 <_dtoa_r+0x720>
 80067be:	9e07      	ldr	r6, [sp, #28]
 80067c0:	9d04      	ldr	r5, [sp, #16]
 80067c2:	9f08      	ldr	r7, [sp, #32]
 80067c4:	e73b      	b.n	800663e <_dtoa_r+0x736>
 80067c6:	9a07      	ldr	r2, [sp, #28]
 80067c8:	e767      	b.n	800669a <_dtoa_r+0x792>
 80067ca:	9b06      	ldr	r3, [sp, #24]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	dc18      	bgt.n	8006802 <_dtoa_r+0x8fa>
 80067d0:	f1ba 0f00 	cmp.w	sl, #0
 80067d4:	d115      	bne.n	8006802 <_dtoa_r+0x8fa>
 80067d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067da:	b993      	cbnz	r3, 8006802 <_dtoa_r+0x8fa>
 80067dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80067e0:	0d1b      	lsrs	r3, r3, #20
 80067e2:	051b      	lsls	r3, r3, #20
 80067e4:	b183      	cbz	r3, 8006808 <_dtoa_r+0x900>
 80067e6:	9b04      	ldr	r3, [sp, #16]
 80067e8:	3301      	adds	r3, #1
 80067ea:	9304      	str	r3, [sp, #16]
 80067ec:	9b05      	ldr	r3, [sp, #20]
 80067ee:	3301      	adds	r3, #1
 80067f0:	9305      	str	r3, [sp, #20]
 80067f2:	f04f 0801 	mov.w	r8, #1
 80067f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f47f af6a 	bne.w	80066d2 <_dtoa_r+0x7ca>
 80067fe:	2001      	movs	r0, #1
 8006800:	e76f      	b.n	80066e2 <_dtoa_r+0x7da>
 8006802:	f04f 0800 	mov.w	r8, #0
 8006806:	e7f6      	b.n	80067f6 <_dtoa_r+0x8ee>
 8006808:	4698      	mov	r8, r3
 800680a:	e7f4      	b.n	80067f6 <_dtoa_r+0x8ee>
 800680c:	f43f af7d 	beq.w	800670a <_dtoa_r+0x802>
 8006810:	4618      	mov	r0, r3
 8006812:	301c      	adds	r0, #28
 8006814:	e772      	b.n	80066fc <_dtoa_r+0x7f4>
 8006816:	9b03      	ldr	r3, [sp, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	dc37      	bgt.n	800688c <_dtoa_r+0x984>
 800681c:	9b06      	ldr	r3, [sp, #24]
 800681e:	2b02      	cmp	r3, #2
 8006820:	dd34      	ble.n	800688c <_dtoa_r+0x984>
 8006822:	9b03      	ldr	r3, [sp, #12]
 8006824:	9302      	str	r3, [sp, #8]
 8006826:	9b02      	ldr	r3, [sp, #8]
 8006828:	b96b      	cbnz	r3, 8006846 <_dtoa_r+0x93e>
 800682a:	4631      	mov	r1, r6
 800682c:	2205      	movs	r2, #5
 800682e:	4620      	mov	r0, r4
 8006830:	f000 fbf8 	bl	8007024 <__multadd>
 8006834:	4601      	mov	r1, r0
 8006836:	4606      	mov	r6, r0
 8006838:	ee18 0a10 	vmov	r0, s16
 800683c:	f000 fe12 	bl	8007464 <__mcmp>
 8006840:	2800      	cmp	r0, #0
 8006842:	f73f adbb 	bgt.w	80063bc <_dtoa_r+0x4b4>
 8006846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006848:	9d01      	ldr	r5, [sp, #4]
 800684a:	43db      	mvns	r3, r3
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	f04f 0800 	mov.w	r8, #0
 8006852:	4631      	mov	r1, r6
 8006854:	4620      	mov	r0, r4
 8006856:	f000 fbc3 	bl	8006fe0 <_Bfree>
 800685a:	2f00      	cmp	r7, #0
 800685c:	f43f aea4 	beq.w	80065a8 <_dtoa_r+0x6a0>
 8006860:	f1b8 0f00 	cmp.w	r8, #0
 8006864:	d005      	beq.n	8006872 <_dtoa_r+0x96a>
 8006866:	45b8      	cmp	r8, r7
 8006868:	d003      	beq.n	8006872 <_dtoa_r+0x96a>
 800686a:	4641      	mov	r1, r8
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fbb7 	bl	8006fe0 <_Bfree>
 8006872:	4639      	mov	r1, r7
 8006874:	4620      	mov	r0, r4
 8006876:	f000 fbb3 	bl	8006fe0 <_Bfree>
 800687a:	e695      	b.n	80065a8 <_dtoa_r+0x6a0>
 800687c:	2600      	movs	r6, #0
 800687e:	4637      	mov	r7, r6
 8006880:	e7e1      	b.n	8006846 <_dtoa_r+0x93e>
 8006882:	9700      	str	r7, [sp, #0]
 8006884:	4637      	mov	r7, r6
 8006886:	e599      	b.n	80063bc <_dtoa_r+0x4b4>
 8006888:	40240000 	.word	0x40240000
 800688c:	9b08      	ldr	r3, [sp, #32]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 80ca 	beq.w	8006a28 <_dtoa_r+0xb20>
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	9302      	str	r3, [sp, #8]
 8006898:	2d00      	cmp	r5, #0
 800689a:	dd05      	ble.n	80068a8 <_dtoa_r+0x9a0>
 800689c:	4639      	mov	r1, r7
 800689e:	462a      	mov	r2, r5
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 fd6f 	bl	8007384 <__lshift>
 80068a6:	4607      	mov	r7, r0
 80068a8:	f1b8 0f00 	cmp.w	r8, #0
 80068ac:	d05b      	beq.n	8006966 <_dtoa_r+0xa5e>
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fb55 	bl	8006f60 <_Balloc>
 80068b6:	4605      	mov	r5, r0
 80068b8:	b928      	cbnz	r0, 80068c6 <_dtoa_r+0x9be>
 80068ba:	4b87      	ldr	r3, [pc, #540]	; (8006ad8 <_dtoa_r+0xbd0>)
 80068bc:	4602      	mov	r2, r0
 80068be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80068c2:	f7ff bb3b 	b.w	8005f3c <_dtoa_r+0x34>
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	3202      	adds	r2, #2
 80068ca:	0092      	lsls	r2, r2, #2
 80068cc:	f107 010c 	add.w	r1, r7, #12
 80068d0:	300c      	adds	r0, #12
 80068d2:	f7fe fbf1 	bl	80050b8 <memcpy>
 80068d6:	2201      	movs	r2, #1
 80068d8:	4629      	mov	r1, r5
 80068da:	4620      	mov	r0, r4
 80068dc:	f000 fd52 	bl	8007384 <__lshift>
 80068e0:	9b01      	ldr	r3, [sp, #4]
 80068e2:	f103 0901 	add.w	r9, r3, #1
 80068e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80068ea:	4413      	add	r3, r2
 80068ec:	9305      	str	r3, [sp, #20]
 80068ee:	f00a 0301 	and.w	r3, sl, #1
 80068f2:	46b8      	mov	r8, r7
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	4607      	mov	r7, r0
 80068f8:	4631      	mov	r1, r6
 80068fa:	ee18 0a10 	vmov	r0, s16
 80068fe:	f7ff fa75 	bl	8005dec <quorem>
 8006902:	4641      	mov	r1, r8
 8006904:	9002      	str	r0, [sp, #8]
 8006906:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800690a:	ee18 0a10 	vmov	r0, s16
 800690e:	f000 fda9 	bl	8007464 <__mcmp>
 8006912:	463a      	mov	r2, r7
 8006914:	9003      	str	r0, [sp, #12]
 8006916:	4631      	mov	r1, r6
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fdbf 	bl	800749c <__mdiff>
 800691e:	68c2      	ldr	r2, [r0, #12]
 8006920:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006924:	4605      	mov	r5, r0
 8006926:	bb02      	cbnz	r2, 800696a <_dtoa_r+0xa62>
 8006928:	4601      	mov	r1, r0
 800692a:	ee18 0a10 	vmov	r0, s16
 800692e:	f000 fd99 	bl	8007464 <__mcmp>
 8006932:	4602      	mov	r2, r0
 8006934:	4629      	mov	r1, r5
 8006936:	4620      	mov	r0, r4
 8006938:	9207      	str	r2, [sp, #28]
 800693a:	f000 fb51 	bl	8006fe0 <_Bfree>
 800693e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006942:	ea43 0102 	orr.w	r1, r3, r2
 8006946:	9b04      	ldr	r3, [sp, #16]
 8006948:	430b      	orrs	r3, r1
 800694a:	464d      	mov	r5, r9
 800694c:	d10f      	bne.n	800696e <_dtoa_r+0xa66>
 800694e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006952:	d02a      	beq.n	80069aa <_dtoa_r+0xaa2>
 8006954:	9b03      	ldr	r3, [sp, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	dd02      	ble.n	8006960 <_dtoa_r+0xa58>
 800695a:	9b02      	ldr	r3, [sp, #8]
 800695c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006960:	f88b a000 	strb.w	sl, [fp]
 8006964:	e775      	b.n	8006852 <_dtoa_r+0x94a>
 8006966:	4638      	mov	r0, r7
 8006968:	e7ba      	b.n	80068e0 <_dtoa_r+0x9d8>
 800696a:	2201      	movs	r2, #1
 800696c:	e7e2      	b.n	8006934 <_dtoa_r+0xa2c>
 800696e:	9b03      	ldr	r3, [sp, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	db04      	blt.n	800697e <_dtoa_r+0xa76>
 8006974:	9906      	ldr	r1, [sp, #24]
 8006976:	430b      	orrs	r3, r1
 8006978:	9904      	ldr	r1, [sp, #16]
 800697a:	430b      	orrs	r3, r1
 800697c:	d122      	bne.n	80069c4 <_dtoa_r+0xabc>
 800697e:	2a00      	cmp	r2, #0
 8006980:	ddee      	ble.n	8006960 <_dtoa_r+0xa58>
 8006982:	ee18 1a10 	vmov	r1, s16
 8006986:	2201      	movs	r2, #1
 8006988:	4620      	mov	r0, r4
 800698a:	f000 fcfb 	bl	8007384 <__lshift>
 800698e:	4631      	mov	r1, r6
 8006990:	ee08 0a10 	vmov	s16, r0
 8006994:	f000 fd66 	bl	8007464 <__mcmp>
 8006998:	2800      	cmp	r0, #0
 800699a:	dc03      	bgt.n	80069a4 <_dtoa_r+0xa9c>
 800699c:	d1e0      	bne.n	8006960 <_dtoa_r+0xa58>
 800699e:	f01a 0f01 	tst.w	sl, #1
 80069a2:	d0dd      	beq.n	8006960 <_dtoa_r+0xa58>
 80069a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069a8:	d1d7      	bne.n	800695a <_dtoa_r+0xa52>
 80069aa:	2339      	movs	r3, #57	; 0x39
 80069ac:	f88b 3000 	strb.w	r3, [fp]
 80069b0:	462b      	mov	r3, r5
 80069b2:	461d      	mov	r5, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069ba:	2a39      	cmp	r2, #57	; 0x39
 80069bc:	d071      	beq.n	8006aa2 <_dtoa_r+0xb9a>
 80069be:	3201      	adds	r2, #1
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	e746      	b.n	8006852 <_dtoa_r+0x94a>
 80069c4:	2a00      	cmp	r2, #0
 80069c6:	dd07      	ble.n	80069d8 <_dtoa_r+0xad0>
 80069c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069cc:	d0ed      	beq.n	80069aa <_dtoa_r+0xaa2>
 80069ce:	f10a 0301 	add.w	r3, sl, #1
 80069d2:	f88b 3000 	strb.w	r3, [fp]
 80069d6:	e73c      	b.n	8006852 <_dtoa_r+0x94a>
 80069d8:	9b05      	ldr	r3, [sp, #20]
 80069da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80069de:	4599      	cmp	r9, r3
 80069e0:	d047      	beq.n	8006a72 <_dtoa_r+0xb6a>
 80069e2:	ee18 1a10 	vmov	r1, s16
 80069e6:	2300      	movs	r3, #0
 80069e8:	220a      	movs	r2, #10
 80069ea:	4620      	mov	r0, r4
 80069ec:	f000 fb1a 	bl	8007024 <__multadd>
 80069f0:	45b8      	cmp	r8, r7
 80069f2:	ee08 0a10 	vmov	s16, r0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	f04f 020a 	mov.w	r2, #10
 80069fe:	4641      	mov	r1, r8
 8006a00:	4620      	mov	r0, r4
 8006a02:	d106      	bne.n	8006a12 <_dtoa_r+0xb0a>
 8006a04:	f000 fb0e 	bl	8007024 <__multadd>
 8006a08:	4680      	mov	r8, r0
 8006a0a:	4607      	mov	r7, r0
 8006a0c:	f109 0901 	add.w	r9, r9, #1
 8006a10:	e772      	b.n	80068f8 <_dtoa_r+0x9f0>
 8006a12:	f000 fb07 	bl	8007024 <__multadd>
 8006a16:	4639      	mov	r1, r7
 8006a18:	4680      	mov	r8, r0
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	220a      	movs	r2, #10
 8006a1e:	4620      	mov	r0, r4
 8006a20:	f000 fb00 	bl	8007024 <__multadd>
 8006a24:	4607      	mov	r7, r0
 8006a26:	e7f1      	b.n	8006a0c <_dtoa_r+0xb04>
 8006a28:	9b03      	ldr	r3, [sp, #12]
 8006a2a:	9302      	str	r3, [sp, #8]
 8006a2c:	9d01      	ldr	r5, [sp, #4]
 8006a2e:	ee18 0a10 	vmov	r0, s16
 8006a32:	4631      	mov	r1, r6
 8006a34:	f7ff f9da 	bl	8005dec <quorem>
 8006a38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a3c:	9b01      	ldr	r3, [sp, #4]
 8006a3e:	f805 ab01 	strb.w	sl, [r5], #1
 8006a42:	1aea      	subs	r2, r5, r3
 8006a44:	9b02      	ldr	r3, [sp, #8]
 8006a46:	4293      	cmp	r3, r2
 8006a48:	dd09      	ble.n	8006a5e <_dtoa_r+0xb56>
 8006a4a:	ee18 1a10 	vmov	r1, s16
 8006a4e:	2300      	movs	r3, #0
 8006a50:	220a      	movs	r2, #10
 8006a52:	4620      	mov	r0, r4
 8006a54:	f000 fae6 	bl	8007024 <__multadd>
 8006a58:	ee08 0a10 	vmov	s16, r0
 8006a5c:	e7e7      	b.n	8006a2e <_dtoa_r+0xb26>
 8006a5e:	9b02      	ldr	r3, [sp, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bfc8      	it	gt
 8006a64:	461d      	movgt	r5, r3
 8006a66:	9b01      	ldr	r3, [sp, #4]
 8006a68:	bfd8      	it	le
 8006a6a:	2501      	movle	r5, #1
 8006a6c:	441d      	add	r5, r3
 8006a6e:	f04f 0800 	mov.w	r8, #0
 8006a72:	ee18 1a10 	vmov	r1, s16
 8006a76:	2201      	movs	r2, #1
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f000 fc83 	bl	8007384 <__lshift>
 8006a7e:	4631      	mov	r1, r6
 8006a80:	ee08 0a10 	vmov	s16, r0
 8006a84:	f000 fcee 	bl	8007464 <__mcmp>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	dc91      	bgt.n	80069b0 <_dtoa_r+0xaa8>
 8006a8c:	d102      	bne.n	8006a94 <_dtoa_r+0xb8c>
 8006a8e:	f01a 0f01 	tst.w	sl, #1
 8006a92:	d18d      	bne.n	80069b0 <_dtoa_r+0xaa8>
 8006a94:	462b      	mov	r3, r5
 8006a96:	461d      	mov	r5, r3
 8006a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a9c:	2a30      	cmp	r2, #48	; 0x30
 8006a9e:	d0fa      	beq.n	8006a96 <_dtoa_r+0xb8e>
 8006aa0:	e6d7      	b.n	8006852 <_dtoa_r+0x94a>
 8006aa2:	9a01      	ldr	r2, [sp, #4]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d184      	bne.n	80069b2 <_dtoa_r+0xaaa>
 8006aa8:	9b00      	ldr	r3, [sp, #0]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	2331      	movs	r3, #49	; 0x31
 8006ab0:	7013      	strb	r3, [r2, #0]
 8006ab2:	e6ce      	b.n	8006852 <_dtoa_r+0x94a>
 8006ab4:	4b09      	ldr	r3, [pc, #36]	; (8006adc <_dtoa_r+0xbd4>)
 8006ab6:	f7ff ba95 	b.w	8005fe4 <_dtoa_r+0xdc>
 8006aba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f47f aa6e 	bne.w	8005f9e <_dtoa_r+0x96>
 8006ac2:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <_dtoa_r+0xbd8>)
 8006ac4:	f7ff ba8e 	b.w	8005fe4 <_dtoa_r+0xdc>
 8006ac8:	9b02      	ldr	r3, [sp, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	dcae      	bgt.n	8006a2c <_dtoa_r+0xb24>
 8006ace:	9b06      	ldr	r3, [sp, #24]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	f73f aea8 	bgt.w	8006826 <_dtoa_r+0x91e>
 8006ad6:	e7a9      	b.n	8006a2c <_dtoa_r+0xb24>
 8006ad8:	08008b52 	.word	0x08008b52
 8006adc:	08008391 	.word	0x08008391
 8006ae0:	08008aea 	.word	0x08008aea

08006ae4 <__sflush_r>:
 8006ae4:	898a      	ldrh	r2, [r1, #12]
 8006ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aea:	4605      	mov	r5, r0
 8006aec:	0710      	lsls	r0, r2, #28
 8006aee:	460c      	mov	r4, r1
 8006af0:	d458      	bmi.n	8006ba4 <__sflush_r+0xc0>
 8006af2:	684b      	ldr	r3, [r1, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	dc05      	bgt.n	8006b04 <__sflush_r+0x20>
 8006af8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	dc02      	bgt.n	8006b04 <__sflush_r+0x20>
 8006afe:	2000      	movs	r0, #0
 8006b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b06:	2e00      	cmp	r6, #0
 8006b08:	d0f9      	beq.n	8006afe <__sflush_r+0x1a>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b10:	682f      	ldr	r7, [r5, #0]
 8006b12:	602b      	str	r3, [r5, #0]
 8006b14:	d032      	beq.n	8006b7c <__sflush_r+0x98>
 8006b16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	075a      	lsls	r2, r3, #29
 8006b1c:	d505      	bpl.n	8006b2a <__sflush_r+0x46>
 8006b1e:	6863      	ldr	r3, [r4, #4]
 8006b20:	1ac0      	subs	r0, r0, r3
 8006b22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b24:	b10b      	cbz	r3, 8006b2a <__sflush_r+0x46>
 8006b26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b28:	1ac0      	subs	r0, r0, r3
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b30:	6a21      	ldr	r1, [r4, #32]
 8006b32:	4628      	mov	r0, r5
 8006b34:	47b0      	blx	r6
 8006b36:	1c43      	adds	r3, r0, #1
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	d106      	bne.n	8006b4a <__sflush_r+0x66>
 8006b3c:	6829      	ldr	r1, [r5, #0]
 8006b3e:	291d      	cmp	r1, #29
 8006b40:	d82c      	bhi.n	8006b9c <__sflush_r+0xb8>
 8006b42:	4a2a      	ldr	r2, [pc, #168]	; (8006bec <__sflush_r+0x108>)
 8006b44:	40ca      	lsrs	r2, r1
 8006b46:	07d6      	lsls	r6, r2, #31
 8006b48:	d528      	bpl.n	8006b9c <__sflush_r+0xb8>
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	6062      	str	r2, [r4, #4]
 8006b4e:	04d9      	lsls	r1, r3, #19
 8006b50:	6922      	ldr	r2, [r4, #16]
 8006b52:	6022      	str	r2, [r4, #0]
 8006b54:	d504      	bpl.n	8006b60 <__sflush_r+0x7c>
 8006b56:	1c42      	adds	r2, r0, #1
 8006b58:	d101      	bne.n	8006b5e <__sflush_r+0x7a>
 8006b5a:	682b      	ldr	r3, [r5, #0]
 8006b5c:	b903      	cbnz	r3, 8006b60 <__sflush_r+0x7c>
 8006b5e:	6560      	str	r0, [r4, #84]	; 0x54
 8006b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b62:	602f      	str	r7, [r5, #0]
 8006b64:	2900      	cmp	r1, #0
 8006b66:	d0ca      	beq.n	8006afe <__sflush_r+0x1a>
 8006b68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b6c:	4299      	cmp	r1, r3
 8006b6e:	d002      	beq.n	8006b76 <__sflush_r+0x92>
 8006b70:	4628      	mov	r0, r5
 8006b72:	f000 fd8f 	bl	8007694 <_free_r>
 8006b76:	2000      	movs	r0, #0
 8006b78:	6360      	str	r0, [r4, #52]	; 0x34
 8006b7a:	e7c1      	b.n	8006b00 <__sflush_r+0x1c>
 8006b7c:	6a21      	ldr	r1, [r4, #32]
 8006b7e:	2301      	movs	r3, #1
 8006b80:	4628      	mov	r0, r5
 8006b82:	47b0      	blx	r6
 8006b84:	1c41      	adds	r1, r0, #1
 8006b86:	d1c7      	bne.n	8006b18 <__sflush_r+0x34>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d0c4      	beq.n	8006b18 <__sflush_r+0x34>
 8006b8e:	2b1d      	cmp	r3, #29
 8006b90:	d001      	beq.n	8006b96 <__sflush_r+0xb2>
 8006b92:	2b16      	cmp	r3, #22
 8006b94:	d101      	bne.n	8006b9a <__sflush_r+0xb6>
 8006b96:	602f      	str	r7, [r5, #0]
 8006b98:	e7b1      	b.n	8006afe <__sflush_r+0x1a>
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ba0:	81a3      	strh	r3, [r4, #12]
 8006ba2:	e7ad      	b.n	8006b00 <__sflush_r+0x1c>
 8006ba4:	690f      	ldr	r7, [r1, #16]
 8006ba6:	2f00      	cmp	r7, #0
 8006ba8:	d0a9      	beq.n	8006afe <__sflush_r+0x1a>
 8006baa:	0793      	lsls	r3, r2, #30
 8006bac:	680e      	ldr	r6, [r1, #0]
 8006bae:	bf08      	it	eq
 8006bb0:	694b      	ldreq	r3, [r1, #20]
 8006bb2:	600f      	str	r7, [r1, #0]
 8006bb4:	bf18      	it	ne
 8006bb6:	2300      	movne	r3, #0
 8006bb8:	eba6 0807 	sub.w	r8, r6, r7
 8006bbc:	608b      	str	r3, [r1, #8]
 8006bbe:	f1b8 0f00 	cmp.w	r8, #0
 8006bc2:	dd9c      	ble.n	8006afe <__sflush_r+0x1a>
 8006bc4:	6a21      	ldr	r1, [r4, #32]
 8006bc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bc8:	4643      	mov	r3, r8
 8006bca:	463a      	mov	r2, r7
 8006bcc:	4628      	mov	r0, r5
 8006bce:	47b0      	blx	r6
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	dc06      	bgt.n	8006be2 <__sflush_r+0xfe>
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bda:	81a3      	strh	r3, [r4, #12]
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006be0:	e78e      	b.n	8006b00 <__sflush_r+0x1c>
 8006be2:	4407      	add	r7, r0
 8006be4:	eba8 0800 	sub.w	r8, r8, r0
 8006be8:	e7e9      	b.n	8006bbe <__sflush_r+0xda>
 8006bea:	bf00      	nop
 8006bec:	20400001 	.word	0x20400001

08006bf0 <_fflush_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	690b      	ldr	r3, [r1, #16]
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	b913      	cbnz	r3, 8006c00 <_fflush_r+0x10>
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	b118      	cbz	r0, 8006c0a <_fflush_r+0x1a>
 8006c02:	6983      	ldr	r3, [r0, #24]
 8006c04:	b90b      	cbnz	r3, 8006c0a <_fflush_r+0x1a>
 8006c06:	f000 f887 	bl	8006d18 <__sinit>
 8006c0a:	4b14      	ldr	r3, [pc, #80]	; (8006c5c <_fflush_r+0x6c>)
 8006c0c:	429c      	cmp	r4, r3
 8006c0e:	d11b      	bne.n	8006c48 <_fflush_r+0x58>
 8006c10:	686c      	ldr	r4, [r5, #4]
 8006c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0ef      	beq.n	8006bfa <_fflush_r+0xa>
 8006c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c1c:	07d0      	lsls	r0, r2, #31
 8006c1e:	d404      	bmi.n	8006c2a <_fflush_r+0x3a>
 8006c20:	0599      	lsls	r1, r3, #22
 8006c22:	d402      	bmi.n	8006c2a <_fflush_r+0x3a>
 8006c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c26:	f000 f92c 	bl	8006e82 <__retarget_lock_acquire_recursive>
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	f7ff ff59 	bl	8006ae4 <__sflush_r>
 8006c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c34:	07da      	lsls	r2, r3, #31
 8006c36:	4605      	mov	r5, r0
 8006c38:	d4e0      	bmi.n	8006bfc <_fflush_r+0xc>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	059b      	lsls	r3, r3, #22
 8006c3e:	d4dd      	bmi.n	8006bfc <_fflush_r+0xc>
 8006c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c42:	f000 f91f 	bl	8006e84 <__retarget_lock_release_recursive>
 8006c46:	e7d9      	b.n	8006bfc <_fflush_r+0xc>
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <_fflush_r+0x70>)
 8006c4a:	429c      	cmp	r4, r3
 8006c4c:	d101      	bne.n	8006c52 <_fflush_r+0x62>
 8006c4e:	68ac      	ldr	r4, [r5, #8]
 8006c50:	e7df      	b.n	8006c12 <_fflush_r+0x22>
 8006c52:	4b04      	ldr	r3, [pc, #16]	; (8006c64 <_fflush_r+0x74>)
 8006c54:	429c      	cmp	r4, r3
 8006c56:	bf08      	it	eq
 8006c58:	68ec      	ldreq	r4, [r5, #12]
 8006c5a:	e7da      	b.n	8006c12 <_fflush_r+0x22>
 8006c5c:	08008b84 	.word	0x08008b84
 8006c60:	08008ba4 	.word	0x08008ba4
 8006c64:	08008b64 	.word	0x08008b64

08006c68 <std>:
 8006c68:	2300      	movs	r3, #0
 8006c6a:	b510      	push	{r4, lr}
 8006c6c:	4604      	mov	r4, r0
 8006c6e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c76:	6083      	str	r3, [r0, #8]
 8006c78:	8181      	strh	r1, [r0, #12]
 8006c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8006c7c:	81c2      	strh	r2, [r0, #14]
 8006c7e:	6183      	str	r3, [r0, #24]
 8006c80:	4619      	mov	r1, r3
 8006c82:	2208      	movs	r2, #8
 8006c84:	305c      	adds	r0, #92	; 0x5c
 8006c86:	f7fe fa25 	bl	80050d4 <memset>
 8006c8a:	4b05      	ldr	r3, [pc, #20]	; (8006ca0 <std+0x38>)
 8006c8c:	6263      	str	r3, [r4, #36]	; 0x24
 8006c8e:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <std+0x3c>)
 8006c90:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c92:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <std+0x40>)
 8006c94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c96:	4b05      	ldr	r3, [pc, #20]	; (8006cac <std+0x44>)
 8006c98:	6224      	str	r4, [r4, #32]
 8006c9a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c9c:	bd10      	pop	{r4, pc}
 8006c9e:	bf00      	nop
 8006ca0:	08007de1 	.word	0x08007de1
 8006ca4:	08007e03 	.word	0x08007e03
 8006ca8:	08007e3b 	.word	0x08007e3b
 8006cac:	08007e5f 	.word	0x08007e5f

08006cb0 <_cleanup_r>:
 8006cb0:	4901      	ldr	r1, [pc, #4]	; (8006cb8 <_cleanup_r+0x8>)
 8006cb2:	f000 b8c1 	b.w	8006e38 <_fwalk_reent>
 8006cb6:	bf00      	nop
 8006cb8:	08006bf1 	.word	0x08006bf1

08006cbc <__sfmoreglue>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	2268      	movs	r2, #104	; 0x68
 8006cc0:	1e4d      	subs	r5, r1, #1
 8006cc2:	4355      	muls	r5, r2
 8006cc4:	460e      	mov	r6, r1
 8006cc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cca:	f000 fd4f 	bl	800776c <_malloc_r>
 8006cce:	4604      	mov	r4, r0
 8006cd0:	b140      	cbz	r0, 8006ce4 <__sfmoreglue+0x28>
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	e9c0 1600 	strd	r1, r6, [r0]
 8006cd8:	300c      	adds	r0, #12
 8006cda:	60a0      	str	r0, [r4, #8]
 8006cdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ce0:	f7fe f9f8 	bl	80050d4 <memset>
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}

08006ce8 <__sfp_lock_acquire>:
 8006ce8:	4801      	ldr	r0, [pc, #4]	; (8006cf0 <__sfp_lock_acquire+0x8>)
 8006cea:	f000 b8ca 	b.w	8006e82 <__retarget_lock_acquire_recursive>
 8006cee:	bf00      	nop
 8006cf0:	20000ed5 	.word	0x20000ed5

08006cf4 <__sfp_lock_release>:
 8006cf4:	4801      	ldr	r0, [pc, #4]	; (8006cfc <__sfp_lock_release+0x8>)
 8006cf6:	f000 b8c5 	b.w	8006e84 <__retarget_lock_release_recursive>
 8006cfa:	bf00      	nop
 8006cfc:	20000ed5 	.word	0x20000ed5

08006d00 <__sinit_lock_acquire>:
 8006d00:	4801      	ldr	r0, [pc, #4]	; (8006d08 <__sinit_lock_acquire+0x8>)
 8006d02:	f000 b8be 	b.w	8006e82 <__retarget_lock_acquire_recursive>
 8006d06:	bf00      	nop
 8006d08:	20000ed6 	.word	0x20000ed6

08006d0c <__sinit_lock_release>:
 8006d0c:	4801      	ldr	r0, [pc, #4]	; (8006d14 <__sinit_lock_release+0x8>)
 8006d0e:	f000 b8b9 	b.w	8006e84 <__retarget_lock_release_recursive>
 8006d12:	bf00      	nop
 8006d14:	20000ed6 	.word	0x20000ed6

08006d18 <__sinit>:
 8006d18:	b510      	push	{r4, lr}
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	f7ff fff0 	bl	8006d00 <__sinit_lock_acquire>
 8006d20:	69a3      	ldr	r3, [r4, #24]
 8006d22:	b11b      	cbz	r3, 8006d2c <__sinit+0x14>
 8006d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d28:	f7ff bff0 	b.w	8006d0c <__sinit_lock_release>
 8006d2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d30:	6523      	str	r3, [r4, #80]	; 0x50
 8006d32:	4b13      	ldr	r3, [pc, #76]	; (8006d80 <__sinit+0x68>)
 8006d34:	4a13      	ldr	r2, [pc, #76]	; (8006d84 <__sinit+0x6c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d3a:	42a3      	cmp	r3, r4
 8006d3c:	bf04      	itt	eq
 8006d3e:	2301      	moveq	r3, #1
 8006d40:	61a3      	streq	r3, [r4, #24]
 8006d42:	4620      	mov	r0, r4
 8006d44:	f000 f820 	bl	8006d88 <__sfp>
 8006d48:	6060      	str	r0, [r4, #4]
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f000 f81c 	bl	8006d88 <__sfp>
 8006d50:	60a0      	str	r0, [r4, #8]
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 f818 	bl	8006d88 <__sfp>
 8006d58:	2200      	movs	r2, #0
 8006d5a:	60e0      	str	r0, [r4, #12]
 8006d5c:	2104      	movs	r1, #4
 8006d5e:	6860      	ldr	r0, [r4, #4]
 8006d60:	f7ff ff82 	bl	8006c68 <std>
 8006d64:	68a0      	ldr	r0, [r4, #8]
 8006d66:	2201      	movs	r2, #1
 8006d68:	2109      	movs	r1, #9
 8006d6a:	f7ff ff7d 	bl	8006c68 <std>
 8006d6e:	68e0      	ldr	r0, [r4, #12]
 8006d70:	2202      	movs	r2, #2
 8006d72:	2112      	movs	r1, #18
 8006d74:	f7ff ff78 	bl	8006c68 <std>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	61a3      	str	r3, [r4, #24]
 8006d7c:	e7d2      	b.n	8006d24 <__sinit+0xc>
 8006d7e:	bf00      	nop
 8006d80:	08008a04 	.word	0x08008a04
 8006d84:	08006cb1 	.word	0x08006cb1

08006d88 <__sfp>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	4607      	mov	r7, r0
 8006d8c:	f7ff ffac 	bl	8006ce8 <__sfp_lock_acquire>
 8006d90:	4b1e      	ldr	r3, [pc, #120]	; (8006e0c <__sfp+0x84>)
 8006d92:	681e      	ldr	r6, [r3, #0]
 8006d94:	69b3      	ldr	r3, [r6, #24]
 8006d96:	b913      	cbnz	r3, 8006d9e <__sfp+0x16>
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f7ff ffbd 	bl	8006d18 <__sinit>
 8006d9e:	3648      	adds	r6, #72	; 0x48
 8006da0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	d503      	bpl.n	8006db0 <__sfp+0x28>
 8006da8:	6833      	ldr	r3, [r6, #0]
 8006daa:	b30b      	cbz	r3, 8006df0 <__sfp+0x68>
 8006dac:	6836      	ldr	r6, [r6, #0]
 8006dae:	e7f7      	b.n	8006da0 <__sfp+0x18>
 8006db0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006db4:	b9d5      	cbnz	r5, 8006dec <__sfp+0x64>
 8006db6:	4b16      	ldr	r3, [pc, #88]	; (8006e10 <__sfp+0x88>)
 8006db8:	60e3      	str	r3, [r4, #12]
 8006dba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006dbe:	6665      	str	r5, [r4, #100]	; 0x64
 8006dc0:	f000 f85e 	bl	8006e80 <__retarget_lock_init_recursive>
 8006dc4:	f7ff ff96 	bl	8006cf4 <__sfp_lock_release>
 8006dc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006dcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006dd0:	6025      	str	r5, [r4, #0]
 8006dd2:	61a5      	str	r5, [r4, #24]
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ddc:	f7fe f97a 	bl	80050d4 <memset>
 8006de0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006de4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006de8:	4620      	mov	r0, r4
 8006dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dec:	3468      	adds	r4, #104	; 0x68
 8006dee:	e7d9      	b.n	8006da4 <__sfp+0x1c>
 8006df0:	2104      	movs	r1, #4
 8006df2:	4638      	mov	r0, r7
 8006df4:	f7ff ff62 	bl	8006cbc <__sfmoreglue>
 8006df8:	4604      	mov	r4, r0
 8006dfa:	6030      	str	r0, [r6, #0]
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d1d5      	bne.n	8006dac <__sfp+0x24>
 8006e00:	f7ff ff78 	bl	8006cf4 <__sfp_lock_release>
 8006e04:	230c      	movs	r3, #12
 8006e06:	603b      	str	r3, [r7, #0]
 8006e08:	e7ee      	b.n	8006de8 <__sfp+0x60>
 8006e0a:	bf00      	nop
 8006e0c:	08008a04 	.word	0x08008a04
 8006e10:	ffff0001 	.word	0xffff0001

08006e14 <fiprintf>:
 8006e14:	b40e      	push	{r1, r2, r3}
 8006e16:	b503      	push	{r0, r1, lr}
 8006e18:	4601      	mov	r1, r0
 8006e1a:	ab03      	add	r3, sp, #12
 8006e1c:	4805      	ldr	r0, [pc, #20]	; (8006e34 <fiprintf+0x20>)
 8006e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e22:	6800      	ldr	r0, [r0, #0]
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	f000 fe9b 	bl	8007b60 <_vfiprintf_r>
 8006e2a:	b002      	add	sp, #8
 8006e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e30:	b003      	add	sp, #12
 8006e32:	4770      	bx	lr
 8006e34:	2000008c 	.word	0x2000008c

08006e38 <_fwalk_reent>:
 8006e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	4688      	mov	r8, r1
 8006e40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e44:	2700      	movs	r7, #0
 8006e46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e4a:	f1b9 0901 	subs.w	r9, r9, #1
 8006e4e:	d505      	bpl.n	8006e5c <_fwalk_reent+0x24>
 8006e50:	6824      	ldr	r4, [r4, #0]
 8006e52:	2c00      	cmp	r4, #0
 8006e54:	d1f7      	bne.n	8006e46 <_fwalk_reent+0xe>
 8006e56:	4638      	mov	r0, r7
 8006e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e5c:	89ab      	ldrh	r3, [r5, #12]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d907      	bls.n	8006e72 <_fwalk_reent+0x3a>
 8006e62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e66:	3301      	adds	r3, #1
 8006e68:	d003      	beq.n	8006e72 <_fwalk_reent+0x3a>
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	47c0      	blx	r8
 8006e70:	4307      	orrs	r7, r0
 8006e72:	3568      	adds	r5, #104	; 0x68
 8006e74:	e7e9      	b.n	8006e4a <_fwalk_reent+0x12>
	...

08006e78 <_localeconv_r>:
 8006e78:	4800      	ldr	r0, [pc, #0]	; (8006e7c <_localeconv_r+0x4>)
 8006e7a:	4770      	bx	lr
 8006e7c:	200001e0 	.word	0x200001e0

08006e80 <__retarget_lock_init_recursive>:
 8006e80:	4770      	bx	lr

08006e82 <__retarget_lock_acquire_recursive>:
 8006e82:	4770      	bx	lr

08006e84 <__retarget_lock_release_recursive>:
 8006e84:	4770      	bx	lr

08006e86 <__swhatbuf_r>:
 8006e86:	b570      	push	{r4, r5, r6, lr}
 8006e88:	460e      	mov	r6, r1
 8006e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e8e:	2900      	cmp	r1, #0
 8006e90:	b096      	sub	sp, #88	; 0x58
 8006e92:	4614      	mov	r4, r2
 8006e94:	461d      	mov	r5, r3
 8006e96:	da08      	bge.n	8006eaa <__swhatbuf_r+0x24>
 8006e98:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	602a      	str	r2, [r5, #0]
 8006ea0:	061a      	lsls	r2, r3, #24
 8006ea2:	d410      	bmi.n	8006ec6 <__swhatbuf_r+0x40>
 8006ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ea8:	e00e      	b.n	8006ec8 <__swhatbuf_r+0x42>
 8006eaa:	466a      	mov	r2, sp
 8006eac:	f001 f806 	bl	8007ebc <_fstat_r>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	dbf1      	blt.n	8006e98 <__swhatbuf_r+0x12>
 8006eb4:	9a01      	ldr	r2, [sp, #4]
 8006eb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006eba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ebe:	425a      	negs	r2, r3
 8006ec0:	415a      	adcs	r2, r3
 8006ec2:	602a      	str	r2, [r5, #0]
 8006ec4:	e7ee      	b.n	8006ea4 <__swhatbuf_r+0x1e>
 8006ec6:	2340      	movs	r3, #64	; 0x40
 8006ec8:	2000      	movs	r0, #0
 8006eca:	6023      	str	r3, [r4, #0]
 8006ecc:	b016      	add	sp, #88	; 0x58
 8006ece:	bd70      	pop	{r4, r5, r6, pc}

08006ed0 <__smakebuf_r>:
 8006ed0:	898b      	ldrh	r3, [r1, #12]
 8006ed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ed4:	079d      	lsls	r5, r3, #30
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	460c      	mov	r4, r1
 8006eda:	d507      	bpl.n	8006eec <__smakebuf_r+0x1c>
 8006edc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	6123      	str	r3, [r4, #16]
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	6163      	str	r3, [r4, #20]
 8006ee8:	b002      	add	sp, #8
 8006eea:	bd70      	pop	{r4, r5, r6, pc}
 8006eec:	ab01      	add	r3, sp, #4
 8006eee:	466a      	mov	r2, sp
 8006ef0:	f7ff ffc9 	bl	8006e86 <__swhatbuf_r>
 8006ef4:	9900      	ldr	r1, [sp, #0]
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f000 fc37 	bl	800776c <_malloc_r>
 8006efe:	b948      	cbnz	r0, 8006f14 <__smakebuf_r+0x44>
 8006f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f04:	059a      	lsls	r2, r3, #22
 8006f06:	d4ef      	bmi.n	8006ee8 <__smakebuf_r+0x18>
 8006f08:	f023 0303 	bic.w	r3, r3, #3
 8006f0c:	f043 0302 	orr.w	r3, r3, #2
 8006f10:	81a3      	strh	r3, [r4, #12]
 8006f12:	e7e3      	b.n	8006edc <__smakebuf_r+0xc>
 8006f14:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <__smakebuf_r+0x7c>)
 8006f16:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	6020      	str	r0, [r4, #0]
 8006f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	9b00      	ldr	r3, [sp, #0]
 8006f24:	6163      	str	r3, [r4, #20]
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	6120      	str	r0, [r4, #16]
 8006f2a:	b15b      	cbz	r3, 8006f44 <__smakebuf_r+0x74>
 8006f2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f30:	4630      	mov	r0, r6
 8006f32:	f000 ffd5 	bl	8007ee0 <_isatty_r>
 8006f36:	b128      	cbz	r0, 8006f44 <__smakebuf_r+0x74>
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	f023 0303 	bic.w	r3, r3, #3
 8006f3e:	f043 0301 	orr.w	r3, r3, #1
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	89a0      	ldrh	r0, [r4, #12]
 8006f46:	4305      	orrs	r5, r0
 8006f48:	81a5      	strh	r5, [r4, #12]
 8006f4a:	e7cd      	b.n	8006ee8 <__smakebuf_r+0x18>
 8006f4c:	08006cb1 	.word	0x08006cb1

08006f50 <malloc>:
 8006f50:	4b02      	ldr	r3, [pc, #8]	; (8006f5c <malloc+0xc>)
 8006f52:	4601      	mov	r1, r0
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	f000 bc09 	b.w	800776c <_malloc_r>
 8006f5a:	bf00      	nop
 8006f5c:	2000008c 	.word	0x2000008c

08006f60 <_Balloc>:
 8006f60:	b570      	push	{r4, r5, r6, lr}
 8006f62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f64:	4604      	mov	r4, r0
 8006f66:	460d      	mov	r5, r1
 8006f68:	b976      	cbnz	r6, 8006f88 <_Balloc+0x28>
 8006f6a:	2010      	movs	r0, #16
 8006f6c:	f7ff fff0 	bl	8006f50 <malloc>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6260      	str	r0, [r4, #36]	; 0x24
 8006f74:	b920      	cbnz	r0, 8006f80 <_Balloc+0x20>
 8006f76:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <_Balloc+0x78>)
 8006f78:	4818      	ldr	r0, [pc, #96]	; (8006fdc <_Balloc+0x7c>)
 8006f7a:	2166      	movs	r1, #102	; 0x66
 8006f7c:	f7fe ff18 	bl	8005db0 <__assert_func>
 8006f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f84:	6006      	str	r6, [r0, #0]
 8006f86:	60c6      	str	r6, [r0, #12]
 8006f88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f8a:	68f3      	ldr	r3, [r6, #12]
 8006f8c:	b183      	cbz	r3, 8006fb0 <_Balloc+0x50>
 8006f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f96:	b9b8      	cbnz	r0, 8006fc8 <_Balloc+0x68>
 8006f98:	2101      	movs	r1, #1
 8006f9a:	fa01 f605 	lsl.w	r6, r1, r5
 8006f9e:	1d72      	adds	r2, r6, #5
 8006fa0:	0092      	lsls	r2, r2, #2
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 fb60 	bl	8007668 <_calloc_r>
 8006fa8:	b160      	cbz	r0, 8006fc4 <_Balloc+0x64>
 8006faa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fae:	e00e      	b.n	8006fce <_Balloc+0x6e>
 8006fb0:	2221      	movs	r2, #33	; 0x21
 8006fb2:	2104      	movs	r1, #4
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f000 fb57 	bl	8007668 <_calloc_r>
 8006fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fbc:	60f0      	str	r0, [r6, #12]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e4      	bne.n	8006f8e <_Balloc+0x2e>
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	6802      	ldr	r2, [r0, #0]
 8006fca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fd4:	e7f7      	b.n	8006fc6 <_Balloc+0x66>
 8006fd6:	bf00      	nop
 8006fd8:	08008a3a 	.word	0x08008a3a
 8006fdc:	08008bc4 	.word	0x08008bc4

08006fe0 <_Bfree>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	b976      	cbnz	r6, 8007008 <_Bfree+0x28>
 8006fea:	2010      	movs	r0, #16
 8006fec:	f7ff ffb0 	bl	8006f50 <malloc>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	6268      	str	r0, [r5, #36]	; 0x24
 8006ff4:	b920      	cbnz	r0, 8007000 <_Bfree+0x20>
 8006ff6:	4b09      	ldr	r3, [pc, #36]	; (800701c <_Bfree+0x3c>)
 8006ff8:	4809      	ldr	r0, [pc, #36]	; (8007020 <_Bfree+0x40>)
 8006ffa:	218a      	movs	r1, #138	; 0x8a
 8006ffc:	f7fe fed8 	bl	8005db0 <__assert_func>
 8007000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007004:	6006      	str	r6, [r0, #0]
 8007006:	60c6      	str	r6, [r0, #12]
 8007008:	b13c      	cbz	r4, 800701a <_Bfree+0x3a>
 800700a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800700c:	6862      	ldr	r2, [r4, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007014:	6021      	str	r1, [r4, #0]
 8007016:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	08008a3a 	.word	0x08008a3a
 8007020:	08008bc4 	.word	0x08008bc4

08007024 <__multadd>:
 8007024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007028:	690d      	ldr	r5, [r1, #16]
 800702a:	4607      	mov	r7, r0
 800702c:	460c      	mov	r4, r1
 800702e:	461e      	mov	r6, r3
 8007030:	f101 0c14 	add.w	ip, r1, #20
 8007034:	2000      	movs	r0, #0
 8007036:	f8dc 3000 	ldr.w	r3, [ip]
 800703a:	b299      	uxth	r1, r3
 800703c:	fb02 6101 	mla	r1, r2, r1, r6
 8007040:	0c1e      	lsrs	r6, r3, #16
 8007042:	0c0b      	lsrs	r3, r1, #16
 8007044:	fb02 3306 	mla	r3, r2, r6, r3
 8007048:	b289      	uxth	r1, r1
 800704a:	3001      	adds	r0, #1
 800704c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007050:	4285      	cmp	r5, r0
 8007052:	f84c 1b04 	str.w	r1, [ip], #4
 8007056:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800705a:	dcec      	bgt.n	8007036 <__multadd+0x12>
 800705c:	b30e      	cbz	r6, 80070a2 <__multadd+0x7e>
 800705e:	68a3      	ldr	r3, [r4, #8]
 8007060:	42ab      	cmp	r3, r5
 8007062:	dc19      	bgt.n	8007098 <__multadd+0x74>
 8007064:	6861      	ldr	r1, [r4, #4]
 8007066:	4638      	mov	r0, r7
 8007068:	3101      	adds	r1, #1
 800706a:	f7ff ff79 	bl	8006f60 <_Balloc>
 800706e:	4680      	mov	r8, r0
 8007070:	b928      	cbnz	r0, 800707e <__multadd+0x5a>
 8007072:	4602      	mov	r2, r0
 8007074:	4b0c      	ldr	r3, [pc, #48]	; (80070a8 <__multadd+0x84>)
 8007076:	480d      	ldr	r0, [pc, #52]	; (80070ac <__multadd+0x88>)
 8007078:	21b5      	movs	r1, #181	; 0xb5
 800707a:	f7fe fe99 	bl	8005db0 <__assert_func>
 800707e:	6922      	ldr	r2, [r4, #16]
 8007080:	3202      	adds	r2, #2
 8007082:	f104 010c 	add.w	r1, r4, #12
 8007086:	0092      	lsls	r2, r2, #2
 8007088:	300c      	adds	r0, #12
 800708a:	f7fe f815 	bl	80050b8 <memcpy>
 800708e:	4621      	mov	r1, r4
 8007090:	4638      	mov	r0, r7
 8007092:	f7ff ffa5 	bl	8006fe0 <_Bfree>
 8007096:	4644      	mov	r4, r8
 8007098:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800709c:	3501      	adds	r5, #1
 800709e:	615e      	str	r6, [r3, #20]
 80070a0:	6125      	str	r5, [r4, #16]
 80070a2:	4620      	mov	r0, r4
 80070a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a8:	08008b52 	.word	0x08008b52
 80070ac:	08008bc4 	.word	0x08008bc4

080070b0 <__hi0bits>:
 80070b0:	0c03      	lsrs	r3, r0, #16
 80070b2:	041b      	lsls	r3, r3, #16
 80070b4:	b9d3      	cbnz	r3, 80070ec <__hi0bits+0x3c>
 80070b6:	0400      	lsls	r0, r0, #16
 80070b8:	2310      	movs	r3, #16
 80070ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070be:	bf04      	itt	eq
 80070c0:	0200      	lsleq	r0, r0, #8
 80070c2:	3308      	addeq	r3, #8
 80070c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070c8:	bf04      	itt	eq
 80070ca:	0100      	lsleq	r0, r0, #4
 80070cc:	3304      	addeq	r3, #4
 80070ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070d2:	bf04      	itt	eq
 80070d4:	0080      	lsleq	r0, r0, #2
 80070d6:	3302      	addeq	r3, #2
 80070d8:	2800      	cmp	r0, #0
 80070da:	db05      	blt.n	80070e8 <__hi0bits+0x38>
 80070dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070e0:	f103 0301 	add.w	r3, r3, #1
 80070e4:	bf08      	it	eq
 80070e6:	2320      	moveq	r3, #32
 80070e8:	4618      	mov	r0, r3
 80070ea:	4770      	bx	lr
 80070ec:	2300      	movs	r3, #0
 80070ee:	e7e4      	b.n	80070ba <__hi0bits+0xa>

080070f0 <__lo0bits>:
 80070f0:	6803      	ldr	r3, [r0, #0]
 80070f2:	f013 0207 	ands.w	r2, r3, #7
 80070f6:	4601      	mov	r1, r0
 80070f8:	d00b      	beq.n	8007112 <__lo0bits+0x22>
 80070fa:	07da      	lsls	r2, r3, #31
 80070fc:	d423      	bmi.n	8007146 <__lo0bits+0x56>
 80070fe:	0798      	lsls	r0, r3, #30
 8007100:	bf49      	itett	mi
 8007102:	085b      	lsrmi	r3, r3, #1
 8007104:	089b      	lsrpl	r3, r3, #2
 8007106:	2001      	movmi	r0, #1
 8007108:	600b      	strmi	r3, [r1, #0]
 800710a:	bf5c      	itt	pl
 800710c:	600b      	strpl	r3, [r1, #0]
 800710e:	2002      	movpl	r0, #2
 8007110:	4770      	bx	lr
 8007112:	b298      	uxth	r0, r3
 8007114:	b9a8      	cbnz	r0, 8007142 <__lo0bits+0x52>
 8007116:	0c1b      	lsrs	r3, r3, #16
 8007118:	2010      	movs	r0, #16
 800711a:	b2da      	uxtb	r2, r3
 800711c:	b90a      	cbnz	r2, 8007122 <__lo0bits+0x32>
 800711e:	3008      	adds	r0, #8
 8007120:	0a1b      	lsrs	r3, r3, #8
 8007122:	071a      	lsls	r2, r3, #28
 8007124:	bf04      	itt	eq
 8007126:	091b      	lsreq	r3, r3, #4
 8007128:	3004      	addeq	r0, #4
 800712a:	079a      	lsls	r2, r3, #30
 800712c:	bf04      	itt	eq
 800712e:	089b      	lsreq	r3, r3, #2
 8007130:	3002      	addeq	r0, #2
 8007132:	07da      	lsls	r2, r3, #31
 8007134:	d403      	bmi.n	800713e <__lo0bits+0x4e>
 8007136:	085b      	lsrs	r3, r3, #1
 8007138:	f100 0001 	add.w	r0, r0, #1
 800713c:	d005      	beq.n	800714a <__lo0bits+0x5a>
 800713e:	600b      	str	r3, [r1, #0]
 8007140:	4770      	bx	lr
 8007142:	4610      	mov	r0, r2
 8007144:	e7e9      	b.n	800711a <__lo0bits+0x2a>
 8007146:	2000      	movs	r0, #0
 8007148:	4770      	bx	lr
 800714a:	2020      	movs	r0, #32
 800714c:	4770      	bx	lr
	...

08007150 <__i2b>:
 8007150:	b510      	push	{r4, lr}
 8007152:	460c      	mov	r4, r1
 8007154:	2101      	movs	r1, #1
 8007156:	f7ff ff03 	bl	8006f60 <_Balloc>
 800715a:	4602      	mov	r2, r0
 800715c:	b928      	cbnz	r0, 800716a <__i2b+0x1a>
 800715e:	4b05      	ldr	r3, [pc, #20]	; (8007174 <__i2b+0x24>)
 8007160:	4805      	ldr	r0, [pc, #20]	; (8007178 <__i2b+0x28>)
 8007162:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007166:	f7fe fe23 	bl	8005db0 <__assert_func>
 800716a:	2301      	movs	r3, #1
 800716c:	6144      	str	r4, [r0, #20]
 800716e:	6103      	str	r3, [r0, #16]
 8007170:	bd10      	pop	{r4, pc}
 8007172:	bf00      	nop
 8007174:	08008b52 	.word	0x08008b52
 8007178:	08008bc4 	.word	0x08008bc4

0800717c <__multiply>:
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	4691      	mov	r9, r2
 8007182:	690a      	ldr	r2, [r1, #16]
 8007184:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007188:	429a      	cmp	r2, r3
 800718a:	bfb8      	it	lt
 800718c:	460b      	movlt	r3, r1
 800718e:	460c      	mov	r4, r1
 8007190:	bfbc      	itt	lt
 8007192:	464c      	movlt	r4, r9
 8007194:	4699      	movlt	r9, r3
 8007196:	6927      	ldr	r7, [r4, #16]
 8007198:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800719c:	68a3      	ldr	r3, [r4, #8]
 800719e:	6861      	ldr	r1, [r4, #4]
 80071a0:	eb07 060a 	add.w	r6, r7, sl
 80071a4:	42b3      	cmp	r3, r6
 80071a6:	b085      	sub	sp, #20
 80071a8:	bfb8      	it	lt
 80071aa:	3101      	addlt	r1, #1
 80071ac:	f7ff fed8 	bl	8006f60 <_Balloc>
 80071b0:	b930      	cbnz	r0, 80071c0 <__multiply+0x44>
 80071b2:	4602      	mov	r2, r0
 80071b4:	4b44      	ldr	r3, [pc, #272]	; (80072c8 <__multiply+0x14c>)
 80071b6:	4845      	ldr	r0, [pc, #276]	; (80072cc <__multiply+0x150>)
 80071b8:	f240 115d 	movw	r1, #349	; 0x15d
 80071bc:	f7fe fdf8 	bl	8005db0 <__assert_func>
 80071c0:	f100 0514 	add.w	r5, r0, #20
 80071c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071c8:	462b      	mov	r3, r5
 80071ca:	2200      	movs	r2, #0
 80071cc:	4543      	cmp	r3, r8
 80071ce:	d321      	bcc.n	8007214 <__multiply+0x98>
 80071d0:	f104 0314 	add.w	r3, r4, #20
 80071d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071d8:	f109 0314 	add.w	r3, r9, #20
 80071dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071e0:	9202      	str	r2, [sp, #8]
 80071e2:	1b3a      	subs	r2, r7, r4
 80071e4:	3a15      	subs	r2, #21
 80071e6:	f022 0203 	bic.w	r2, r2, #3
 80071ea:	3204      	adds	r2, #4
 80071ec:	f104 0115 	add.w	r1, r4, #21
 80071f0:	428f      	cmp	r7, r1
 80071f2:	bf38      	it	cc
 80071f4:	2204      	movcc	r2, #4
 80071f6:	9201      	str	r2, [sp, #4]
 80071f8:	9a02      	ldr	r2, [sp, #8]
 80071fa:	9303      	str	r3, [sp, #12]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d80c      	bhi.n	800721a <__multiply+0x9e>
 8007200:	2e00      	cmp	r6, #0
 8007202:	dd03      	ble.n	800720c <__multiply+0x90>
 8007204:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007208:	2b00      	cmp	r3, #0
 800720a:	d05a      	beq.n	80072c2 <__multiply+0x146>
 800720c:	6106      	str	r6, [r0, #16]
 800720e:	b005      	add	sp, #20
 8007210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007214:	f843 2b04 	str.w	r2, [r3], #4
 8007218:	e7d8      	b.n	80071cc <__multiply+0x50>
 800721a:	f8b3 a000 	ldrh.w	sl, [r3]
 800721e:	f1ba 0f00 	cmp.w	sl, #0
 8007222:	d024      	beq.n	800726e <__multiply+0xf2>
 8007224:	f104 0e14 	add.w	lr, r4, #20
 8007228:	46a9      	mov	r9, r5
 800722a:	f04f 0c00 	mov.w	ip, #0
 800722e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007232:	f8d9 1000 	ldr.w	r1, [r9]
 8007236:	fa1f fb82 	uxth.w	fp, r2
 800723a:	b289      	uxth	r1, r1
 800723c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007240:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007244:	f8d9 2000 	ldr.w	r2, [r9]
 8007248:	4461      	add	r1, ip
 800724a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800724e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007252:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007256:	b289      	uxth	r1, r1
 8007258:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800725c:	4577      	cmp	r7, lr
 800725e:	f849 1b04 	str.w	r1, [r9], #4
 8007262:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007266:	d8e2      	bhi.n	800722e <__multiply+0xb2>
 8007268:	9a01      	ldr	r2, [sp, #4]
 800726a:	f845 c002 	str.w	ip, [r5, r2]
 800726e:	9a03      	ldr	r2, [sp, #12]
 8007270:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007274:	3304      	adds	r3, #4
 8007276:	f1b9 0f00 	cmp.w	r9, #0
 800727a:	d020      	beq.n	80072be <__multiply+0x142>
 800727c:	6829      	ldr	r1, [r5, #0]
 800727e:	f104 0c14 	add.w	ip, r4, #20
 8007282:	46ae      	mov	lr, r5
 8007284:	f04f 0a00 	mov.w	sl, #0
 8007288:	f8bc b000 	ldrh.w	fp, [ip]
 800728c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007290:	fb09 220b 	mla	r2, r9, fp, r2
 8007294:	4492      	add	sl, r2
 8007296:	b289      	uxth	r1, r1
 8007298:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800729c:	f84e 1b04 	str.w	r1, [lr], #4
 80072a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072a4:	f8be 1000 	ldrh.w	r1, [lr]
 80072a8:	0c12      	lsrs	r2, r2, #16
 80072aa:	fb09 1102 	mla	r1, r9, r2, r1
 80072ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80072b2:	4567      	cmp	r7, ip
 80072b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072b8:	d8e6      	bhi.n	8007288 <__multiply+0x10c>
 80072ba:	9a01      	ldr	r2, [sp, #4]
 80072bc:	50a9      	str	r1, [r5, r2]
 80072be:	3504      	adds	r5, #4
 80072c0:	e79a      	b.n	80071f8 <__multiply+0x7c>
 80072c2:	3e01      	subs	r6, #1
 80072c4:	e79c      	b.n	8007200 <__multiply+0x84>
 80072c6:	bf00      	nop
 80072c8:	08008b52 	.word	0x08008b52
 80072cc:	08008bc4 	.word	0x08008bc4

080072d0 <__pow5mult>:
 80072d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072d4:	4615      	mov	r5, r2
 80072d6:	f012 0203 	ands.w	r2, r2, #3
 80072da:	4606      	mov	r6, r0
 80072dc:	460f      	mov	r7, r1
 80072de:	d007      	beq.n	80072f0 <__pow5mult+0x20>
 80072e0:	4c25      	ldr	r4, [pc, #148]	; (8007378 <__pow5mult+0xa8>)
 80072e2:	3a01      	subs	r2, #1
 80072e4:	2300      	movs	r3, #0
 80072e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072ea:	f7ff fe9b 	bl	8007024 <__multadd>
 80072ee:	4607      	mov	r7, r0
 80072f0:	10ad      	asrs	r5, r5, #2
 80072f2:	d03d      	beq.n	8007370 <__pow5mult+0xa0>
 80072f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80072f6:	b97c      	cbnz	r4, 8007318 <__pow5mult+0x48>
 80072f8:	2010      	movs	r0, #16
 80072fa:	f7ff fe29 	bl	8006f50 <malloc>
 80072fe:	4602      	mov	r2, r0
 8007300:	6270      	str	r0, [r6, #36]	; 0x24
 8007302:	b928      	cbnz	r0, 8007310 <__pow5mult+0x40>
 8007304:	4b1d      	ldr	r3, [pc, #116]	; (800737c <__pow5mult+0xac>)
 8007306:	481e      	ldr	r0, [pc, #120]	; (8007380 <__pow5mult+0xb0>)
 8007308:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800730c:	f7fe fd50 	bl	8005db0 <__assert_func>
 8007310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007314:	6004      	str	r4, [r0, #0]
 8007316:	60c4      	str	r4, [r0, #12]
 8007318:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800731c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007320:	b94c      	cbnz	r4, 8007336 <__pow5mult+0x66>
 8007322:	f240 2171 	movw	r1, #625	; 0x271
 8007326:	4630      	mov	r0, r6
 8007328:	f7ff ff12 	bl	8007150 <__i2b>
 800732c:	2300      	movs	r3, #0
 800732e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007332:	4604      	mov	r4, r0
 8007334:	6003      	str	r3, [r0, #0]
 8007336:	f04f 0900 	mov.w	r9, #0
 800733a:	07eb      	lsls	r3, r5, #31
 800733c:	d50a      	bpl.n	8007354 <__pow5mult+0x84>
 800733e:	4639      	mov	r1, r7
 8007340:	4622      	mov	r2, r4
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff ff1a 	bl	800717c <__multiply>
 8007348:	4639      	mov	r1, r7
 800734a:	4680      	mov	r8, r0
 800734c:	4630      	mov	r0, r6
 800734e:	f7ff fe47 	bl	8006fe0 <_Bfree>
 8007352:	4647      	mov	r7, r8
 8007354:	106d      	asrs	r5, r5, #1
 8007356:	d00b      	beq.n	8007370 <__pow5mult+0xa0>
 8007358:	6820      	ldr	r0, [r4, #0]
 800735a:	b938      	cbnz	r0, 800736c <__pow5mult+0x9c>
 800735c:	4622      	mov	r2, r4
 800735e:	4621      	mov	r1, r4
 8007360:	4630      	mov	r0, r6
 8007362:	f7ff ff0b 	bl	800717c <__multiply>
 8007366:	6020      	str	r0, [r4, #0]
 8007368:	f8c0 9000 	str.w	r9, [r0]
 800736c:	4604      	mov	r4, r0
 800736e:	e7e4      	b.n	800733a <__pow5mult+0x6a>
 8007370:	4638      	mov	r0, r7
 8007372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007376:	bf00      	nop
 8007378:	08008d10 	.word	0x08008d10
 800737c:	08008a3a 	.word	0x08008a3a
 8007380:	08008bc4 	.word	0x08008bc4

08007384 <__lshift>:
 8007384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007388:	460c      	mov	r4, r1
 800738a:	6849      	ldr	r1, [r1, #4]
 800738c:	6923      	ldr	r3, [r4, #16]
 800738e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007392:	68a3      	ldr	r3, [r4, #8]
 8007394:	4607      	mov	r7, r0
 8007396:	4691      	mov	r9, r2
 8007398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800739c:	f108 0601 	add.w	r6, r8, #1
 80073a0:	42b3      	cmp	r3, r6
 80073a2:	db0b      	blt.n	80073bc <__lshift+0x38>
 80073a4:	4638      	mov	r0, r7
 80073a6:	f7ff fddb 	bl	8006f60 <_Balloc>
 80073aa:	4605      	mov	r5, r0
 80073ac:	b948      	cbnz	r0, 80073c2 <__lshift+0x3e>
 80073ae:	4602      	mov	r2, r0
 80073b0:	4b2a      	ldr	r3, [pc, #168]	; (800745c <__lshift+0xd8>)
 80073b2:	482b      	ldr	r0, [pc, #172]	; (8007460 <__lshift+0xdc>)
 80073b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80073b8:	f7fe fcfa 	bl	8005db0 <__assert_func>
 80073bc:	3101      	adds	r1, #1
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	e7ee      	b.n	80073a0 <__lshift+0x1c>
 80073c2:	2300      	movs	r3, #0
 80073c4:	f100 0114 	add.w	r1, r0, #20
 80073c8:	f100 0210 	add.w	r2, r0, #16
 80073cc:	4618      	mov	r0, r3
 80073ce:	4553      	cmp	r3, sl
 80073d0:	db37      	blt.n	8007442 <__lshift+0xbe>
 80073d2:	6920      	ldr	r0, [r4, #16]
 80073d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073d8:	f104 0314 	add.w	r3, r4, #20
 80073dc:	f019 091f 	ands.w	r9, r9, #31
 80073e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80073e8:	d02f      	beq.n	800744a <__lshift+0xc6>
 80073ea:	f1c9 0e20 	rsb	lr, r9, #32
 80073ee:	468a      	mov	sl, r1
 80073f0:	f04f 0c00 	mov.w	ip, #0
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	fa02 f209 	lsl.w	r2, r2, r9
 80073fa:	ea42 020c 	orr.w	r2, r2, ip
 80073fe:	f84a 2b04 	str.w	r2, [sl], #4
 8007402:	f853 2b04 	ldr.w	r2, [r3], #4
 8007406:	4298      	cmp	r0, r3
 8007408:	fa22 fc0e 	lsr.w	ip, r2, lr
 800740c:	d8f2      	bhi.n	80073f4 <__lshift+0x70>
 800740e:	1b03      	subs	r3, r0, r4
 8007410:	3b15      	subs	r3, #21
 8007412:	f023 0303 	bic.w	r3, r3, #3
 8007416:	3304      	adds	r3, #4
 8007418:	f104 0215 	add.w	r2, r4, #21
 800741c:	4290      	cmp	r0, r2
 800741e:	bf38      	it	cc
 8007420:	2304      	movcc	r3, #4
 8007422:	f841 c003 	str.w	ip, [r1, r3]
 8007426:	f1bc 0f00 	cmp.w	ip, #0
 800742a:	d001      	beq.n	8007430 <__lshift+0xac>
 800742c:	f108 0602 	add.w	r6, r8, #2
 8007430:	3e01      	subs	r6, #1
 8007432:	4638      	mov	r0, r7
 8007434:	612e      	str	r6, [r5, #16]
 8007436:	4621      	mov	r1, r4
 8007438:	f7ff fdd2 	bl	8006fe0 <_Bfree>
 800743c:	4628      	mov	r0, r5
 800743e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007442:	f842 0f04 	str.w	r0, [r2, #4]!
 8007446:	3301      	adds	r3, #1
 8007448:	e7c1      	b.n	80073ce <__lshift+0x4a>
 800744a:	3904      	subs	r1, #4
 800744c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007450:	f841 2f04 	str.w	r2, [r1, #4]!
 8007454:	4298      	cmp	r0, r3
 8007456:	d8f9      	bhi.n	800744c <__lshift+0xc8>
 8007458:	e7ea      	b.n	8007430 <__lshift+0xac>
 800745a:	bf00      	nop
 800745c:	08008b52 	.word	0x08008b52
 8007460:	08008bc4 	.word	0x08008bc4

08007464 <__mcmp>:
 8007464:	b530      	push	{r4, r5, lr}
 8007466:	6902      	ldr	r2, [r0, #16]
 8007468:	690c      	ldr	r4, [r1, #16]
 800746a:	1b12      	subs	r2, r2, r4
 800746c:	d10e      	bne.n	800748c <__mcmp+0x28>
 800746e:	f100 0314 	add.w	r3, r0, #20
 8007472:	3114      	adds	r1, #20
 8007474:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007478:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800747c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007480:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007484:	42a5      	cmp	r5, r4
 8007486:	d003      	beq.n	8007490 <__mcmp+0x2c>
 8007488:	d305      	bcc.n	8007496 <__mcmp+0x32>
 800748a:	2201      	movs	r2, #1
 800748c:	4610      	mov	r0, r2
 800748e:	bd30      	pop	{r4, r5, pc}
 8007490:	4283      	cmp	r3, r0
 8007492:	d3f3      	bcc.n	800747c <__mcmp+0x18>
 8007494:	e7fa      	b.n	800748c <__mcmp+0x28>
 8007496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800749a:	e7f7      	b.n	800748c <__mcmp+0x28>

0800749c <__mdiff>:
 800749c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a0:	460c      	mov	r4, r1
 80074a2:	4606      	mov	r6, r0
 80074a4:	4611      	mov	r1, r2
 80074a6:	4620      	mov	r0, r4
 80074a8:	4690      	mov	r8, r2
 80074aa:	f7ff ffdb 	bl	8007464 <__mcmp>
 80074ae:	1e05      	subs	r5, r0, #0
 80074b0:	d110      	bne.n	80074d4 <__mdiff+0x38>
 80074b2:	4629      	mov	r1, r5
 80074b4:	4630      	mov	r0, r6
 80074b6:	f7ff fd53 	bl	8006f60 <_Balloc>
 80074ba:	b930      	cbnz	r0, 80074ca <__mdiff+0x2e>
 80074bc:	4b3a      	ldr	r3, [pc, #232]	; (80075a8 <__mdiff+0x10c>)
 80074be:	4602      	mov	r2, r0
 80074c0:	f240 2132 	movw	r1, #562	; 0x232
 80074c4:	4839      	ldr	r0, [pc, #228]	; (80075ac <__mdiff+0x110>)
 80074c6:	f7fe fc73 	bl	8005db0 <__assert_func>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d4:	bfa4      	itt	ge
 80074d6:	4643      	movge	r3, r8
 80074d8:	46a0      	movge	r8, r4
 80074da:	4630      	mov	r0, r6
 80074dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074e0:	bfa6      	itte	ge
 80074e2:	461c      	movge	r4, r3
 80074e4:	2500      	movge	r5, #0
 80074e6:	2501      	movlt	r5, #1
 80074e8:	f7ff fd3a 	bl	8006f60 <_Balloc>
 80074ec:	b920      	cbnz	r0, 80074f8 <__mdiff+0x5c>
 80074ee:	4b2e      	ldr	r3, [pc, #184]	; (80075a8 <__mdiff+0x10c>)
 80074f0:	4602      	mov	r2, r0
 80074f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80074f6:	e7e5      	b.n	80074c4 <__mdiff+0x28>
 80074f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80074fc:	6926      	ldr	r6, [r4, #16]
 80074fe:	60c5      	str	r5, [r0, #12]
 8007500:	f104 0914 	add.w	r9, r4, #20
 8007504:	f108 0514 	add.w	r5, r8, #20
 8007508:	f100 0e14 	add.w	lr, r0, #20
 800750c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007510:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007514:	f108 0210 	add.w	r2, r8, #16
 8007518:	46f2      	mov	sl, lr
 800751a:	2100      	movs	r1, #0
 800751c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007520:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007524:	fa1f f883 	uxth.w	r8, r3
 8007528:	fa11 f18b 	uxtah	r1, r1, fp
 800752c:	0c1b      	lsrs	r3, r3, #16
 800752e:	eba1 0808 	sub.w	r8, r1, r8
 8007532:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007536:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800753a:	fa1f f888 	uxth.w	r8, r8
 800753e:	1419      	asrs	r1, r3, #16
 8007540:	454e      	cmp	r6, r9
 8007542:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007546:	f84a 3b04 	str.w	r3, [sl], #4
 800754a:	d8e7      	bhi.n	800751c <__mdiff+0x80>
 800754c:	1b33      	subs	r3, r6, r4
 800754e:	3b15      	subs	r3, #21
 8007550:	f023 0303 	bic.w	r3, r3, #3
 8007554:	3304      	adds	r3, #4
 8007556:	3415      	adds	r4, #21
 8007558:	42a6      	cmp	r6, r4
 800755a:	bf38      	it	cc
 800755c:	2304      	movcc	r3, #4
 800755e:	441d      	add	r5, r3
 8007560:	4473      	add	r3, lr
 8007562:	469e      	mov	lr, r3
 8007564:	462e      	mov	r6, r5
 8007566:	4566      	cmp	r6, ip
 8007568:	d30e      	bcc.n	8007588 <__mdiff+0xec>
 800756a:	f10c 0203 	add.w	r2, ip, #3
 800756e:	1b52      	subs	r2, r2, r5
 8007570:	f022 0203 	bic.w	r2, r2, #3
 8007574:	3d03      	subs	r5, #3
 8007576:	45ac      	cmp	ip, r5
 8007578:	bf38      	it	cc
 800757a:	2200      	movcc	r2, #0
 800757c:	441a      	add	r2, r3
 800757e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007582:	b17b      	cbz	r3, 80075a4 <__mdiff+0x108>
 8007584:	6107      	str	r7, [r0, #16]
 8007586:	e7a3      	b.n	80074d0 <__mdiff+0x34>
 8007588:	f856 8b04 	ldr.w	r8, [r6], #4
 800758c:	fa11 f288 	uxtah	r2, r1, r8
 8007590:	1414      	asrs	r4, r2, #16
 8007592:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007596:	b292      	uxth	r2, r2
 8007598:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800759c:	f84e 2b04 	str.w	r2, [lr], #4
 80075a0:	1421      	asrs	r1, r4, #16
 80075a2:	e7e0      	b.n	8007566 <__mdiff+0xca>
 80075a4:	3f01      	subs	r7, #1
 80075a6:	e7ea      	b.n	800757e <__mdiff+0xe2>
 80075a8:	08008b52 	.word	0x08008b52
 80075ac:	08008bc4 	.word	0x08008bc4

080075b0 <__d2b>:
 80075b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075b4:	4689      	mov	r9, r1
 80075b6:	2101      	movs	r1, #1
 80075b8:	ec57 6b10 	vmov	r6, r7, d0
 80075bc:	4690      	mov	r8, r2
 80075be:	f7ff fccf 	bl	8006f60 <_Balloc>
 80075c2:	4604      	mov	r4, r0
 80075c4:	b930      	cbnz	r0, 80075d4 <__d2b+0x24>
 80075c6:	4602      	mov	r2, r0
 80075c8:	4b25      	ldr	r3, [pc, #148]	; (8007660 <__d2b+0xb0>)
 80075ca:	4826      	ldr	r0, [pc, #152]	; (8007664 <__d2b+0xb4>)
 80075cc:	f240 310a 	movw	r1, #778	; 0x30a
 80075d0:	f7fe fbee 	bl	8005db0 <__assert_func>
 80075d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075dc:	bb35      	cbnz	r5, 800762c <__d2b+0x7c>
 80075de:	2e00      	cmp	r6, #0
 80075e0:	9301      	str	r3, [sp, #4]
 80075e2:	d028      	beq.n	8007636 <__d2b+0x86>
 80075e4:	4668      	mov	r0, sp
 80075e6:	9600      	str	r6, [sp, #0]
 80075e8:	f7ff fd82 	bl	80070f0 <__lo0bits>
 80075ec:	9900      	ldr	r1, [sp, #0]
 80075ee:	b300      	cbz	r0, 8007632 <__d2b+0x82>
 80075f0:	9a01      	ldr	r2, [sp, #4]
 80075f2:	f1c0 0320 	rsb	r3, r0, #32
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	430b      	orrs	r3, r1
 80075fc:	40c2      	lsrs	r2, r0
 80075fe:	6163      	str	r3, [r4, #20]
 8007600:	9201      	str	r2, [sp, #4]
 8007602:	9b01      	ldr	r3, [sp, #4]
 8007604:	61a3      	str	r3, [r4, #24]
 8007606:	2b00      	cmp	r3, #0
 8007608:	bf14      	ite	ne
 800760a:	2202      	movne	r2, #2
 800760c:	2201      	moveq	r2, #1
 800760e:	6122      	str	r2, [r4, #16]
 8007610:	b1d5      	cbz	r5, 8007648 <__d2b+0x98>
 8007612:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007616:	4405      	add	r5, r0
 8007618:	f8c9 5000 	str.w	r5, [r9]
 800761c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007620:	f8c8 0000 	str.w	r0, [r8]
 8007624:	4620      	mov	r0, r4
 8007626:	b003      	add	sp, #12
 8007628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800762c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007630:	e7d5      	b.n	80075de <__d2b+0x2e>
 8007632:	6161      	str	r1, [r4, #20]
 8007634:	e7e5      	b.n	8007602 <__d2b+0x52>
 8007636:	a801      	add	r0, sp, #4
 8007638:	f7ff fd5a 	bl	80070f0 <__lo0bits>
 800763c:	9b01      	ldr	r3, [sp, #4]
 800763e:	6163      	str	r3, [r4, #20]
 8007640:	2201      	movs	r2, #1
 8007642:	6122      	str	r2, [r4, #16]
 8007644:	3020      	adds	r0, #32
 8007646:	e7e3      	b.n	8007610 <__d2b+0x60>
 8007648:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800764c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007650:	f8c9 0000 	str.w	r0, [r9]
 8007654:	6918      	ldr	r0, [r3, #16]
 8007656:	f7ff fd2b 	bl	80070b0 <__hi0bits>
 800765a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800765e:	e7df      	b.n	8007620 <__d2b+0x70>
 8007660:	08008b52 	.word	0x08008b52
 8007664:	08008bc4 	.word	0x08008bc4

08007668 <_calloc_r>:
 8007668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800766a:	fba1 2402 	umull	r2, r4, r1, r2
 800766e:	b94c      	cbnz	r4, 8007684 <_calloc_r+0x1c>
 8007670:	4611      	mov	r1, r2
 8007672:	9201      	str	r2, [sp, #4]
 8007674:	f000 f87a 	bl	800776c <_malloc_r>
 8007678:	9a01      	ldr	r2, [sp, #4]
 800767a:	4605      	mov	r5, r0
 800767c:	b930      	cbnz	r0, 800768c <_calloc_r+0x24>
 800767e:	4628      	mov	r0, r5
 8007680:	b003      	add	sp, #12
 8007682:	bd30      	pop	{r4, r5, pc}
 8007684:	220c      	movs	r2, #12
 8007686:	6002      	str	r2, [r0, #0]
 8007688:	2500      	movs	r5, #0
 800768a:	e7f8      	b.n	800767e <_calloc_r+0x16>
 800768c:	4621      	mov	r1, r4
 800768e:	f7fd fd21 	bl	80050d4 <memset>
 8007692:	e7f4      	b.n	800767e <_calloc_r+0x16>

08007694 <_free_r>:
 8007694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007696:	2900      	cmp	r1, #0
 8007698:	d044      	beq.n	8007724 <_free_r+0x90>
 800769a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800769e:	9001      	str	r0, [sp, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f1a1 0404 	sub.w	r4, r1, #4
 80076a6:	bfb8      	it	lt
 80076a8:	18e4      	addlt	r4, r4, r3
 80076aa:	f000 fc67 	bl	8007f7c <__malloc_lock>
 80076ae:	4a1e      	ldr	r2, [pc, #120]	; (8007728 <_free_r+0x94>)
 80076b0:	9801      	ldr	r0, [sp, #4]
 80076b2:	6813      	ldr	r3, [r2, #0]
 80076b4:	b933      	cbnz	r3, 80076c4 <_free_r+0x30>
 80076b6:	6063      	str	r3, [r4, #4]
 80076b8:	6014      	str	r4, [r2, #0]
 80076ba:	b003      	add	sp, #12
 80076bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076c0:	f000 bc62 	b.w	8007f88 <__malloc_unlock>
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	d908      	bls.n	80076da <_free_r+0x46>
 80076c8:	6825      	ldr	r5, [r4, #0]
 80076ca:	1961      	adds	r1, r4, r5
 80076cc:	428b      	cmp	r3, r1
 80076ce:	bf01      	itttt	eq
 80076d0:	6819      	ldreq	r1, [r3, #0]
 80076d2:	685b      	ldreq	r3, [r3, #4]
 80076d4:	1949      	addeq	r1, r1, r5
 80076d6:	6021      	streq	r1, [r4, #0]
 80076d8:	e7ed      	b.n	80076b6 <_free_r+0x22>
 80076da:	461a      	mov	r2, r3
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	b10b      	cbz	r3, 80076e4 <_free_r+0x50>
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	d9fa      	bls.n	80076da <_free_r+0x46>
 80076e4:	6811      	ldr	r1, [r2, #0]
 80076e6:	1855      	adds	r5, r2, r1
 80076e8:	42a5      	cmp	r5, r4
 80076ea:	d10b      	bne.n	8007704 <_free_r+0x70>
 80076ec:	6824      	ldr	r4, [r4, #0]
 80076ee:	4421      	add	r1, r4
 80076f0:	1854      	adds	r4, r2, r1
 80076f2:	42a3      	cmp	r3, r4
 80076f4:	6011      	str	r1, [r2, #0]
 80076f6:	d1e0      	bne.n	80076ba <_free_r+0x26>
 80076f8:	681c      	ldr	r4, [r3, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	6053      	str	r3, [r2, #4]
 80076fe:	4421      	add	r1, r4
 8007700:	6011      	str	r1, [r2, #0]
 8007702:	e7da      	b.n	80076ba <_free_r+0x26>
 8007704:	d902      	bls.n	800770c <_free_r+0x78>
 8007706:	230c      	movs	r3, #12
 8007708:	6003      	str	r3, [r0, #0]
 800770a:	e7d6      	b.n	80076ba <_free_r+0x26>
 800770c:	6825      	ldr	r5, [r4, #0]
 800770e:	1961      	adds	r1, r4, r5
 8007710:	428b      	cmp	r3, r1
 8007712:	bf04      	itt	eq
 8007714:	6819      	ldreq	r1, [r3, #0]
 8007716:	685b      	ldreq	r3, [r3, #4]
 8007718:	6063      	str	r3, [r4, #4]
 800771a:	bf04      	itt	eq
 800771c:	1949      	addeq	r1, r1, r5
 800771e:	6021      	streq	r1, [r4, #0]
 8007720:	6054      	str	r4, [r2, #4]
 8007722:	e7ca      	b.n	80076ba <_free_r+0x26>
 8007724:	b003      	add	sp, #12
 8007726:	bd30      	pop	{r4, r5, pc}
 8007728:	20000ed8 	.word	0x20000ed8

0800772c <sbrk_aligned>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	4e0e      	ldr	r6, [pc, #56]	; (8007768 <sbrk_aligned+0x3c>)
 8007730:	460c      	mov	r4, r1
 8007732:	6831      	ldr	r1, [r6, #0]
 8007734:	4605      	mov	r5, r0
 8007736:	b911      	cbnz	r1, 800773e <sbrk_aligned+0x12>
 8007738:	f000 fb42 	bl	8007dc0 <_sbrk_r>
 800773c:	6030      	str	r0, [r6, #0]
 800773e:	4621      	mov	r1, r4
 8007740:	4628      	mov	r0, r5
 8007742:	f000 fb3d 	bl	8007dc0 <_sbrk_r>
 8007746:	1c43      	adds	r3, r0, #1
 8007748:	d00a      	beq.n	8007760 <sbrk_aligned+0x34>
 800774a:	1cc4      	adds	r4, r0, #3
 800774c:	f024 0403 	bic.w	r4, r4, #3
 8007750:	42a0      	cmp	r0, r4
 8007752:	d007      	beq.n	8007764 <sbrk_aligned+0x38>
 8007754:	1a21      	subs	r1, r4, r0
 8007756:	4628      	mov	r0, r5
 8007758:	f000 fb32 	bl	8007dc0 <_sbrk_r>
 800775c:	3001      	adds	r0, #1
 800775e:	d101      	bne.n	8007764 <sbrk_aligned+0x38>
 8007760:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007764:	4620      	mov	r0, r4
 8007766:	bd70      	pop	{r4, r5, r6, pc}
 8007768:	20000edc 	.word	0x20000edc

0800776c <_malloc_r>:
 800776c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007770:	1ccd      	adds	r5, r1, #3
 8007772:	f025 0503 	bic.w	r5, r5, #3
 8007776:	3508      	adds	r5, #8
 8007778:	2d0c      	cmp	r5, #12
 800777a:	bf38      	it	cc
 800777c:	250c      	movcc	r5, #12
 800777e:	2d00      	cmp	r5, #0
 8007780:	4607      	mov	r7, r0
 8007782:	db01      	blt.n	8007788 <_malloc_r+0x1c>
 8007784:	42a9      	cmp	r1, r5
 8007786:	d905      	bls.n	8007794 <_malloc_r+0x28>
 8007788:	230c      	movs	r3, #12
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	2600      	movs	r6, #0
 800778e:	4630      	mov	r0, r6
 8007790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007794:	4e2e      	ldr	r6, [pc, #184]	; (8007850 <_malloc_r+0xe4>)
 8007796:	f000 fbf1 	bl	8007f7c <__malloc_lock>
 800779a:	6833      	ldr	r3, [r6, #0]
 800779c:	461c      	mov	r4, r3
 800779e:	bb34      	cbnz	r4, 80077ee <_malloc_r+0x82>
 80077a0:	4629      	mov	r1, r5
 80077a2:	4638      	mov	r0, r7
 80077a4:	f7ff ffc2 	bl	800772c <sbrk_aligned>
 80077a8:	1c43      	adds	r3, r0, #1
 80077aa:	4604      	mov	r4, r0
 80077ac:	d14d      	bne.n	800784a <_malloc_r+0xde>
 80077ae:	6834      	ldr	r4, [r6, #0]
 80077b0:	4626      	mov	r6, r4
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	d140      	bne.n	8007838 <_malloc_r+0xcc>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	4631      	mov	r1, r6
 80077ba:	4638      	mov	r0, r7
 80077bc:	eb04 0803 	add.w	r8, r4, r3
 80077c0:	f000 fafe 	bl	8007dc0 <_sbrk_r>
 80077c4:	4580      	cmp	r8, r0
 80077c6:	d13a      	bne.n	800783e <_malloc_r+0xd2>
 80077c8:	6821      	ldr	r1, [r4, #0]
 80077ca:	3503      	adds	r5, #3
 80077cc:	1a6d      	subs	r5, r5, r1
 80077ce:	f025 0503 	bic.w	r5, r5, #3
 80077d2:	3508      	adds	r5, #8
 80077d4:	2d0c      	cmp	r5, #12
 80077d6:	bf38      	it	cc
 80077d8:	250c      	movcc	r5, #12
 80077da:	4629      	mov	r1, r5
 80077dc:	4638      	mov	r0, r7
 80077de:	f7ff ffa5 	bl	800772c <sbrk_aligned>
 80077e2:	3001      	adds	r0, #1
 80077e4:	d02b      	beq.n	800783e <_malloc_r+0xd2>
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	442b      	add	r3, r5
 80077ea:	6023      	str	r3, [r4, #0]
 80077ec:	e00e      	b.n	800780c <_malloc_r+0xa0>
 80077ee:	6822      	ldr	r2, [r4, #0]
 80077f0:	1b52      	subs	r2, r2, r5
 80077f2:	d41e      	bmi.n	8007832 <_malloc_r+0xc6>
 80077f4:	2a0b      	cmp	r2, #11
 80077f6:	d916      	bls.n	8007826 <_malloc_r+0xba>
 80077f8:	1961      	adds	r1, r4, r5
 80077fa:	42a3      	cmp	r3, r4
 80077fc:	6025      	str	r5, [r4, #0]
 80077fe:	bf18      	it	ne
 8007800:	6059      	strne	r1, [r3, #4]
 8007802:	6863      	ldr	r3, [r4, #4]
 8007804:	bf08      	it	eq
 8007806:	6031      	streq	r1, [r6, #0]
 8007808:	5162      	str	r2, [r4, r5]
 800780a:	604b      	str	r3, [r1, #4]
 800780c:	4638      	mov	r0, r7
 800780e:	f104 060b 	add.w	r6, r4, #11
 8007812:	f000 fbb9 	bl	8007f88 <__malloc_unlock>
 8007816:	f026 0607 	bic.w	r6, r6, #7
 800781a:	1d23      	adds	r3, r4, #4
 800781c:	1af2      	subs	r2, r6, r3
 800781e:	d0b6      	beq.n	800778e <_malloc_r+0x22>
 8007820:	1b9b      	subs	r3, r3, r6
 8007822:	50a3      	str	r3, [r4, r2]
 8007824:	e7b3      	b.n	800778e <_malloc_r+0x22>
 8007826:	6862      	ldr	r2, [r4, #4]
 8007828:	42a3      	cmp	r3, r4
 800782a:	bf0c      	ite	eq
 800782c:	6032      	streq	r2, [r6, #0]
 800782e:	605a      	strne	r2, [r3, #4]
 8007830:	e7ec      	b.n	800780c <_malloc_r+0xa0>
 8007832:	4623      	mov	r3, r4
 8007834:	6864      	ldr	r4, [r4, #4]
 8007836:	e7b2      	b.n	800779e <_malloc_r+0x32>
 8007838:	4634      	mov	r4, r6
 800783a:	6876      	ldr	r6, [r6, #4]
 800783c:	e7b9      	b.n	80077b2 <_malloc_r+0x46>
 800783e:	230c      	movs	r3, #12
 8007840:	603b      	str	r3, [r7, #0]
 8007842:	4638      	mov	r0, r7
 8007844:	f000 fba0 	bl	8007f88 <__malloc_unlock>
 8007848:	e7a1      	b.n	800778e <_malloc_r+0x22>
 800784a:	6025      	str	r5, [r4, #0]
 800784c:	e7de      	b.n	800780c <_malloc_r+0xa0>
 800784e:	bf00      	nop
 8007850:	20000ed8 	.word	0x20000ed8

08007854 <__ssputs_r>:
 8007854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	688e      	ldr	r6, [r1, #8]
 800785a:	429e      	cmp	r6, r3
 800785c:	4682      	mov	sl, r0
 800785e:	460c      	mov	r4, r1
 8007860:	4690      	mov	r8, r2
 8007862:	461f      	mov	r7, r3
 8007864:	d838      	bhi.n	80078d8 <__ssputs_r+0x84>
 8007866:	898a      	ldrh	r2, [r1, #12]
 8007868:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800786c:	d032      	beq.n	80078d4 <__ssputs_r+0x80>
 800786e:	6825      	ldr	r5, [r4, #0]
 8007870:	6909      	ldr	r1, [r1, #16]
 8007872:	eba5 0901 	sub.w	r9, r5, r1
 8007876:	6965      	ldr	r5, [r4, #20]
 8007878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800787c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007880:	3301      	adds	r3, #1
 8007882:	444b      	add	r3, r9
 8007884:	106d      	asrs	r5, r5, #1
 8007886:	429d      	cmp	r5, r3
 8007888:	bf38      	it	cc
 800788a:	461d      	movcc	r5, r3
 800788c:	0553      	lsls	r3, r2, #21
 800788e:	d531      	bpl.n	80078f4 <__ssputs_r+0xa0>
 8007890:	4629      	mov	r1, r5
 8007892:	f7ff ff6b 	bl	800776c <_malloc_r>
 8007896:	4606      	mov	r6, r0
 8007898:	b950      	cbnz	r0, 80078b0 <__ssputs_r+0x5c>
 800789a:	230c      	movs	r3, #12
 800789c:	f8ca 3000 	str.w	r3, [sl]
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078a6:	81a3      	strh	r3, [r4, #12]
 80078a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b0:	6921      	ldr	r1, [r4, #16]
 80078b2:	464a      	mov	r2, r9
 80078b4:	f7fd fc00 	bl	80050b8 <memcpy>
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c2:	81a3      	strh	r3, [r4, #12]
 80078c4:	6126      	str	r6, [r4, #16]
 80078c6:	6165      	str	r5, [r4, #20]
 80078c8:	444e      	add	r6, r9
 80078ca:	eba5 0509 	sub.w	r5, r5, r9
 80078ce:	6026      	str	r6, [r4, #0]
 80078d0:	60a5      	str	r5, [r4, #8]
 80078d2:	463e      	mov	r6, r7
 80078d4:	42be      	cmp	r6, r7
 80078d6:	d900      	bls.n	80078da <__ssputs_r+0x86>
 80078d8:	463e      	mov	r6, r7
 80078da:	6820      	ldr	r0, [r4, #0]
 80078dc:	4632      	mov	r2, r6
 80078de:	4641      	mov	r1, r8
 80078e0:	f000 fb32 	bl	8007f48 <memmove>
 80078e4:	68a3      	ldr	r3, [r4, #8]
 80078e6:	1b9b      	subs	r3, r3, r6
 80078e8:	60a3      	str	r3, [r4, #8]
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	4433      	add	r3, r6
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	2000      	movs	r0, #0
 80078f2:	e7db      	b.n	80078ac <__ssputs_r+0x58>
 80078f4:	462a      	mov	r2, r5
 80078f6:	f000 fb4d 	bl	8007f94 <_realloc_r>
 80078fa:	4606      	mov	r6, r0
 80078fc:	2800      	cmp	r0, #0
 80078fe:	d1e1      	bne.n	80078c4 <__ssputs_r+0x70>
 8007900:	6921      	ldr	r1, [r4, #16]
 8007902:	4650      	mov	r0, sl
 8007904:	f7ff fec6 	bl	8007694 <_free_r>
 8007908:	e7c7      	b.n	800789a <__ssputs_r+0x46>
	...

0800790c <_svfiprintf_r>:
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	4698      	mov	r8, r3
 8007912:	898b      	ldrh	r3, [r1, #12]
 8007914:	061b      	lsls	r3, r3, #24
 8007916:	b09d      	sub	sp, #116	; 0x74
 8007918:	4607      	mov	r7, r0
 800791a:	460d      	mov	r5, r1
 800791c:	4614      	mov	r4, r2
 800791e:	d50e      	bpl.n	800793e <_svfiprintf_r+0x32>
 8007920:	690b      	ldr	r3, [r1, #16]
 8007922:	b963      	cbnz	r3, 800793e <_svfiprintf_r+0x32>
 8007924:	2140      	movs	r1, #64	; 0x40
 8007926:	f7ff ff21 	bl	800776c <_malloc_r>
 800792a:	6028      	str	r0, [r5, #0]
 800792c:	6128      	str	r0, [r5, #16]
 800792e:	b920      	cbnz	r0, 800793a <_svfiprintf_r+0x2e>
 8007930:	230c      	movs	r3, #12
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007938:	e0d1      	b.n	8007ade <_svfiprintf_r+0x1d2>
 800793a:	2340      	movs	r3, #64	; 0x40
 800793c:	616b      	str	r3, [r5, #20]
 800793e:	2300      	movs	r3, #0
 8007940:	9309      	str	r3, [sp, #36]	; 0x24
 8007942:	2320      	movs	r3, #32
 8007944:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007948:	f8cd 800c 	str.w	r8, [sp, #12]
 800794c:	2330      	movs	r3, #48	; 0x30
 800794e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007af8 <_svfiprintf_r+0x1ec>
 8007952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007956:	f04f 0901 	mov.w	r9, #1
 800795a:	4623      	mov	r3, r4
 800795c:	469a      	mov	sl, r3
 800795e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007962:	b10a      	cbz	r2, 8007968 <_svfiprintf_r+0x5c>
 8007964:	2a25      	cmp	r2, #37	; 0x25
 8007966:	d1f9      	bne.n	800795c <_svfiprintf_r+0x50>
 8007968:	ebba 0b04 	subs.w	fp, sl, r4
 800796c:	d00b      	beq.n	8007986 <_svfiprintf_r+0x7a>
 800796e:	465b      	mov	r3, fp
 8007970:	4622      	mov	r2, r4
 8007972:	4629      	mov	r1, r5
 8007974:	4638      	mov	r0, r7
 8007976:	f7ff ff6d 	bl	8007854 <__ssputs_r>
 800797a:	3001      	adds	r0, #1
 800797c:	f000 80aa 	beq.w	8007ad4 <_svfiprintf_r+0x1c8>
 8007980:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007982:	445a      	add	r2, fp
 8007984:	9209      	str	r2, [sp, #36]	; 0x24
 8007986:	f89a 3000 	ldrb.w	r3, [sl]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 80a2 	beq.w	8007ad4 <_svfiprintf_r+0x1c8>
 8007990:	2300      	movs	r3, #0
 8007992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800799a:	f10a 0a01 	add.w	sl, sl, #1
 800799e:	9304      	str	r3, [sp, #16]
 80079a0:	9307      	str	r3, [sp, #28]
 80079a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079a6:	931a      	str	r3, [sp, #104]	; 0x68
 80079a8:	4654      	mov	r4, sl
 80079aa:	2205      	movs	r2, #5
 80079ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b0:	4851      	ldr	r0, [pc, #324]	; (8007af8 <_svfiprintf_r+0x1ec>)
 80079b2:	f7f8 fc15 	bl	80001e0 <memchr>
 80079b6:	9a04      	ldr	r2, [sp, #16]
 80079b8:	b9d8      	cbnz	r0, 80079f2 <_svfiprintf_r+0xe6>
 80079ba:	06d0      	lsls	r0, r2, #27
 80079bc:	bf44      	itt	mi
 80079be:	2320      	movmi	r3, #32
 80079c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079c4:	0711      	lsls	r1, r2, #28
 80079c6:	bf44      	itt	mi
 80079c8:	232b      	movmi	r3, #43	; 0x2b
 80079ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079ce:	f89a 3000 	ldrb.w	r3, [sl]
 80079d2:	2b2a      	cmp	r3, #42	; 0x2a
 80079d4:	d015      	beq.n	8007a02 <_svfiprintf_r+0xf6>
 80079d6:	9a07      	ldr	r2, [sp, #28]
 80079d8:	4654      	mov	r4, sl
 80079da:	2000      	movs	r0, #0
 80079dc:	f04f 0c0a 	mov.w	ip, #10
 80079e0:	4621      	mov	r1, r4
 80079e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079e6:	3b30      	subs	r3, #48	; 0x30
 80079e8:	2b09      	cmp	r3, #9
 80079ea:	d94e      	bls.n	8007a8a <_svfiprintf_r+0x17e>
 80079ec:	b1b0      	cbz	r0, 8007a1c <_svfiprintf_r+0x110>
 80079ee:	9207      	str	r2, [sp, #28]
 80079f0:	e014      	b.n	8007a1c <_svfiprintf_r+0x110>
 80079f2:	eba0 0308 	sub.w	r3, r0, r8
 80079f6:	fa09 f303 	lsl.w	r3, r9, r3
 80079fa:	4313      	orrs	r3, r2
 80079fc:	9304      	str	r3, [sp, #16]
 80079fe:	46a2      	mov	sl, r4
 8007a00:	e7d2      	b.n	80079a8 <_svfiprintf_r+0x9c>
 8007a02:	9b03      	ldr	r3, [sp, #12]
 8007a04:	1d19      	adds	r1, r3, #4
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	9103      	str	r1, [sp, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bfbb      	ittet	lt
 8007a0e:	425b      	neglt	r3, r3
 8007a10:	f042 0202 	orrlt.w	r2, r2, #2
 8007a14:	9307      	strge	r3, [sp, #28]
 8007a16:	9307      	strlt	r3, [sp, #28]
 8007a18:	bfb8      	it	lt
 8007a1a:	9204      	strlt	r2, [sp, #16]
 8007a1c:	7823      	ldrb	r3, [r4, #0]
 8007a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a20:	d10c      	bne.n	8007a3c <_svfiprintf_r+0x130>
 8007a22:	7863      	ldrb	r3, [r4, #1]
 8007a24:	2b2a      	cmp	r3, #42	; 0x2a
 8007a26:	d135      	bne.n	8007a94 <_svfiprintf_r+0x188>
 8007a28:	9b03      	ldr	r3, [sp, #12]
 8007a2a:	1d1a      	adds	r2, r3, #4
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	9203      	str	r2, [sp, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bfb8      	it	lt
 8007a34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007a38:	3402      	adds	r4, #2
 8007a3a:	9305      	str	r3, [sp, #20]
 8007a3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b08 <_svfiprintf_r+0x1fc>
 8007a40:	7821      	ldrb	r1, [r4, #0]
 8007a42:	2203      	movs	r2, #3
 8007a44:	4650      	mov	r0, sl
 8007a46:	f7f8 fbcb 	bl	80001e0 <memchr>
 8007a4a:	b140      	cbz	r0, 8007a5e <_svfiprintf_r+0x152>
 8007a4c:	2340      	movs	r3, #64	; 0x40
 8007a4e:	eba0 000a 	sub.w	r0, r0, sl
 8007a52:	fa03 f000 	lsl.w	r0, r3, r0
 8007a56:	9b04      	ldr	r3, [sp, #16]
 8007a58:	4303      	orrs	r3, r0
 8007a5a:	3401      	adds	r4, #1
 8007a5c:	9304      	str	r3, [sp, #16]
 8007a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a62:	4826      	ldr	r0, [pc, #152]	; (8007afc <_svfiprintf_r+0x1f0>)
 8007a64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a68:	2206      	movs	r2, #6
 8007a6a:	f7f8 fbb9 	bl	80001e0 <memchr>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d038      	beq.n	8007ae4 <_svfiprintf_r+0x1d8>
 8007a72:	4b23      	ldr	r3, [pc, #140]	; (8007b00 <_svfiprintf_r+0x1f4>)
 8007a74:	bb1b      	cbnz	r3, 8007abe <_svfiprintf_r+0x1b2>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	3307      	adds	r3, #7
 8007a7a:	f023 0307 	bic.w	r3, r3, #7
 8007a7e:	3308      	adds	r3, #8
 8007a80:	9303      	str	r3, [sp, #12]
 8007a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a84:	4433      	add	r3, r6
 8007a86:	9309      	str	r3, [sp, #36]	; 0x24
 8007a88:	e767      	b.n	800795a <_svfiprintf_r+0x4e>
 8007a8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a8e:	460c      	mov	r4, r1
 8007a90:	2001      	movs	r0, #1
 8007a92:	e7a5      	b.n	80079e0 <_svfiprintf_r+0xd4>
 8007a94:	2300      	movs	r3, #0
 8007a96:	3401      	adds	r4, #1
 8007a98:	9305      	str	r3, [sp, #20]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	f04f 0c0a 	mov.w	ip, #10
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aa6:	3a30      	subs	r2, #48	; 0x30
 8007aa8:	2a09      	cmp	r2, #9
 8007aaa:	d903      	bls.n	8007ab4 <_svfiprintf_r+0x1a8>
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0c5      	beq.n	8007a3c <_svfiprintf_r+0x130>
 8007ab0:	9105      	str	r1, [sp, #20]
 8007ab2:	e7c3      	b.n	8007a3c <_svfiprintf_r+0x130>
 8007ab4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ab8:	4604      	mov	r4, r0
 8007aba:	2301      	movs	r3, #1
 8007abc:	e7f0      	b.n	8007aa0 <_svfiprintf_r+0x194>
 8007abe:	ab03      	add	r3, sp, #12
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	462a      	mov	r2, r5
 8007ac4:	4b0f      	ldr	r3, [pc, #60]	; (8007b04 <_svfiprintf_r+0x1f8>)
 8007ac6:	a904      	add	r1, sp, #16
 8007ac8:	4638      	mov	r0, r7
 8007aca:	f7fd fbab 	bl	8005224 <_printf_float>
 8007ace:	1c42      	adds	r2, r0, #1
 8007ad0:	4606      	mov	r6, r0
 8007ad2:	d1d6      	bne.n	8007a82 <_svfiprintf_r+0x176>
 8007ad4:	89ab      	ldrh	r3, [r5, #12]
 8007ad6:	065b      	lsls	r3, r3, #25
 8007ad8:	f53f af2c 	bmi.w	8007934 <_svfiprintf_r+0x28>
 8007adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ade:	b01d      	add	sp, #116	; 0x74
 8007ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae4:	ab03      	add	r3, sp, #12
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	462a      	mov	r2, r5
 8007aea:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <_svfiprintf_r+0x1f8>)
 8007aec:	a904      	add	r1, sp, #16
 8007aee:	4638      	mov	r0, r7
 8007af0:	f7fd fe3c 	bl	800576c <_printf_i>
 8007af4:	e7eb      	b.n	8007ace <_svfiprintf_r+0x1c2>
 8007af6:	bf00      	nop
 8007af8:	08008d1c 	.word	0x08008d1c
 8007afc:	08008d26 	.word	0x08008d26
 8007b00:	08005225 	.word	0x08005225
 8007b04:	08007855 	.word	0x08007855
 8007b08:	08008d22 	.word	0x08008d22

08007b0c <__sfputc_r>:
 8007b0c:	6893      	ldr	r3, [r2, #8]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	b410      	push	{r4}
 8007b14:	6093      	str	r3, [r2, #8]
 8007b16:	da08      	bge.n	8007b2a <__sfputc_r+0x1e>
 8007b18:	6994      	ldr	r4, [r2, #24]
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	db01      	blt.n	8007b22 <__sfputc_r+0x16>
 8007b1e:	290a      	cmp	r1, #10
 8007b20:	d103      	bne.n	8007b2a <__sfputc_r+0x1e>
 8007b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b26:	f7fe b883 	b.w	8005c30 <__swbuf_r>
 8007b2a:	6813      	ldr	r3, [r2, #0]
 8007b2c:	1c58      	adds	r0, r3, #1
 8007b2e:	6010      	str	r0, [r2, #0]
 8007b30:	7019      	strb	r1, [r3, #0]
 8007b32:	4608      	mov	r0, r1
 8007b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <__sfputs_r>:
 8007b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	460f      	mov	r7, r1
 8007b40:	4614      	mov	r4, r2
 8007b42:	18d5      	adds	r5, r2, r3
 8007b44:	42ac      	cmp	r4, r5
 8007b46:	d101      	bne.n	8007b4c <__sfputs_r+0x12>
 8007b48:	2000      	movs	r0, #0
 8007b4a:	e007      	b.n	8007b5c <__sfputs_r+0x22>
 8007b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b50:	463a      	mov	r2, r7
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7ff ffda 	bl	8007b0c <__sfputc_r>
 8007b58:	1c43      	adds	r3, r0, #1
 8007b5a:	d1f3      	bne.n	8007b44 <__sfputs_r+0xa>
 8007b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b60 <_vfiprintf_r>:
 8007b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b64:	460d      	mov	r5, r1
 8007b66:	b09d      	sub	sp, #116	; 0x74
 8007b68:	4614      	mov	r4, r2
 8007b6a:	4698      	mov	r8, r3
 8007b6c:	4606      	mov	r6, r0
 8007b6e:	b118      	cbz	r0, 8007b78 <_vfiprintf_r+0x18>
 8007b70:	6983      	ldr	r3, [r0, #24]
 8007b72:	b90b      	cbnz	r3, 8007b78 <_vfiprintf_r+0x18>
 8007b74:	f7ff f8d0 	bl	8006d18 <__sinit>
 8007b78:	4b89      	ldr	r3, [pc, #548]	; (8007da0 <_vfiprintf_r+0x240>)
 8007b7a:	429d      	cmp	r5, r3
 8007b7c:	d11b      	bne.n	8007bb6 <_vfiprintf_r+0x56>
 8007b7e:	6875      	ldr	r5, [r6, #4]
 8007b80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b82:	07d9      	lsls	r1, r3, #31
 8007b84:	d405      	bmi.n	8007b92 <_vfiprintf_r+0x32>
 8007b86:	89ab      	ldrh	r3, [r5, #12]
 8007b88:	059a      	lsls	r2, r3, #22
 8007b8a:	d402      	bmi.n	8007b92 <_vfiprintf_r+0x32>
 8007b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b8e:	f7ff f978 	bl	8006e82 <__retarget_lock_acquire_recursive>
 8007b92:	89ab      	ldrh	r3, [r5, #12]
 8007b94:	071b      	lsls	r3, r3, #28
 8007b96:	d501      	bpl.n	8007b9c <_vfiprintf_r+0x3c>
 8007b98:	692b      	ldr	r3, [r5, #16]
 8007b9a:	b9eb      	cbnz	r3, 8007bd8 <_vfiprintf_r+0x78>
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7fe f898 	bl	8005cd4 <__swsetup_r>
 8007ba4:	b1c0      	cbz	r0, 8007bd8 <_vfiprintf_r+0x78>
 8007ba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ba8:	07dc      	lsls	r4, r3, #31
 8007baa:	d50e      	bpl.n	8007bca <_vfiprintf_r+0x6a>
 8007bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bb0:	b01d      	add	sp, #116	; 0x74
 8007bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb6:	4b7b      	ldr	r3, [pc, #492]	; (8007da4 <_vfiprintf_r+0x244>)
 8007bb8:	429d      	cmp	r5, r3
 8007bba:	d101      	bne.n	8007bc0 <_vfiprintf_r+0x60>
 8007bbc:	68b5      	ldr	r5, [r6, #8]
 8007bbe:	e7df      	b.n	8007b80 <_vfiprintf_r+0x20>
 8007bc0:	4b79      	ldr	r3, [pc, #484]	; (8007da8 <_vfiprintf_r+0x248>)
 8007bc2:	429d      	cmp	r5, r3
 8007bc4:	bf08      	it	eq
 8007bc6:	68f5      	ldreq	r5, [r6, #12]
 8007bc8:	e7da      	b.n	8007b80 <_vfiprintf_r+0x20>
 8007bca:	89ab      	ldrh	r3, [r5, #12]
 8007bcc:	0598      	lsls	r0, r3, #22
 8007bce:	d4ed      	bmi.n	8007bac <_vfiprintf_r+0x4c>
 8007bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bd2:	f7ff f957 	bl	8006e84 <__retarget_lock_release_recursive>
 8007bd6:	e7e9      	b.n	8007bac <_vfiprintf_r+0x4c>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	9309      	str	r3, [sp, #36]	; 0x24
 8007bdc:	2320      	movs	r3, #32
 8007bde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007be2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007be6:	2330      	movs	r3, #48	; 0x30
 8007be8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007dac <_vfiprintf_r+0x24c>
 8007bec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bf0:	f04f 0901 	mov.w	r9, #1
 8007bf4:	4623      	mov	r3, r4
 8007bf6:	469a      	mov	sl, r3
 8007bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bfc:	b10a      	cbz	r2, 8007c02 <_vfiprintf_r+0xa2>
 8007bfe:	2a25      	cmp	r2, #37	; 0x25
 8007c00:	d1f9      	bne.n	8007bf6 <_vfiprintf_r+0x96>
 8007c02:	ebba 0b04 	subs.w	fp, sl, r4
 8007c06:	d00b      	beq.n	8007c20 <_vfiprintf_r+0xc0>
 8007c08:	465b      	mov	r3, fp
 8007c0a:	4622      	mov	r2, r4
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f7ff ff93 	bl	8007b3a <__sfputs_r>
 8007c14:	3001      	adds	r0, #1
 8007c16:	f000 80aa 	beq.w	8007d6e <_vfiprintf_r+0x20e>
 8007c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c1c:	445a      	add	r2, fp
 8007c1e:	9209      	str	r2, [sp, #36]	; 0x24
 8007c20:	f89a 3000 	ldrb.w	r3, [sl]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 80a2 	beq.w	8007d6e <_vfiprintf_r+0x20e>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c34:	f10a 0a01 	add.w	sl, sl, #1
 8007c38:	9304      	str	r3, [sp, #16]
 8007c3a:	9307      	str	r3, [sp, #28]
 8007c3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c40:	931a      	str	r3, [sp, #104]	; 0x68
 8007c42:	4654      	mov	r4, sl
 8007c44:	2205      	movs	r2, #5
 8007c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c4a:	4858      	ldr	r0, [pc, #352]	; (8007dac <_vfiprintf_r+0x24c>)
 8007c4c:	f7f8 fac8 	bl	80001e0 <memchr>
 8007c50:	9a04      	ldr	r2, [sp, #16]
 8007c52:	b9d8      	cbnz	r0, 8007c8c <_vfiprintf_r+0x12c>
 8007c54:	06d1      	lsls	r1, r2, #27
 8007c56:	bf44      	itt	mi
 8007c58:	2320      	movmi	r3, #32
 8007c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c5e:	0713      	lsls	r3, r2, #28
 8007c60:	bf44      	itt	mi
 8007c62:	232b      	movmi	r3, #43	; 0x2b
 8007c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c68:	f89a 3000 	ldrb.w	r3, [sl]
 8007c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c6e:	d015      	beq.n	8007c9c <_vfiprintf_r+0x13c>
 8007c70:	9a07      	ldr	r2, [sp, #28]
 8007c72:	4654      	mov	r4, sl
 8007c74:	2000      	movs	r0, #0
 8007c76:	f04f 0c0a 	mov.w	ip, #10
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c80:	3b30      	subs	r3, #48	; 0x30
 8007c82:	2b09      	cmp	r3, #9
 8007c84:	d94e      	bls.n	8007d24 <_vfiprintf_r+0x1c4>
 8007c86:	b1b0      	cbz	r0, 8007cb6 <_vfiprintf_r+0x156>
 8007c88:	9207      	str	r2, [sp, #28]
 8007c8a:	e014      	b.n	8007cb6 <_vfiprintf_r+0x156>
 8007c8c:	eba0 0308 	sub.w	r3, r0, r8
 8007c90:	fa09 f303 	lsl.w	r3, r9, r3
 8007c94:	4313      	orrs	r3, r2
 8007c96:	9304      	str	r3, [sp, #16]
 8007c98:	46a2      	mov	sl, r4
 8007c9a:	e7d2      	b.n	8007c42 <_vfiprintf_r+0xe2>
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	1d19      	adds	r1, r3, #4
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	9103      	str	r1, [sp, #12]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bfbb      	ittet	lt
 8007ca8:	425b      	neglt	r3, r3
 8007caa:	f042 0202 	orrlt.w	r2, r2, #2
 8007cae:	9307      	strge	r3, [sp, #28]
 8007cb0:	9307      	strlt	r3, [sp, #28]
 8007cb2:	bfb8      	it	lt
 8007cb4:	9204      	strlt	r2, [sp, #16]
 8007cb6:	7823      	ldrb	r3, [r4, #0]
 8007cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8007cba:	d10c      	bne.n	8007cd6 <_vfiprintf_r+0x176>
 8007cbc:	7863      	ldrb	r3, [r4, #1]
 8007cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8007cc0:	d135      	bne.n	8007d2e <_vfiprintf_r+0x1ce>
 8007cc2:	9b03      	ldr	r3, [sp, #12]
 8007cc4:	1d1a      	adds	r2, r3, #4
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	9203      	str	r2, [sp, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bfb8      	it	lt
 8007cce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007cd2:	3402      	adds	r4, #2
 8007cd4:	9305      	str	r3, [sp, #20]
 8007cd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007dbc <_vfiprintf_r+0x25c>
 8007cda:	7821      	ldrb	r1, [r4, #0]
 8007cdc:	2203      	movs	r2, #3
 8007cde:	4650      	mov	r0, sl
 8007ce0:	f7f8 fa7e 	bl	80001e0 <memchr>
 8007ce4:	b140      	cbz	r0, 8007cf8 <_vfiprintf_r+0x198>
 8007ce6:	2340      	movs	r3, #64	; 0x40
 8007ce8:	eba0 000a 	sub.w	r0, r0, sl
 8007cec:	fa03 f000 	lsl.w	r0, r3, r0
 8007cf0:	9b04      	ldr	r3, [sp, #16]
 8007cf2:	4303      	orrs	r3, r0
 8007cf4:	3401      	adds	r4, #1
 8007cf6:	9304      	str	r3, [sp, #16]
 8007cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cfc:	482c      	ldr	r0, [pc, #176]	; (8007db0 <_vfiprintf_r+0x250>)
 8007cfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d02:	2206      	movs	r2, #6
 8007d04:	f7f8 fa6c 	bl	80001e0 <memchr>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d03f      	beq.n	8007d8c <_vfiprintf_r+0x22c>
 8007d0c:	4b29      	ldr	r3, [pc, #164]	; (8007db4 <_vfiprintf_r+0x254>)
 8007d0e:	bb1b      	cbnz	r3, 8007d58 <_vfiprintf_r+0x1f8>
 8007d10:	9b03      	ldr	r3, [sp, #12]
 8007d12:	3307      	adds	r3, #7
 8007d14:	f023 0307 	bic.w	r3, r3, #7
 8007d18:	3308      	adds	r3, #8
 8007d1a:	9303      	str	r3, [sp, #12]
 8007d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d1e:	443b      	add	r3, r7
 8007d20:	9309      	str	r3, [sp, #36]	; 0x24
 8007d22:	e767      	b.n	8007bf4 <_vfiprintf_r+0x94>
 8007d24:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d28:	460c      	mov	r4, r1
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	e7a5      	b.n	8007c7a <_vfiprintf_r+0x11a>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	3401      	adds	r4, #1
 8007d32:	9305      	str	r3, [sp, #20]
 8007d34:	4619      	mov	r1, r3
 8007d36:	f04f 0c0a 	mov.w	ip, #10
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d40:	3a30      	subs	r2, #48	; 0x30
 8007d42:	2a09      	cmp	r2, #9
 8007d44:	d903      	bls.n	8007d4e <_vfiprintf_r+0x1ee>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d0c5      	beq.n	8007cd6 <_vfiprintf_r+0x176>
 8007d4a:	9105      	str	r1, [sp, #20]
 8007d4c:	e7c3      	b.n	8007cd6 <_vfiprintf_r+0x176>
 8007d4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d52:	4604      	mov	r4, r0
 8007d54:	2301      	movs	r3, #1
 8007d56:	e7f0      	b.n	8007d3a <_vfiprintf_r+0x1da>
 8007d58:	ab03      	add	r3, sp, #12
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4b16      	ldr	r3, [pc, #88]	; (8007db8 <_vfiprintf_r+0x258>)
 8007d60:	a904      	add	r1, sp, #16
 8007d62:	4630      	mov	r0, r6
 8007d64:	f7fd fa5e 	bl	8005224 <_printf_float>
 8007d68:	4607      	mov	r7, r0
 8007d6a:	1c78      	adds	r0, r7, #1
 8007d6c:	d1d6      	bne.n	8007d1c <_vfiprintf_r+0x1bc>
 8007d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d70:	07d9      	lsls	r1, r3, #31
 8007d72:	d405      	bmi.n	8007d80 <_vfiprintf_r+0x220>
 8007d74:	89ab      	ldrh	r3, [r5, #12]
 8007d76:	059a      	lsls	r2, r3, #22
 8007d78:	d402      	bmi.n	8007d80 <_vfiprintf_r+0x220>
 8007d7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d7c:	f7ff f882 	bl	8006e84 <__retarget_lock_release_recursive>
 8007d80:	89ab      	ldrh	r3, [r5, #12]
 8007d82:	065b      	lsls	r3, r3, #25
 8007d84:	f53f af12 	bmi.w	8007bac <_vfiprintf_r+0x4c>
 8007d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d8a:	e711      	b.n	8007bb0 <_vfiprintf_r+0x50>
 8007d8c:	ab03      	add	r3, sp, #12
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	462a      	mov	r2, r5
 8007d92:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <_vfiprintf_r+0x258>)
 8007d94:	a904      	add	r1, sp, #16
 8007d96:	4630      	mov	r0, r6
 8007d98:	f7fd fce8 	bl	800576c <_printf_i>
 8007d9c:	e7e4      	b.n	8007d68 <_vfiprintf_r+0x208>
 8007d9e:	bf00      	nop
 8007da0:	08008b84 	.word	0x08008b84
 8007da4:	08008ba4 	.word	0x08008ba4
 8007da8:	08008b64 	.word	0x08008b64
 8007dac:	08008d1c 	.word	0x08008d1c
 8007db0:	08008d26 	.word	0x08008d26
 8007db4:	08005225 	.word	0x08005225
 8007db8:	08007b3b 	.word	0x08007b3b
 8007dbc:	08008d22 	.word	0x08008d22

08007dc0 <_sbrk_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d06      	ldr	r5, [pc, #24]	; (8007ddc <_sbrk_r+0x1c>)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	4608      	mov	r0, r1
 8007dca:	602b      	str	r3, [r5, #0]
 8007dcc:	f7fd f924 	bl	8005018 <_sbrk>
 8007dd0:	1c43      	adds	r3, r0, #1
 8007dd2:	d102      	bne.n	8007dda <_sbrk_r+0x1a>
 8007dd4:	682b      	ldr	r3, [r5, #0]
 8007dd6:	b103      	cbz	r3, 8007dda <_sbrk_r+0x1a>
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	bd38      	pop	{r3, r4, r5, pc}
 8007ddc:	20000ee0 	.word	0x20000ee0

08007de0 <__sread>:
 8007de0:	b510      	push	{r4, lr}
 8007de2:	460c      	mov	r4, r1
 8007de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de8:	f000 f904 	bl	8007ff4 <_read_r>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	bfab      	itete	ge
 8007df0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007df2:	89a3      	ldrhlt	r3, [r4, #12]
 8007df4:	181b      	addge	r3, r3, r0
 8007df6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dfa:	bfac      	ite	ge
 8007dfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dfe:	81a3      	strhlt	r3, [r4, #12]
 8007e00:	bd10      	pop	{r4, pc}

08007e02 <__swrite>:
 8007e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e06:	461f      	mov	r7, r3
 8007e08:	898b      	ldrh	r3, [r1, #12]
 8007e0a:	05db      	lsls	r3, r3, #23
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	4616      	mov	r6, r2
 8007e12:	d505      	bpl.n	8007e20 <__swrite+0x1e>
 8007e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e18:	2302      	movs	r3, #2
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f000 f870 	bl	8007f00 <_lseek_r>
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e2a:	81a3      	strh	r3, [r4, #12]
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	463b      	mov	r3, r7
 8007e30:	4628      	mov	r0, r5
 8007e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e36:	f000 b817 	b.w	8007e68 <_write_r>

08007e3a <__sseek>:
 8007e3a:	b510      	push	{r4, lr}
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e42:	f000 f85d 	bl	8007f00 <_lseek_r>
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	bf15      	itete	ne
 8007e4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e56:	81a3      	strheq	r3, [r4, #12]
 8007e58:	bf18      	it	ne
 8007e5a:	81a3      	strhne	r3, [r4, #12]
 8007e5c:	bd10      	pop	{r4, pc}

08007e5e <__sclose>:
 8007e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e62:	f000 b81b 	b.w	8007e9c <_close_r>
	...

08007e68 <_write_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4d07      	ldr	r5, [pc, #28]	; (8007e88 <_write_r+0x20>)
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	4608      	mov	r0, r1
 8007e70:	4611      	mov	r1, r2
 8007e72:	2200      	movs	r2, #0
 8007e74:	602a      	str	r2, [r5, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	f7fd f8c0 	bl	8004ffc <_write>
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	d102      	bne.n	8007e86 <_write_r+0x1e>
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	b103      	cbz	r3, 8007e86 <_write_r+0x1e>
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	20000ee0 	.word	0x20000ee0

08007e8c <abort>:
 8007e8c:	b508      	push	{r3, lr}
 8007e8e:	2006      	movs	r0, #6
 8007e90:	f000 f8ea 	bl	8008068 <raise>
 8007e94:	2001      	movs	r0, #1
 8007e96:	f7fd f8a4 	bl	8004fe2 <_exit>
	...

08007e9c <_close_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4d06      	ldr	r5, [pc, #24]	; (8007eb8 <_close_r+0x1c>)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	602b      	str	r3, [r5, #0]
 8007ea8:	f7fd f8d0 	bl	800504c <_close>
 8007eac:	1c43      	adds	r3, r0, #1
 8007eae:	d102      	bne.n	8007eb6 <_close_r+0x1a>
 8007eb0:	682b      	ldr	r3, [r5, #0]
 8007eb2:	b103      	cbz	r3, 8007eb6 <_close_r+0x1a>
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	bd38      	pop	{r3, r4, r5, pc}
 8007eb8:	20000ee0 	.word	0x20000ee0

08007ebc <_fstat_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	4d07      	ldr	r5, [pc, #28]	; (8007edc <_fstat_r+0x20>)
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	602b      	str	r3, [r5, #0]
 8007eca:	f7fd f8c2 	bl	8005052 <_fstat>
 8007ece:	1c43      	adds	r3, r0, #1
 8007ed0:	d102      	bne.n	8007ed8 <_fstat_r+0x1c>
 8007ed2:	682b      	ldr	r3, [r5, #0]
 8007ed4:	b103      	cbz	r3, 8007ed8 <_fstat_r+0x1c>
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	bd38      	pop	{r3, r4, r5, pc}
 8007eda:	bf00      	nop
 8007edc:	20000ee0 	.word	0x20000ee0

08007ee0 <_isatty_r>:
 8007ee0:	b538      	push	{r3, r4, r5, lr}
 8007ee2:	4d06      	ldr	r5, [pc, #24]	; (8007efc <_isatty_r+0x1c>)
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	4608      	mov	r0, r1
 8007eea:	602b      	str	r3, [r5, #0]
 8007eec:	f7fd f8b6 	bl	800505c <_isatty>
 8007ef0:	1c43      	adds	r3, r0, #1
 8007ef2:	d102      	bne.n	8007efa <_isatty_r+0x1a>
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	b103      	cbz	r3, 8007efa <_isatty_r+0x1a>
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	20000ee0 	.word	0x20000ee0

08007f00 <_lseek_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d07      	ldr	r5, [pc, #28]	; (8007f20 <_lseek_r+0x20>)
 8007f04:	4604      	mov	r4, r0
 8007f06:	4608      	mov	r0, r1
 8007f08:	4611      	mov	r1, r2
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	602a      	str	r2, [r5, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f7fd f8a6 	bl	8005060 <_lseek>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_lseek_r+0x1e>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_lseek_r+0x1e>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	20000ee0 	.word	0x20000ee0

08007f24 <__ascii_mbtowc>:
 8007f24:	b082      	sub	sp, #8
 8007f26:	b901      	cbnz	r1, 8007f2a <__ascii_mbtowc+0x6>
 8007f28:	a901      	add	r1, sp, #4
 8007f2a:	b142      	cbz	r2, 8007f3e <__ascii_mbtowc+0x1a>
 8007f2c:	b14b      	cbz	r3, 8007f42 <__ascii_mbtowc+0x1e>
 8007f2e:	7813      	ldrb	r3, [r2, #0]
 8007f30:	600b      	str	r3, [r1, #0]
 8007f32:	7812      	ldrb	r2, [r2, #0]
 8007f34:	1e10      	subs	r0, r2, #0
 8007f36:	bf18      	it	ne
 8007f38:	2001      	movne	r0, #1
 8007f3a:	b002      	add	sp, #8
 8007f3c:	4770      	bx	lr
 8007f3e:	4610      	mov	r0, r2
 8007f40:	e7fb      	b.n	8007f3a <__ascii_mbtowc+0x16>
 8007f42:	f06f 0001 	mvn.w	r0, #1
 8007f46:	e7f8      	b.n	8007f3a <__ascii_mbtowc+0x16>

08007f48 <memmove>:
 8007f48:	4288      	cmp	r0, r1
 8007f4a:	b510      	push	{r4, lr}
 8007f4c:	eb01 0402 	add.w	r4, r1, r2
 8007f50:	d902      	bls.n	8007f58 <memmove+0x10>
 8007f52:	4284      	cmp	r4, r0
 8007f54:	4623      	mov	r3, r4
 8007f56:	d807      	bhi.n	8007f68 <memmove+0x20>
 8007f58:	1e43      	subs	r3, r0, #1
 8007f5a:	42a1      	cmp	r1, r4
 8007f5c:	d008      	beq.n	8007f70 <memmove+0x28>
 8007f5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f66:	e7f8      	b.n	8007f5a <memmove+0x12>
 8007f68:	4402      	add	r2, r0
 8007f6a:	4601      	mov	r1, r0
 8007f6c:	428a      	cmp	r2, r1
 8007f6e:	d100      	bne.n	8007f72 <memmove+0x2a>
 8007f70:	bd10      	pop	{r4, pc}
 8007f72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f7a:	e7f7      	b.n	8007f6c <memmove+0x24>

08007f7c <__malloc_lock>:
 8007f7c:	4801      	ldr	r0, [pc, #4]	; (8007f84 <__malloc_lock+0x8>)
 8007f7e:	f7fe bf80 	b.w	8006e82 <__retarget_lock_acquire_recursive>
 8007f82:	bf00      	nop
 8007f84:	20000ed4 	.word	0x20000ed4

08007f88 <__malloc_unlock>:
 8007f88:	4801      	ldr	r0, [pc, #4]	; (8007f90 <__malloc_unlock+0x8>)
 8007f8a:	f7fe bf7b 	b.w	8006e84 <__retarget_lock_release_recursive>
 8007f8e:	bf00      	nop
 8007f90:	20000ed4 	.word	0x20000ed4

08007f94 <_realloc_r>:
 8007f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f98:	4680      	mov	r8, r0
 8007f9a:	4614      	mov	r4, r2
 8007f9c:	460e      	mov	r6, r1
 8007f9e:	b921      	cbnz	r1, 8007faa <_realloc_r+0x16>
 8007fa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	f7ff bbe1 	b.w	800776c <_malloc_r>
 8007faa:	b92a      	cbnz	r2, 8007fb8 <_realloc_r+0x24>
 8007fac:	f7ff fb72 	bl	8007694 <_free_r>
 8007fb0:	4625      	mov	r5, r4
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb8:	f000 f87f 	bl	80080ba <_malloc_usable_size_r>
 8007fbc:	4284      	cmp	r4, r0
 8007fbe:	4607      	mov	r7, r0
 8007fc0:	d802      	bhi.n	8007fc8 <_realloc_r+0x34>
 8007fc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007fc6:	d812      	bhi.n	8007fee <_realloc_r+0x5a>
 8007fc8:	4621      	mov	r1, r4
 8007fca:	4640      	mov	r0, r8
 8007fcc:	f7ff fbce 	bl	800776c <_malloc_r>
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d0ed      	beq.n	8007fb2 <_realloc_r+0x1e>
 8007fd6:	42bc      	cmp	r4, r7
 8007fd8:	4622      	mov	r2, r4
 8007fda:	4631      	mov	r1, r6
 8007fdc:	bf28      	it	cs
 8007fde:	463a      	movcs	r2, r7
 8007fe0:	f7fd f86a 	bl	80050b8 <memcpy>
 8007fe4:	4631      	mov	r1, r6
 8007fe6:	4640      	mov	r0, r8
 8007fe8:	f7ff fb54 	bl	8007694 <_free_r>
 8007fec:	e7e1      	b.n	8007fb2 <_realloc_r+0x1e>
 8007fee:	4635      	mov	r5, r6
 8007ff0:	e7df      	b.n	8007fb2 <_realloc_r+0x1e>
	...

08007ff4 <_read_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d07      	ldr	r5, [pc, #28]	; (8008014 <_read_r+0x20>)
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	4608      	mov	r0, r1
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	2200      	movs	r2, #0
 8008000:	602a      	str	r2, [r5, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	f7fc fff3 	bl	8004fee <_read>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d102      	bne.n	8008012 <_read_r+0x1e>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	b103      	cbz	r3, 8008012 <_read_r+0x1e>
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	20000ee0 	.word	0x20000ee0

08008018 <_raise_r>:
 8008018:	291f      	cmp	r1, #31
 800801a:	b538      	push	{r3, r4, r5, lr}
 800801c:	4604      	mov	r4, r0
 800801e:	460d      	mov	r5, r1
 8008020:	d904      	bls.n	800802c <_raise_r+0x14>
 8008022:	2316      	movs	r3, #22
 8008024:	6003      	str	r3, [r0, #0]
 8008026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800802e:	b112      	cbz	r2, 8008036 <_raise_r+0x1e>
 8008030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008034:	b94b      	cbnz	r3, 800804a <_raise_r+0x32>
 8008036:	4620      	mov	r0, r4
 8008038:	f000 f830 	bl	800809c <_getpid_r>
 800803c:	462a      	mov	r2, r5
 800803e:	4601      	mov	r1, r0
 8008040:	4620      	mov	r0, r4
 8008042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008046:	f000 b817 	b.w	8008078 <_kill_r>
 800804a:	2b01      	cmp	r3, #1
 800804c:	d00a      	beq.n	8008064 <_raise_r+0x4c>
 800804e:	1c59      	adds	r1, r3, #1
 8008050:	d103      	bne.n	800805a <_raise_r+0x42>
 8008052:	2316      	movs	r3, #22
 8008054:	6003      	str	r3, [r0, #0]
 8008056:	2001      	movs	r0, #1
 8008058:	e7e7      	b.n	800802a <_raise_r+0x12>
 800805a:	2400      	movs	r4, #0
 800805c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008060:	4628      	mov	r0, r5
 8008062:	4798      	blx	r3
 8008064:	2000      	movs	r0, #0
 8008066:	e7e0      	b.n	800802a <_raise_r+0x12>

08008068 <raise>:
 8008068:	4b02      	ldr	r3, [pc, #8]	; (8008074 <raise+0xc>)
 800806a:	4601      	mov	r1, r0
 800806c:	6818      	ldr	r0, [r3, #0]
 800806e:	f7ff bfd3 	b.w	8008018 <_raise_r>
 8008072:	bf00      	nop
 8008074:	2000008c 	.word	0x2000008c

08008078 <_kill_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4d07      	ldr	r5, [pc, #28]	; (8008098 <_kill_r+0x20>)
 800807c:	2300      	movs	r3, #0
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	4611      	mov	r1, r2
 8008084:	602b      	str	r3, [r5, #0]
 8008086:	f7fc ffa4 	bl	8004fd2 <_kill>
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	d102      	bne.n	8008094 <_kill_r+0x1c>
 800808e:	682b      	ldr	r3, [r5, #0]
 8008090:	b103      	cbz	r3, 8008094 <_kill_r+0x1c>
 8008092:	6023      	str	r3, [r4, #0]
 8008094:	bd38      	pop	{r3, r4, r5, pc}
 8008096:	bf00      	nop
 8008098:	20000ee0 	.word	0x20000ee0

0800809c <_getpid_r>:
 800809c:	f7fc bf97 	b.w	8004fce <_getpid>

080080a0 <__ascii_wctomb>:
 80080a0:	b149      	cbz	r1, 80080b6 <__ascii_wctomb+0x16>
 80080a2:	2aff      	cmp	r2, #255	; 0xff
 80080a4:	bf85      	ittet	hi
 80080a6:	238a      	movhi	r3, #138	; 0x8a
 80080a8:	6003      	strhi	r3, [r0, #0]
 80080aa:	700a      	strbls	r2, [r1, #0]
 80080ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80080b0:	bf98      	it	ls
 80080b2:	2001      	movls	r0, #1
 80080b4:	4770      	bx	lr
 80080b6:	4608      	mov	r0, r1
 80080b8:	4770      	bx	lr

080080ba <_malloc_usable_size_r>:
 80080ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080be:	1f18      	subs	r0, r3, #4
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bfbc      	itt	lt
 80080c4:	580b      	ldrlt	r3, [r1, r0]
 80080c6:	18c0      	addlt	r0, r0, r3
 80080c8:	4770      	bx	lr
	...

080080cc <_init>:
 80080cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ce:	bf00      	nop
 80080d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d2:	bc08      	pop	{r3}
 80080d4:	469e      	mov	lr, r3
 80080d6:	4770      	bx	lr

080080d8 <_fini>:
 80080d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080da:	bf00      	nop
 80080dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080de:	bc08      	pop	{r3}
 80080e0:	469e      	mov	lr, r3
 80080e2:	4770      	bx	lr
 80080e4:	0000      	movs	r0, r0
	...
