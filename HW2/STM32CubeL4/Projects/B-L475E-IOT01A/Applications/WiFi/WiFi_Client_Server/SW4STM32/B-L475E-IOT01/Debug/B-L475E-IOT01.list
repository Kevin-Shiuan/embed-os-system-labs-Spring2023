
B-L475E-IOT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005100  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009e8  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c78  08005c78  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005c78  08005c78  00015c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c80  08005c80  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005c88  08005c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c7c  20000088  08005d18  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00017004  20000d04  08005d18  00020d04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f49  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e5a  00000000  00000000  00039001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000ed20  00000000  00000000  0003be5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  0004ab80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011c8  00000000  00000000  0004b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000282f8  00000000  00000000  0004cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016950  00000000  00000000  00074da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1914  00000000  00000000  0008b6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017d00c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000348c  00000000  00000000  0017d05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005278 	.word	0x08005278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08005278 	.word	0x08005278

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000588:	b0a7      	sub	sp, #156	; 0x9c
  uint8_t  MAC_Addr[6] = {0};
 800058a:	2300      	movs	r3, #0
 800058c:	9306      	str	r3, [sp, #24]
 800058e:	f8ad 301c 	strh.w	r3, [sp, #28]
  uint8_t  IP_Addr[4] = {0};
 8000592:	9305      	str	r3, [sp, #20]
  uint8_t TxData[] = "STM32 : Hello, Kevin Shiuan !\n";
 8000594:	4b85      	ldr	r3, [pc, #532]	; (80007ac <main+0x228>)
 8000596:	aa0d      	add	r2, sp, #52	; 0x34
 8000598:	f103 0518 	add.w	r5, r3, #24
 800059c:	4616      	mov	r6, r2
 800059e:	6818      	ldr	r0, [r3, #0]
 80005a0:	6859      	ldr	r1, [r3, #4]
 80005a2:	4614      	mov	r4, r2
 80005a4:	c403      	stmia	r4!, {r0, r1}
 80005a6:	3308      	adds	r3, #8
 80005a8:	42ab      	cmp	r3, r5
 80005aa:	4622      	mov	r2, r4
 80005ac:	d1f7      	bne.n	800059e <main+0x1a>
 80005ae:	6818      	ldr	r0, [r3, #0]
 80005b0:	8899      	ldrh	r1, [r3, #4]
 80005b2:	799b      	ldrb	r3, [r3, #6]
 80005b4:	71a3      	strb	r3, [r4, #6]
 80005b6:	6020      	str	r0, [r4, #0]
 80005b8:	80a1      	strh	r1, [r4, #4]
  uint16_t Datalen;
  int32_t ret;
  int16_t Trials = CONNECTION_TRIAL_MAX;

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f001 f9ad 	bl	8001918 <HAL_Init>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005be:	2460      	movs	r4, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005c0:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005c2:	2200      	movs	r2, #0
 80005c4:	e9cd 241c 	strd	r2, r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005c8:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005cc:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ce:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d2:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005d4:	9321      	str	r3, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005d6:	2328      	movs	r3, #40	; 0x28
 80005d8:	9322      	str	r3, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005da:	2404      	movs	r4, #4
 80005dc:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005de:	a815      	add	r0, sp, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e0:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e4:	9225      	str	r2, [sp, #148]	; 0x94
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f001 fbe7 	bl	8001db8 <HAL_RCC_OscConfig>
 80005ea:	b100      	cbz	r0, 80005ee <main+0x6a>
  {
    /* Initialization Error */
    while(1);
 80005ec:	e7fe      	b.n	80005ec <main+0x68>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	210f      	movs	r1, #15
 80005f0:	2303      	movs	r3, #3
 80005f2:	e9cd 1308 	strd	r1, r3, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f6:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	900c      	str	r0, [sp, #48]	; 0x30
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fc:	4621      	mov	r1, r4
 80005fe:	a808      	add	r0, sp, #32
 8000600:	f001 fe5a 	bl	80022b8 <HAL_RCC_ClockConfig>
 8000604:	4604      	mov	r4, r0
 8000606:	b100      	cbz	r0, 800060a <main+0x86>
  {
    /* Initialization Error */
    while(1);
 8000608:	e7fe      	b.n	8000608 <main+0x84>
  BSP_LED_Init(LED2);
 800060a:	f001 f8cb 	bl	80017a4 <BSP_LED_Init>
  hDiscoUart.Instance = DISCOVERY_COM1;
 800060e:	4968      	ldr	r1, [pc, #416]	; (80007b0 <main+0x22c>)
  hDiscoUart.Init.BaudRate = 115200;
 8000610:	4a68      	ldr	r2, [pc, #416]	; (80007b4 <main+0x230>)
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 8000612:	610c      	str	r4, [r1, #16]
  hDiscoUart.Init.BaudRate = 115200;
 8000614:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000618:	e9c1 2300 	strd	r2, r3, [r1]
  BSP_COM_Init(COM1, &hDiscoUart);
 800061c:	4620      	mov	r0, r4
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 800061e:	230c      	movs	r3, #12
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 8000620:	e9c1 4402 	strd	r4, r4, [r1, #8]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000624:	e9c1 3405 	strd	r3, r4, [r1, #20]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000628:	e9c1 4407 	strd	r4, r4, [r1, #28]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800062c:	624c      	str	r4, [r1, #36]	; 0x24
  BSP_COM_Init(COM1, &hDiscoUart);
 800062e:	f001 f8e5 	bl	80017fc <BSP_COM_Init>
  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\n");
 8000632:	4861      	ldr	r0, [pc, #388]	; (80007b8 <main+0x234>)
 8000634:	f003 fbc2 	bl	8003dbc <puts>
  TERMOUT("TCP Client Instructions :\n");
 8000638:	4860      	ldr	r0, [pc, #384]	; (80007bc <main+0x238>)
 800063a:	f003 fbbf 	bl	8003dbc <puts>
  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 800063e:	4860      	ldr	r0, [pc, #384]	; (80007c0 <main+0x23c>)
 8000640:	f003 fbbc 	bl	8003dbc <puts>
  TERMOUT("   you configured using the Configuration Access Point.\n");
 8000644:	485f      	ldr	r0, [pc, #380]	; (80007c4 <main+0x240>)
 8000646:	f003 fbb9 	bl	8003dbc <puts>
  TERMOUT("2- Create a server by using the android application TCP Server\n");
 800064a:	485f      	ldr	r0, [pc, #380]	; (80007c8 <main+0x244>)
 800064c:	f003 fbb6 	bl	8003dbc <puts>
  TERMOUT("   with port(8002).\n");
 8000650:	485e      	ldr	r0, [pc, #376]	; (80007cc <main+0x248>)
 8000652:	f003 fbb3 	bl	8003dbc <puts>
  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 8000656:	485e      	ldr	r0, [pc, #376]	; (80007d0 <main+0x24c>)
 8000658:	f003 fbb0 	bl	8003dbc <puts>
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 800065c:	f000 fffa 	bl	8001654 <WIFI_Init>
 8000660:	4605      	mov	r5, r0
 8000662:	2800      	cmp	r0, #0
 8000664:	d17a      	bne.n	800075c <main+0x1d8>
    TERMOUT("> WIFI Module Initialized.\n");
 8000666:	485b      	ldr	r0, [pc, #364]	; (80007d4 <main+0x250>)
 8000668:	f003 fba8 	bl	8003dbc <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 800066c:	2106      	movs	r1, #6
 800066e:	a806      	add	r0, sp, #24
 8000670:	f001 f828 	bl	80016c4 <WIFI_GetMAC_Address>
 8000674:	2800      	cmp	r0, #0
 8000676:	d14a      	bne.n	800070e <main+0x18a>
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8000678:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800068e:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8000692:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8000696:	4850      	ldr	r0, [pc, #320]	; (80007d8 <main+0x254>)
 8000698:	f003 fb0a 	bl	8003cb0 <iprintf>
    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 800069c:	494f      	ldr	r1, [pc, #316]	; (80007dc <main+0x258>)
 800069e:	4850      	ldr	r0, [pc, #320]	; (80007e0 <main+0x25c>)
 80006a0:	2203      	movs	r2, #3
 80006a2:	f000 fffb 	bl	800169c <WIFI_Connect>
 80006a6:	4604      	mov	r4, r0
 80006a8:	2800      	cmp	r0, #0
 80006aa:	d155      	bne.n	8000758 <main+0x1d4>
      TERMOUT("> es-wifi module connected \n");
 80006ac:	484d      	ldr	r0, [pc, #308]	; (80007e4 <main+0x260>)
 80006ae:	f003 fb85 	bl	8003dbc <puts>
      if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 80006b2:	2104      	movs	r1, #4
 80006b4:	a805      	add	r0, sp, #20
 80006b6:	f001 f815 	bl	80016e4 <WIFI_GetIP_Address>
 80006ba:	4680      	mov	r8, r0
 80006bc:	2800      	cmp	r0, #0
 80006be:	d146      	bne.n	800074e <main+0x1ca>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 80006c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80006c4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80006c8:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	4846      	ldr	r0, [pc, #280]	; (80007e8 <main+0x264>)
 80006d0:	f89d 3016 	ldrb.w	r3, [sp, #22]
        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80006d4:	4f45      	ldr	r7, [pc, #276]	; (80007ec <main+0x268>)
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 80006d6:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8000818 <main+0x294>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 80006da:	f003 fae9 	bl	8003cb0 <iprintf>
        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80006de:	f641 7342 	movw	r3, #8002	; 0x1f42
 80006e2:	9301      	str	r3, [sp, #4]
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	78bb      	ldrb	r3, [r7, #2]
 80006ea:	787a      	ldrb	r2, [r7, #1]
 80006ec:	7839      	ldrb	r1, [r7, #0]
 80006ee:	4840      	ldr	r0, [pc, #256]	; (80007f0 <main+0x26c>)
 80006f0:	f003 fade 	bl	8003cb0 <iprintf>
        while (Trials--)
 80006f4:	250b      	movs	r5, #11
 80006f6:	3d01      	subs	r5, #1
 80006f8:	b2ad      	uxth	r5, r5
 80006fa:	b97d      	cbnz	r5, 800071c <main+0x198>
          TERMOUT("> ERROR : Cannot open Connection\n");
 80006fc:	483d      	ldr	r0, [pc, #244]	; (80007f4 <main+0x270>)
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 80006fe:	f003 fb5d 	bl	8003dbc <puts>
      BSP_LED_On(LED2);
 8000702:	2000      	movs	r0, #0
    BSP_LED_On(LED2);
 8000704:	f001 f870 	bl	80017e8 <BSP_LED_On>
  int32_t Socket = -1;
 8000708:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800070c:	e017      	b.n	800073e <main+0x1ba>
      TERMOUT("> ERROR : CANNOT get MAC address\n");
 800070e:	483a      	ldr	r0, [pc, #232]	; (80007f8 <main+0x274>)
 8000710:	f003 fb54 	bl	8003dbc <puts>
      BSP_LED_On(LED2);
 8000714:	4628      	mov	r0, r5
 8000716:	f001 f867 	bl	80017e8 <BSP_LED_On>
 800071a:	e7bf      	b.n	800069c <main+0x118>
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 800071c:	f641 7342 	movw	r3, #8002	; 0x1f42
 8000720:	2100      	movs	r1, #0
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	f8cd 8004 	str.w	r8, [sp, #4]
 8000728:	463b      	mov	r3, r7
 800072a:	464a      	mov	r2, r9
 800072c:	4608      	mov	r0, r1
 800072e:	f000 ffed 	bl	800170c <WIFI_OpenClientConnection>
 8000732:	4604      	mov	r4, r0
 8000734:	2800      	cmp	r0, #0
 8000736:	d1de      	bne.n	80006f6 <main+0x172>
            TERMOUT("> TCP Connection opened successfully.\n");
 8000738:	4830      	ldr	r0, [pc, #192]	; (80007fc <main+0x278>)
 800073a:	f003 fb3f 	bl	8003dbc <puts>
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 800073e:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 800080c <main+0x288>
          TERMOUT("Received: %s\n",RxData);
 8000742:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 800081c <main+0x298>
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 8000746:	f242 7710 	movw	r7, #10000	; 0x2710
    if(Socket != -1)
 800074a:	b14c      	cbz	r4, 8000760 <main+0x1dc>
 800074c:	e7fe      	b.n	800074c <main+0x1c8>
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 800074e:	482c      	ldr	r0, [pc, #176]	; (8000800 <main+0x27c>)
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 8000750:	f003 fb34 	bl	8003dbc <puts>
    BSP_LED_On(LED2);
 8000754:	4620      	mov	r0, r4
 8000756:	e7d5      	b.n	8000704 <main+0x180>
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 8000758:	482a      	ldr	r0, [pc, #168]	; (8000804 <main+0x280>)
 800075a:	e7d0      	b.n	80006fe <main+0x17a>
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 800075c:	482a      	ldr	r0, [pc, #168]	; (8000808 <main+0x284>)
 800075e:	e7f7      	b.n	8000750 <main+0x1cc>
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 8000760:	492a      	ldr	r1, [pc, #168]	; (800080c <main+0x288>)
 8000762:	9700      	str	r7, [sp, #0]
 8000764:	ab15      	add	r3, sp, #84	; 0x54
 8000766:	f240 12f3 	movw	r2, #499	; 0x1f3
 800076a:	2000      	movs	r0, #0
 800076c:	f001 f808 	bl	8001780 <WIFI_ReceiveData>
      if(ret == WIFI_STATUS_OK)
 8000770:	4605      	mov	r5, r0
 8000772:	b9c8      	cbnz	r0, 80007a8 <main+0x224>
        if(Datalen > 0)
 8000774:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0e6      	beq.n	800074a <main+0x1c6>
          RxData[Datalen]=0;
 800077c:	f808 0003 	strb.w	r0, [r8, r3]
          TERMOUT("Received: %s\n",RxData);
 8000780:	4641      	mov	r1, r8
 8000782:	4648      	mov	r0, r9
 8000784:	f003 fa94 	bl	8003cb0 <iprintf>
          ret = WIFI_SendData(Socket, TxData, sizeof(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 8000788:	9700      	str	r7, [sp, #0]
 800078a:	ab15      	add	r3, sp, #84	; 0x54
 800078c:	221f      	movs	r2, #31
 800078e:	4631      	mov	r1, r6
 8000790:	4628      	mov	r0, r5
 8000792:	f000 ffe3 	bl	800175c <WIFI_SendData>
          if (ret != WIFI_STATUS_OK)
 8000796:	2800      	cmp	r0, #0
 8000798:	d0d7      	beq.n	800074a <main+0x1c6>
            TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 800079a:	481d      	ldr	r0, [pc, #116]	; (8000810 <main+0x28c>)
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 800079c:	f003 fb0e 	bl	8003dbc <puts>
}
 80007a0:	2000      	movs	r0, #0
 80007a2:	b027      	add	sp, #156	; 0x9c
 80007a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 80007a8:	481a      	ldr	r0, [pc, #104]	; (8000814 <main+0x290>)
 80007aa:	e7f7      	b.n	800079c <main+0x218>
 80007ac:	080056a4 	.word	0x080056a4
 80007b0:	20000c64 	.word	0x20000c64
 80007b4:	40013800 	.word	0x40013800
 80007b8:	080052e8 	.word	0x080052e8
 80007bc:	08005325 	.word	0x08005325
 80007c0:	0800533f 	.word	0x0800533f
 80007c4:	0800537d 	.word	0x0800537d
 80007c8:	080053b5 	.word	0x080053b5
 80007cc:	080053f4 	.word	0x080053f4
 80007d0:	08005408 	.word	0x08005408
 80007d4:	08005450 	.word	0x08005450
 80007d8:	0800546b 	.word	0x0800546b
 80007dc:	080054be 	.word	0x080054be
 80007e0:	080054ce 	.word	0x080054ce
 80007e4:	080054de 	.word	0x080054de
 80007e8:	080054fa 	.word	0x080054fa
 80007ec:	20000000 	.word	0x20000000
 80007f0:	08005529 	.word	0x08005529
 80007f4:	0800558d 	.word	0x0800558d
 80007f8:	0800549d 	.word	0x0800549d
 80007fc:	08005567 	.word	0x08005567
 8000800:	080055ae 	.word	0x080055ae
 8000804:	080055dd 	.word	0x080055dd
 8000808:	08005604 	.word	0x08005604
 800080c:	200000a4 	.word	0x200000a4
 8000810:	0800563f 	.word	0x0800563f
 8000814:	08005670 	.word	0x08005670
 8000818:	0800555c 	.word	0x0800555c
 800081c:	08005631 	.word	0x08005631

08000820 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000820:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8000822:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8000826:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8000828:	2201      	movs	r2, #1
 800082a:	a901      	add	r1, sp, #4
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <__io_putchar+0x1c>)
 800082e:	f003 f8cf 	bl	80039d0 <HAL_UART_Transmit>

  return ch;
}
 8000832:	9801      	ldr	r0, [sp, #4]
 8000834:	b003      	add	sp, #12
 8000836:	f85d fb04 	ldr.w	pc, [sp], #4
 800083a:	bf00      	nop
 800083c:	20000c64 	.word	0x20000c64

08000840 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 8000840:	2802      	cmp	r0, #2
 8000842:	d101      	bne.n	8000848 <HAL_GPIO_EXTI_Callback+0x8>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8000844:	f000 befc 	b.w	8001640 <SPI_WIFI_ISR>
    default:
    {
      break;
    }
  }
}
 8000848:	4770      	bx	lr
	...

0800084c <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi);
 800084c:	4801      	ldr	r0, [pc, #4]	; (8000854 <SPI3_IRQHandler+0x8>)
 800084e:	f002 be37 	b.w	80034c0 <HAL_SPI_IRQHandler>
 8000852:	bf00      	nop
 8000854:	200002a4 	.word	0x200002a4

08000858 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000858:	4770      	bx	lr

0800085a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler>

0800085c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler>

0800085e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler>

08000860 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler>

08000862 <SVC_Handler>:
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:
 8000864:	4770      	bx	lr

08000866 <PendSV_Handler>:
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000868:	f001 b866 	b.w	8001938 <HAL_IncTick>

0800086c <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800086c:	2002      	movs	r0, #2
 800086e:	f001 b9ff 	b.w	8001c70 <HAL_GPIO_EXTI_IRQHandler>

08000872 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8000872:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0;
    uint8_t done_count = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                      /* Check for minus character */
 8000874:	7803      	ldrb	r3, [r0, #0]
 8000876:	2b2d      	cmp	r3, #45	; 0x2d
 8000878:	d115      	bne.n	80008a6 <ParseNumber+0x34>
        minus = 1;
        ptr++;
 800087a:	3001      	adds	r0, #1
        minus = 1;
 800087c:	2501      	movs	r5, #1
 800087e:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0;
 8000880:	462a      	mov	r2, r5
 8000882:	2000      	movs	r0, #0
        done_count++;
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000884:	270a      	movs	r7, #10
 8000886:	e003      	b.n	8000890 <ParseNumber+0x1e>
        ptr++;
        done_count++;
 8000888:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 800088a:	fb07 4000 	mla	r0, r7, r0, r4
        done_count++;
 800088e:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8000890:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8000894:	3c30      	subs	r4, #48	; 0x30
 8000896:	b2e6      	uxtb	r6, r4
 8000898:	2e09      	cmp	r6, #9
 800089a:	d9f5      	bls.n	8000888 <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 800089c:	b101      	cbz	r1, 80008a0 <ParseNumber+0x2e>
        *cnt = done_count;
 800089e:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                            /* Minus detected */
 80008a0:	b105      	cbz	r5, 80008a4 <ParseNumber+0x32>
        return 0 - sum;
 80008a2:	4240      	negs	r0, r0
    }
    return sum;                                             /* Return number */
}
 80008a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0;
 80008a6:	2500      	movs	r5, #0
 80008a8:	e7e9      	b.n	800087e <ParseNumber+0xc>
	...

080008ac <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	4605      	mov	r5, r0
  uint16_t cmd_len = 0;
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 80008b2:	4608      	mov	r0, r1
{
 80008b4:	4689      	mov	r9, r1
 80008b6:	4692      	mov	sl, r2
 80008b8:	4698      	mov	r8, r3
  cmd_len = strlen((char*)cmd);
 80008ba:	f7ff fc89 	bl	80001d0 <strlen>

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80008be:	f010 0401 	ands.w	r4, r0, #1
{
 80008c2:	9f08      	ldr	r7, [sp, #32]
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80008c4:	d12f      	bne.n	8000926 <AT_RequestSendData+0x7a>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80008c6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80008ca:	b913      	cbnz	r3, 80008d2 <AT_RequestSendData+0x26>
    {
      return ES_WIFI_STATUS_ERROR;
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 80008cc:	2004      	movs	r0, #4
}
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80008d2:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
 80008d6:	2a00      	cmp	r2, #0
 80008d8:	d0f8      	beq.n	80008cc <AT_RequestSendData+0x20>
  cmd_len = strlen((char*)cmd);
 80008da:	b286      	uxth	r6, r0
  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80008dc:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 80008e0:	4631      	mov	r1, r6
 80008e2:	4648      	mov	r0, r9
 80008e4:	4798      	blx	r3
  if (n == cmd_len)
 80008e6:	b280      	uxth	r0, r0
 80008e8:	4286      	cmp	r6, r0
 80008ea:	d1ef      	bne.n	80008cc <AT_RequestSendData+0x20>
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80008ec:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 80008f0:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 80008f4:	4641      	mov	r1, r8
 80008f6:	4650      	mov	r0, sl
 80008f8:	4798      	blx	r3
    if (send_len == len)
 80008fa:	4540      	cmp	r0, r8
 80008fc:	d113      	bne.n	8000926 <AT_RequestSendData+0x7a>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80008fe:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8000902:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8000906:	4621      	mov	r1, r4
 8000908:	4638      	mov	r0, r7
 800090a:	4798      	blx	r3
      if (recv_len > 0)
 800090c:	2800      	cmp	r0, #0
 800090e:	dd0c      	ble.n	800092a <AT_RequestSendData+0x7e>
        *(pdata + recv_len) = 0;
 8000910:	543c      	strb	r4, [r7, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000912:	490a      	ldr	r1, [pc, #40]	; (800093c <AT_RequestSendData+0x90>)
 8000914:	4638      	mov	r0, r7
 8000916:	f003 fa94 	bl	8003e42 <strstr>
 800091a:	b950      	cbnz	r0, 8000932 <AT_RequestSendData+0x86>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 800091c:	4908      	ldr	r1, [pc, #32]	; (8000940 <AT_RequestSendData+0x94>)
 800091e:	4638      	mov	r0, r7
 8000920:	f003 fa8f 	bl	8003e42 <strstr>
 8000924:	b938      	cbnz	r0, 8000936 <AT_RequestSendData+0x8a>
          return ES_WIFI_STATUS_ERROR;
 8000926:	2002      	movs	r0, #2
 8000928:	e7d1      	b.n	80008ce <AT_RequestSendData+0x22>
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 800092a:	3004      	adds	r0, #4
 800092c:	d1fb      	bne.n	8000926 <AT_RequestSendData+0x7a>
        return ES_WIFI_STATUS_MODULE_CRASH;
 800092e:	2006      	movs	r0, #6
 8000930:	e7cd      	b.n	80008ce <AT_RequestSendData+0x22>
          return ES_WIFI_STATUS_OK;
 8000932:	4620      	mov	r0, r4
 8000934:	e7cb      	b.n	80008ce <AT_RequestSendData+0x22>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000936:	2005      	movs	r0, #5
 8000938:	e7c9      	b.n	80008ce <AT_RequestSendData+0x22>
 800093a:	bf00      	nop
 800093c:	080056c3 	.word	0x080056c3
 8000940:	080056cc 	.word	0x080056cc

08000944 <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8000944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int len;
  uint8_t *p=Obj->CmdData;

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000948:	f8d0 4120 	ldr.w	r4, [r0, #288]	; 0x120
{
 800094c:	9e08      	ldr	r6, [sp, #32]
 800094e:	4680      	mov	r8, r0
 8000950:	4689      	mov	r9, r1
 8000952:	4615      	mov	r5, r2
 8000954:	461f      	mov	r7, r3
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000956:	b914      	cbnz	r4, 800095e <AT_RequestReceiveData+0x1a>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8000958:	2004      	movs	r0, #4
}
 800095a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 800095e:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0f8      	beq.n	8000958 <AT_RequestReceiveData+0x14>
  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 8000966:	4608      	mov	r0, r1
 8000968:	f7ff fc32 	bl	80001d0 <strlen>
 800096c:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
 8000970:	b281      	uxth	r1, r0
 8000972:	4648      	mov	r0, r9
 8000974:	47a0      	blx	r4
 8000976:	2800      	cmp	r0, #0
 8000978:	ddee      	ble.n	8000958 <AT_RequestReceiveData+0x14>
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 800097a:	f8d8 3124 	ldr.w	r3, [r8, #292]	; 0x124
 800097e:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
 8000982:	2100      	movs	r1, #0
 8000984:	f508 7094 	add.w	r0, r8, #296	; 0x128
 8000988:	4798      	blx	r3
    if ((p[0] != '\r') || (p[1] != '\n'))
 800098a:	f898 3128 	ldrb.w	r3, [r8, #296]	; 0x128
 800098e:	2b0d      	cmp	r3, #13
 8000990:	d1e2      	bne.n	8000958 <AT_RequestReceiveData+0x14>
 8000992:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 8000996:	2b0a      	cmp	r3, #10
 8000998:	d1de      	bne.n	8000958 <AT_RequestReceiveData+0x14>
    len -= 2;
 800099a:	1e81      	subs	r1, r0, #2
    if (len >= AT_OK_STRING_LEN)
 800099c:	2907      	cmp	r1, #7
 800099e:	d9db      	bls.n	8000958 <AT_RequestReceiveData+0x14>
    p += 2;
 80009a0:	f508 7995 	add.w	r9, r8, #298	; 0x12a
     while(len && (p[len - 1] == 0x15)) len--;
 80009a4:	f208 1829 	addw	r8, r8, #297	; 0x129
 80009a8:	b119      	cbz	r1, 80009b2 <AT_RequestReceiveData+0x6e>
 80009aa:	f818 3001 	ldrb.w	r3, [r8, r1]
 80009ae:	2b15      	cmp	r3, #21
 80009b0:	d017      	beq.n	80009e2 <AT_RequestReceiveData+0x9e>
     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80009b2:	f1a1 0408 	sub.w	r4, r1, #8
     p[len] = '\0';
 80009b6:	f04f 0800 	mov.w	r8, #0
 80009ba:	f809 8001 	strb.w	r8, [r9, r1]
     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80009be:	eb09 0004 	add.w	r0, r9, r4
 80009c2:	490a      	ldr	r1, [pc, #40]	; (80009ec <AT_RequestReceiveData+0xa8>)
 80009c4:	f003 fa3d 	bl	8003e42 <strstr>
 80009c8:	b168      	cbz	r0, 80009e6 <AT_RequestReceiveData+0xa2>
       if (*ReadData > Reqlen)
 80009ca:	b2a1      	uxth	r1, r4
 80009cc:	42b9      	cmp	r1, r7
 80009ce:	460a      	mov	r2, r1
 80009d0:	bf28      	it	cs
 80009d2:	463a      	movcs	r2, r7
 80009d4:	8032      	strh	r2, [r6, #0]
       memcpy(pdata, p, *ReadData);
 80009d6:	4649      	mov	r1, r9
 80009d8:	4628      	mov	r0, r5
 80009da:	f003 f953 	bl	8003c84 <memcpy>
       return ES_WIFI_STATUS_OK;
 80009de:	4640      	mov	r0, r8
 80009e0:	e7bb      	b.n	800095a <AT_RequestReceiveData+0x16>
     while(len && (p[len - 1] == 0x15)) len--;
 80009e2:	3901      	subs	r1, #1
 80009e4:	e7e0      	b.n	80009a8 <AT_RequestReceiveData+0x64>
       *ReadData = 0;
 80009e6:	8030      	strh	r0, [r6, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80009e8:	2005      	movs	r0, #5
 80009ea:	e7b6      	b.n	800095a <AT_RequestReceiveData+0x16>
 80009ec:	080056c3 	.word	0x080056c3

080009f0 <ParseIP>:
{
 80009f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80009f2:	460e      	mov	r6, r1
  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 80009f4:	4604      	mov	r4, r0
 80009f6:	b110      	cbz	r0, 80009fe <ParseIP+0xe>
 80009f8:	b109      	cbz	r1, 80009fe <ParseIP+0xe>
 80009fa:	2a03      	cmp	r2, #3
 80009fc:	d816      	bhi.n	8000a2c <ParseIP+0x3c>
}
 80009fe:	b003      	add	sp, #12
 8000a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (*ptr != '.')
 8000a02:	2b2e      	cmp	r3, #46	; 0x2e
    uint8_t done_count = 1;
 8000a04:	f88d 7007 	strb.w	r7, [sp, #7]
    if (*ptr != '.')
 8000a08:	d007      	beq.n	8000a1a <ParseIP+0x2a>
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8000a0a:	f10d 0107 	add.w	r1, sp, #7
 8000a0e:	4620      	mov	r0, r4
 8000a10:	f7ff ff2f 	bl	8000872 <ParseNumber>
 8000a14:	1c6b      	adds	r3, r5, #1
 8000a16:	5570      	strb	r0, [r6, r5]
 8000a18:	b2dd      	uxtb	r5, r3
    ptr = ptr + done_count;
 8000a1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8000a1e:	2d04      	cmp	r5, #4
    ptr = ptr + done_count;
 8000a20:	441c      	add	r4, r3
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8000a22:	d0ec      	beq.n	80009fe <ParseIP+0xe>
 8000a24:	7823      	ldrb	r3, [r4, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1eb      	bne.n	8000a02 <ParseIP+0x12>
 8000a2a:	e7e8      	b.n	80009fe <ParseIP+0xe>
  uint8_t hex_8bits_count = 0;
 8000a2c:	2500      	movs	r5, #0
    uint8_t done_count = 1;
 8000a2e:	2701      	movs	r7, #1
 8000a30:	e7f8      	b.n	8000a24 <ParseIP+0x34>
	...

08000a34 <AT_ExecuteCommand>:
{
 8000a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000a36:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
{
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	460e      	mov	r6, r1
 8000a3e:	4615      	mov	r5, r2
  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8000a40:	b38f      	cbz	r7, 8000aa6 <AT_ExecuteCommand+0x72>
 8000a42:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8000a46:	b373      	cbz	r3, 8000aa6 <AT_ExecuteCommand+0x72>
  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 8000a48:	4608      	mov	r0, r1
 8000a4a:	f7ff fbc1 	bl	80001d0 <strlen>
 8000a4e:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8000a52:	b281      	uxth	r1, r0
 8000a54:	4630      	mov	r0, r6
 8000a56:	47b8      	blx	r7
  if( ret > 0)
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	dd24      	ble.n	8000aa6 <AT_ExecuteCommand+0x72>
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8000a5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000a60:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8000a64:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000a68:	4628      	mov	r0, r5
 8000a6a:	4798      	blx	r3
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8000a6c:	1e43      	subs	r3, r0, #1
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a74:	d211      	bcs.n	8000a9a <AT_ExecuteCommand+0x66>
      if (recv_len == ES_WIFI_DATA_SIZE)
 8000a76:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
        recv_len--;
 8000a7a:	bf08      	it	eq
 8000a7c:	b218      	sxtheq	r0, r3
      *(pdata + recv_len) = 0;
 8000a7e:	2400      	movs	r4, #0
 8000a80:	542c      	strb	r4, [r5, r0]
      if (strstr((char *)pdata, AT_OK_STRING))
 8000a82:	490a      	ldr	r1, [pc, #40]	; (8000aac <AT_ExecuteCommand+0x78>)
 8000a84:	4628      	mov	r0, r5
 8000a86:	f003 f9dc 	bl	8003e42 <strstr>
 8000a8a:	b950      	cbnz	r0, 8000aa2 <AT_ExecuteCommand+0x6e>
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8000a8c:	4908      	ldr	r1, [pc, #32]	; (8000ab0 <AT_ExecuteCommand+0x7c>)
 8000a8e:	4628      	mov	r0, r5
 8000a90:	f003 f9d7 	bl	8003e42 <strstr>
 8000a94:	b138      	cbz	r0, 8000aa6 <AT_ExecuteCommand+0x72>
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000a96:	2005      	movs	r0, #5
 8000a98:	e002      	b.n	8000aa0 <AT_ExecuteCommand+0x6c>
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8000a9a:	3004      	adds	r0, #4
 8000a9c:	d103      	bne.n	8000aa6 <AT_ExecuteCommand+0x72>
      return ES_WIFI_STATUS_MODULE_CRASH;
 8000a9e:	2006      	movs	r0, #6
}
 8000aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return ES_WIFI_STATUS_OK;
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	e7fc      	b.n	8000aa0 <AT_ExecuteCommand+0x6c>
  return ES_WIFI_STATUS_IO_ERROR;
 8000aa6:	2004      	movs	r0, #4
 8000aa8:	e7fa      	b.n	8000aa0 <AT_ExecuteCommand+0x6c>
 8000aaa:	bf00      	nop
 8000aac:	080056c3 	.word	0x080056c3
 8000ab0:	080056cc 	.word	0x080056cc

08000ab4 <ParseMAC>:
{
 8000ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((ptr != NULL) && (Mac != NULL))
 8000ab8:	b108      	cbz	r0, 8000abe <ParseMAC+0xa>
 8000aba:	2900      	cmp	r1, #0
 8000abc:	d140      	bne.n	8000b40 <ParseMAC+0x8c>
}
 8000abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*ptr != ':')
 8000ac2:	2b3a      	cmp	r3, #58	; 0x3a
 8000ac4:	d039      	beq.n	8000b3a <ParseMAC+0x86>
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8000ac6:	3501      	adds	r5, #1
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b2ed      	uxtb	r5, r5
    uint8_t sum = 0;
 8000acc:	4634      	mov	r4, r6
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8000ace:	f810 c006 	ldrb.w	ip, [r0, r6]
 8000ad2:	f1ac 0330 	sub.w	r3, ip, #48	; 0x30
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b09      	cmp	r3, #9
 8000ada:	fa5f fe86 	uxtb.w	lr, r6
 8000ade:	d906      	bls.n	8000aee <ParseMAC+0x3a>
 8000ae0:	f02c 0820 	bic.w	r8, ip, #32
 8000ae4:	f1a8 0841 	sub.w	r8, r8, #65	; 0x41
 8000ae8:	f1b8 0f05 	cmp.w	r8, #5
 8000aec:	d802      	bhi.n	8000af4 <ParseMAC+0x40>
 8000aee:	2e02      	cmp	r6, #2
 8000af0:	d10b      	bne.n	8000b0a <ParseMAC+0x56>
 8000af2:	46b6      	mov	lr, r6
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8000af4:	55cc      	strb	r4, [r1, r7]
    ptr = ptr + done_count;
 8000af6:	4470      	add	r0, lr
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8000af8:	42aa      	cmp	r2, r5
 8000afa:	462f      	mov	r7, r5
 8000afc:	d9df      	bls.n	8000abe <ParseMAC+0xa>
 8000afe:	2d05      	cmp	r5, #5
 8000b00:	d8dd      	bhi.n	8000abe <ParseMAC+0xa>
 8000b02:	7803      	ldrb	r3, [r0, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1dc      	bne.n	8000ac2 <ParseMAC+0xe>
 8000b08:	e7d9      	b.n	8000abe <ParseMAC+0xa>
        sum <<= 4;
 8000b0a:	0124      	lsls	r4, r4, #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000b0c:	2b09      	cmp	r3, #9
        sum <<= 4;
 8000b0e:	b2e4      	uxtb	r4, r4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8000b10:	d906      	bls.n	8000b20 <ParseMAC+0x6c>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8000b12:	f1ac 0361 	sub.w	r3, ip, #97	; 0x61
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	d806      	bhi.n	8000b28 <ParseMAC+0x74>
        return (a - 'a') + 10;
 8000b1a:	f1ac 0357 	sub.w	r3, ip, #87	; 0x57
        return (a - 'A') + 10;
 8000b1e:	b2db      	uxtb	r3, r3
        sum += Hex2Num(*ptr);
 8000b20:	441c      	add	r4, r3
 8000b22:	b2e4      	uxtb	r4, r4
        done_count++;
 8000b24:	3601      	adds	r6, #1
 8000b26:	e7d2      	b.n	8000ace <ParseMAC+0x1a>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8000b28:	f1ac 0341 	sub.w	r3, ip, #65	; 0x41
 8000b2c:	2b05      	cmp	r3, #5
 8000b2e:	d802      	bhi.n	8000b36 <ParseMAC+0x82>
        return (a - 'A') + 10;
 8000b30:	f1ac 0337 	sub.w	r3, ip, #55	; 0x37
 8000b34:	e7f3      	b.n	8000b1e <ParseMAC+0x6a>
    return 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e7f2      	b.n	8000b20 <ParseMAC+0x6c>
    uint8_t done_count = 1;
 8000b3a:	f04f 0e01 	mov.w	lr, #1
 8000b3e:	e7da      	b.n	8000af6 <ParseMAC+0x42>
  uint8_t hex_8bits_count = 0;
 8000b40:	2500      	movs	r5, #0
 8000b42:	e7d9      	b.n	8000af8 <ParseMAC+0x44>

08000b44 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8000b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8000b48:	f247 5330 	movw	r3, #30000	; 0x7530
 8000b4c:	f8c0 38f8 	str.w	r3, [r0, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 8000b50:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
{
 8000b54:	4604      	mov	r4, r0
  if (Obj->fops.IO_Init != NULL) {
 8000b56:	b91b      	cbnz	r3, 8000b60 <ES_WIFI_Init+0x1c>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8000b58:	2502      	movs	r5, #2
   }
  }

  UNLOCK_WIFI();
  return ret;
}
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8000b60:	2000      	movs	r0, #0
 8000b62:	4798      	blx	r3
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d1f7      	bne.n	8000b58 <ES_WIFI_Init+0x14>
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8000b68:	4932      	ldr	r1, [pc, #200]	; (8000c34 <ES_WIFI_Init+0xf0>)
 8000b6a:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f7ff ff60 	bl	8000a34 <AT_ExecuteCommand>
    if(ret == ES_WIFI_STATUS_OK)
 8000b74:	4605      	mov	r5, r0
 8000b76:	2800      	cmp	r0, #0
 8000b78:	d1ef      	bne.n	8000b5a <ES_WIFI_Init+0x16>
  ptr = strtok((char *)pdata + 2, ",");
 8000b7a:	492f      	ldr	r1, [pc, #188]	; (8000c38 <ES_WIFI_Init+0xf4>)
      ptr = strtok(ptr, "\r");
 8000b7c:	4f2f      	ldr	r7, [pc, #188]	; (8000c3c <ES_WIFI_Init+0xf8>)
    ptr = strtok(NULL, ",");
 8000b7e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8000c38 <ES_WIFI_Init+0xf4>
  ptr = strtok((char *)pdata + 2, ",");
 8000b82:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000b86:	f003 f973 	bl	8003e70 <strtok>
  while (ptr != NULL){
 8000b8a:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8000b8c:	f104 0868 	add.w	r8, r4, #104	; 0x68
 8000b90:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d0e1      	beq.n	8000b5a <ES_WIFI_Init+0x16>
    switch (num++) {
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d80c      	bhi.n	8000bb4 <ES_WIFI_Init+0x70>
 8000b9a:	e8df f003 	tbb	[pc, r3]
 8000b9e:	1104      	.short	0x1104
 8000ba0:	392f251b 	.word	0x392f251b
 8000ba4:	3f          	.byte	0x3f
 8000ba5:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	221f      	movs	r2, #31
 8000baa:	4620      	mov	r0, r4
 8000bac:	f003 f936 	bl	8003e1c <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	77e3      	strb	r3, [r4, #31]
    ptr = strtok(NULL, ",");
 8000bb4:	4649      	mov	r1, r9
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f003 f95a 	bl	8003e70 <strtok>
 8000bbc:	3601      	adds	r6, #1
 8000bbe:	e7e7      	b.n	8000b90 <ES_WIFI_Init+0x4c>
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8000bc0:	4601      	mov	r1, r0
 8000bc2:	2217      	movs	r2, #23
 8000bc4:	f104 0020 	add.w	r0, r4, #32
 8000bc8:	f003 f928 	bl	8003e1c <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
      break;
 8000bd2:	e7ef      	b.n	8000bb4 <ES_WIFI_Init+0x70>
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8000bd4:	4601      	mov	r1, r0
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8000bdc:	f003 f91e 	bl	8003e1c <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8000be0:	2300      	movs	r3, #0
 8000be2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
      break;
 8000be6:	e7e5      	b.n	8000bb4 <ES_WIFI_Init+0x70>
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8000be8:	4601      	mov	r1, r0
 8000bea:	220f      	movs	r2, #15
 8000bec:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8000bf0:	f003 f914 	bl	8003e1c <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
      break;
 8000bfa:	e7db      	b.n	8000bb4 <ES_WIFI_Init+0x70>
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8000bfc:	4601      	mov	r1, r0
 8000bfe:	220f      	movs	r2, #15
 8000c00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c04:	f003 f90a 	bl	8003e1c <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      break;
 8000c0e:	e7d1      	b.n	8000bb4 <ES_WIFI_Init+0x70>
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8000c10:	2100      	movs	r1, #0
 8000c12:	f7ff fe2e 	bl	8000872 <ParseNumber>
 8000c16:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
      break;
 8000c1a:	e7cb      	b.n	8000bb4 <ES_WIFI_Init+0x70>
      ptr = strtok(ptr, "\r");
 8000c1c:	4639      	mov	r1, r7
 8000c1e:	f003 f927 	bl	8003e70 <strtok>
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8000c22:	221f      	movs	r2, #31
      ptr = strtok(ptr, "\r");
 8000c24:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8000c26:	4640      	mov	r0, r8
 8000c28:	f003 f8f8 	bl	8003e1c <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f884 3087 	strb.w	r3, [r4, #135]	; 0x87
      break;
 8000c32:	e7bf      	b.n	8000bb4 <ES_WIFI_Init+0x70>
 8000c34:	080056f4 	.word	0x080056f4
 8000c38:	080058fc 	.word	0x080058fc
 8000c3c:	080057c3 	.word	0x080057c3

08000c40 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8000c40:	b530      	push	{r4, r5, lr}
 8000c42:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8000c46:	b158      	cbz	r0, 8000c60 <ES_WIFI_RegisterBusIO+0x20>
 8000c48:	b151      	cbz	r1, 8000c60 <ES_WIFI_RegisterBusIO+0x20>
 8000c4a:	b14a      	cbz	r2, 8000c60 <ES_WIFI_RegisterBusIO+0x20>
 8000c4c:	b145      	cbz	r5, 8000c60 <ES_WIFI_RegisterBusIO+0x20>
 8000c4e:	b13c      	cbz	r4, 8000c60 <ES_WIFI_RegisterBusIO+0x20>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_DeInit = IO_DeInit;
 8000c50:	e9c0 1245 	strd	r1, r2, [r0, #276]	; 0x114
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 8000c54:	e9c0 5448 	strd	r5, r4, [r0, #288]	; 0x120
  Obj->fops.IO_Delay = IO_Delay;
 8000c58:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8000c5c:	2000      	movs	r0, #0
}
 8000c5e:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8000c60:	2002      	movs	r0, #2
 8000c62:	e7fc      	b.n	8000c5e <ES_WIFI_RegisterBusIO+0x1e>

08000c64 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 8000c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8000c66:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8000c6e:	4620      	mov	r0, r4
 8000c70:	460a      	mov	r2, r1
 8000c72:	4918      	ldr	r1, [pc, #96]	; (8000cd4 <ES_WIFI_Connect+0x70>)
{
 8000c74:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 8000c76:	f003 f8a9 	bl	8003dcc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000c7a:	4622      	mov	r2, r4
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	4628      	mov	r0, r5
 8000c80:	f7ff fed8 	bl	8000a34 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000c84:	bb20      	cbnz	r0, 8000cd0 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8000c86:	4914      	ldr	r1, [pc, #80]	; (8000cd8 <ES_WIFI_Connect+0x74>)
 8000c88:	463a      	mov	r2, r7
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	f003 f89e 	bl	8003dcc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000c90:	4622      	mov	r2, r4
 8000c92:	4621      	mov	r1, r4
 8000c94:	4628      	mov	r0, r5
 8000c96:	f7ff fecd 	bl	8000a34 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8000c9a:	b9c8      	cbnz	r0, 8000cd0 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8000c9c:	490f      	ldr	r1, [pc, #60]	; (8000cdc <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8000c9e:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8000ca2:	4632      	mov	r2, r6
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f003 f891 	bl	8003dcc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000caa:	4622      	mov	r2, r4
 8000cac:	4621      	mov	r1, r4
 8000cae:	4628      	mov	r0, r5
 8000cb0:	f7ff fec0 	bl	8000a34 <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 8000cb4:	b960      	cbnz	r0, 8000cd0 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8000cb6:	490a      	ldr	r1, [pc, #40]	; (8000ce0 <ES_WIFI_Connect+0x7c>)
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f003 f8a7 	bl	8003e0c <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000cbe:	4622      	mov	r2, r4
 8000cc0:	4621      	mov	r1, r4
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	f7ff feb6 	bl	8000a34 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8000cc8:	b910      	cbnz	r0, 8000cd0 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8000cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	0800570a 	.word	0x0800570a
 8000cd8:	08005711 	.word	0x08005711
 8000cdc:	08005718 	.word	0x08005718
 8000ce0:	0800571f 	.word	0x0800571f

08000ce4 <ES_WIFI_IsConnected>:
{
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8000ce4:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000ce8:	b510      	push	{r4, lr}
  sprintf((char *)Obj->CmdData, "CS\r");
 8000cea:	490b      	ldr	r1, [pc, #44]	; (8000d18 <ES_WIFI_IsConnected+0x34>)
{
 8000cec:	4604      	mov	r4, r0
  sprintf((char *)Obj->CmdData, "CS\r");
 8000cee:	4610      	mov	r0, r2
 8000cf0:	f003 f88c 	bl	8003e0c <strcpy>
 8000cf4:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000cf6:	4601      	mov	r1, r0
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f7ff fe9b 	bl	8000a34 <AT_ExecuteCommand>
  if (ret == ES_WIFI_STATUS_OK)
 8000cfe:	b938      	cbnz	r0, 8000d10 <ES_WIFI_IsConnected+0x2c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8000d00:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8000d04:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000d08:	4253      	negs	r3, r2
 8000d0a:	4153      	adcs	r3, r2
 8000d0c:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
}
 8000d10:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8000d14:	bd10      	pop	{r4, pc}
 8000d16:	bf00      	nop
 8000d18:	08005723 	.word	0x08005723

08000d1c <ES_WIFI_GetNetworkSettings>:
{
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8000d1c:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char *)Obj->CmdData, "C?\r");
 8000d24:	493b      	ldr	r1, [pc, #236]	; (8000e14 <ES_WIFI_GetNetworkSettings+0xf8>)
{
 8000d26:	4604      	mov	r4, r0
  sprintf((char *)Obj->CmdData, "C?\r");
 8000d28:	4610      	mov	r0, r2
 8000d2a:	f003 f86f 	bl	8003e0c <strcpy>
 8000d2e:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000d30:	4601      	mov	r1, r0
 8000d32:	4620      	mov	r0, r4
 8000d34:	f7ff fe7e 	bl	8000a34 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8000d38:	4606      	mov	r6, r0
 8000d3a:	b960      	cbnz	r0, 8000d56 <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 8000d3c:	4936      	ldr	r1, [pc, #216]	; (8000e18 <ES_WIFI_GetNetworkSettings+0xfc>)
    ptr = strtok(NULL, ",");
 8000d3e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8000e18 <ES_WIFI_GetNetworkSettings+0xfc>
  ptr = strtok(pdata + 2, ",");
 8000d42:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000d46:	f003 f893 	bl	8003e70 <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8000d4a:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 8000d4e:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8000d50:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 8000d54:	b910      	cbnz	r0, 8000d5c <ES_WIFI_GetNetworkSettings+0x40>
  }

  UNLOCK_WIFI();

  return ret;
}
 8000d56:	4630      	mov	r0, r6
 8000d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8000d5c:	2d0b      	cmp	r5, #11
 8000d5e:	d80e      	bhi.n	8000d7e <ES_WIFI_GetNetworkSettings+0x62>
 8000d60:	e8df f005 	tbb	[pc, r5]
 8000d64:	2a241b06 	.word	0x2a241b06
 8000d68:	403c3630 	.word	0x403c3630
 8000d6c:	514b4844 	.word	0x514b4844
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8000d70:	4601      	mov	r1, r0
 8000d72:	2220      	movs	r2, #32
 8000d74:	4638      	mov	r0, r7
 8000d76:	f003 f851 	bl	8003e1c <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 8000d7a:	f884 60ad 	strb.w	r6, [r4, #173]	; 0xad
    ptr = strtok(NULL, ",");
 8000d7e:	4649      	mov	r1, r9
 8000d80:	2000      	movs	r0, #0
 8000d82:	f003 f875 	bl	8003e70 <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8000d86:	2800      	cmp	r0, #0
 8000d88:	d0e5      	beq.n	8000d56 <ES_WIFI_GetNetworkSettings+0x3a>
 8000d8a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8000d8e:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 8000d90:	bf14      	ite	ne
 8000d92:	3501      	addne	r5, #1
      num++;
 8000d94:	3502      	addeq	r5, #2
 8000d96:	b2ed      	uxtb	r5, r5
 8000d98:	e7dc      	b.n	8000d54 <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	2220      	movs	r2, #32
 8000d9e:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 8000da2:	f003 f83b 	bl	8003e1c <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 8000da6:	f884 60ce 	strb.w	r6, [r4, #206]	; 0xce
      break;
 8000daa:	e7e8      	b.n	8000d7e <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000dac:	2100      	movs	r1, #0
 8000dae:	f7ff fd60 	bl	8000872 <ParseNumber>
 8000db2:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
        break;
 8000db6:	e7e2      	b.n	8000d7e <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 8000db8:	2100      	movs	r1, #0
 8000dba:	f7ff fd5a 	bl	8000872 <ParseNumber>
 8000dbe:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
      break;
 8000dc2:	e7dc      	b.n	8000d7e <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	f7ff fd54 	bl	8000872 <ParseNumber>
 8000dca:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
      break;
 8000dce:	e7d6      	b.n	8000d7e <ES_WIFI_GetNetworkSettings+0x62>
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8000dd6:	f7ff fe0b 	bl	80009f0 <ParseIP>
      break;
 8000dda:	e7d0      	b.n	8000d7e <ES_WIFI_GetNetworkSettings+0x62>
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8000ddc:	2204      	movs	r2, #4
 8000dde:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8000de2:	e7f8      	b.n	8000dd6 <ES_WIFI_GetNetworkSettings+0xba>
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8000de4:	2204      	movs	r2, #4
 8000de6:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 8000dea:	e7f4      	b.n	8000dd6 <ES_WIFI_GetNetworkSettings+0xba>
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8000dec:	2204      	movs	r2, #4
 8000dee:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 8000df2:	e7f0      	b.n	8000dd6 <ES_WIFI_GetNetworkSettings+0xba>
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8000df4:	2204      	movs	r2, #4
 8000df6:	4641      	mov	r1, r8
 8000df8:	e7ed      	b.n	8000dd6 <ES_WIFI_GetNetworkSettings+0xba>
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f7ff fd39 	bl	8000872 <ParseNumber>
 8000e00:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
      break;
 8000e04:	e7bb      	b.n	8000d7e <ES_WIFI_GetNetworkSettings+0x62>
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8000e06:	2100      	movs	r1, #0
 8000e08:	f7ff fd33 	bl	8000872 <ParseNumber>
 8000e0c:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
      break;
 8000e10:	e7b5      	b.n	8000d7e <ES_WIFI_GetNetworkSettings+0x62>
 8000e12:	bf00      	nop
 8000e14:	0800572b 	.word	0x0800572b
 8000e18:	080058fc 	.word	0x080058fc

08000e1c <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8000e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1e:	4617      	mov	r7, r2
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8000e20:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000e24:	4604      	mov	r4, r0
 8000e26:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData, "Z5\r");
 8000e28:	4610      	mov	r0, r2
 8000e2a:	490a      	ldr	r1, [pc, #40]	; (8000e54 <ES_WIFI_GetMACAddress+0x38>)
 8000e2c:	f002 ffee 	bl	8003e0c <strcpy>
 8000e30:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e32:	4601      	mov	r1, r0
 8000e34:	4620      	mov	r0, r4
 8000e36:	f7ff fdfd 	bl	8000a34 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000e3a:	4605      	mov	r5, r0
 8000e3c:	b940      	cbnz	r0, 8000e50 <ES_WIFI_GetMACAddress+0x34>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8000e3e:	4906      	ldr	r1, [pc, #24]	; (8000e58 <ES_WIFI_GetMACAddress+0x3c>)
 8000e40:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000e44:	f003 f814 	bl	8003e70 <strtok>
    ParseMAC(ptr, mac, MacLength);
 8000e48:	463a      	mov	r2, r7
 8000e4a:	4631      	mov	r1, r6
 8000e4c:	f7ff fe32 	bl	8000ab4 <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
}
 8000e50:	4628      	mov	r0, r5
 8000e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e54:	0800576d 	.word	0x0800576d
 8000e58:	080059bb 	.word	0x080059bb

08000e5c <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8000e5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8000e5e:	780b      	ldrb	r3, [r1, #0]
{
 8000e60:	4605      	mov	r5, r0
 8000e62:	460e      	mov	r6, r1
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8000e64:	b10b      	cbz	r3, 8000e6a <ES_WIFI_StartClientConnection+0xe>
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d102      	bne.n	8000e70 <ES_WIFI_StartClientConnection+0x14>
 8000e6a:	8873      	ldrh	r3, [r6, #2]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d064      	beq.n	8000f3a <ES_WIFI_StartClientConnection+0xde>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8000e70:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8000e74:	7872      	ldrb	r2, [r6, #1]
 8000e76:	4932      	ldr	r1, [pc, #200]	; (8000f40 <ES_WIFI_StartClientConnection+0xe4>)
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f002 ffa7 	bl	8003dcc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e7e:	4622      	mov	r2, r4
 8000e80:	4621      	mov	r1, r4
 8000e82:	4628      	mov	r0, r5
 8000e84:	f7ff fdd6 	bl	8000a34 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d146      	bne.n	8000f1a <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8000e8c:	7832      	ldrb	r2, [r6, #0]
 8000e8e:	492d      	ldr	r1, [pc, #180]	; (8000f44 <ES_WIFI_StartClientConnection+0xe8>)
 8000e90:	4620      	mov	r0, r4
 8000e92:	f002 ff9b 	bl	8003dcc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e96:	4622      	mov	r2, r4
 8000e98:	4621      	mov	r1, r4
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	f7ff fdca 	bl	8000a34 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d13a      	bne.n	8000f1a <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8000ea4:	88b2      	ldrh	r2, [r6, #4]
 8000ea6:	4928      	ldr	r1, [pc, #160]	; (8000f48 <ES_WIFI_StartClientConnection+0xec>)
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f002 ff8f 	bl	8003dcc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000eae:	4622      	mov	r2, r4
 8000eb0:	4621      	mov	r1, r4
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	f7ff fdbe 	bl	8000a34 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8000eb8:	bb78      	cbnz	r0, 8000f1a <ES_WIFI_StartClientConnection+0xbe>
 8000eba:	7833      	ldrb	r3, [r6, #0]
 8000ebc:	b30b      	cbz	r3, 8000f02 <ES_WIFI_StartClientConnection+0xa6>
 8000ebe:	2b03      	cmp	r3, #3
 8000ec0:	d01f      	beq.n	8000f02 <ES_WIFI_StartClientConnection+0xa6>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8000ec2:	7833      	ldrb	r3, [r6, #0]
 8000ec4:	bb5b      	cbnz	r3, 8000f1e <ES_WIFI_StartClientConnection+0xc2>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8000ec6:	7a73      	ldrb	r3, [r6, #9]
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	7a33      	ldrb	r3, [r6, #8]
 8000ecc:	79b2      	ldrb	r2, [r6, #6]
 8000ece:	491f      	ldr	r1, [pc, #124]	; (8000f4c <ES_WIFI_StartClientConnection+0xf0>)
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	79f3      	ldrb	r3, [r6, #7]
 8000ed6:	f002 ff79 	bl	8003dcc <siprintf>
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000eda:	4622      	mov	r2, r4
 8000edc:	4621      	mov	r1, r4
 8000ede:	4628      	mov	r0, r5
 8000ee0:	f7ff fda8 	bl	8000a34 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8000ee4:	b9c8      	cbnz	r0, 8000f1a <ES_WIFI_StartClientConnection+0xbe>
 8000ee6:	7833      	ldrb	r3, [r6, #0]
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d11a      	bne.n	8000f22 <ES_WIFI_StartClientConnection+0xc6>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8000eec:	4918      	ldr	r1, [pc, #96]	; (8000f50 <ES_WIFI_StartClientConnection+0xf4>)
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f002 ff8c 	bl	8003e0c <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000ef4:	4622      	mov	r2, r4
 8000ef6:	4621      	mov	r1, r4
 8000ef8:	4628      	mov	r0, r5
 8000efa:	f7ff fd9b 	bl	8000a34 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8000efe:	b180      	cbz	r0, 8000f22 <ES_WIFI_StartClientConnection+0xc6>
 8000f00:	e00b      	b.n	8000f1a <ES_WIFI_StartClientConnection+0xbe>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8000f02:	8872      	ldrh	r2, [r6, #2]
 8000f04:	4913      	ldr	r1, [pc, #76]	; (8000f54 <ES_WIFI_StartClientConnection+0xf8>)
 8000f06:	4620      	mov	r0, r4
 8000f08:	f002 ff60 	bl	8003dcc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f0c:	4622      	mov	r2, r4
 8000f0e:	4621      	mov	r1, r4
 8000f10:	4628      	mov	r0, r5
 8000f12:	f7ff fd8f 	bl	8000a34 <AT_ExecuteCommand>
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d0d3      	beq.n	8000ec2 <ES_WIFI_StartClientConnection+0x66>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8000f1a:	b002      	add	sp, #8
 8000f1c:	bd70      	pop	{r4, r5, r6, pc}
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d0d1      	beq.n	8000ec6 <ES_WIFI_StartClientConnection+0x6a>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8000f22:	490d      	ldr	r1, [pc, #52]	; (8000f58 <ES_WIFI_StartClientConnection+0xfc>)
 8000f24:	4620      	mov	r0, r4
 8000f26:	f002 ff71 	bl	8003e0c <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f2a:	4622      	mov	r2, r4
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	4628      	mov	r0, r5
}
 8000f30:	b002      	add	sp, #8
 8000f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f36:	f7ff bd7d 	b.w	8000a34 <AT_ExecuteCommand>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	e7ed      	b.n	8000f1a <ES_WIFI_StartClientConnection+0xbe>
 8000f3e:	bf00      	nop
 8000f40:	080057cc 	.word	0x080057cc
 8000f44:	080057d3 	.word	0x080057d3
 8000f48:	080057da 	.word	0x080057da
 8000f4c:	080057ee 	.word	0x080057ee
 8000f50:	080057fe 	.word	0x080057fe
 8000f54:	080057e1 	.word	0x080057e1
 8000f58:	080057e8 	.word	0x080057e8

08000f5c <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8000f5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8000f60:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8000f64:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8000f68:	bf28      	it	cs
 8000f6a:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
  }

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8000f6e:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 8000f72:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 8000f74:	f8a8 3000 	strh.w	r3, [r8]
{
 8000f78:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	492e      	ldr	r1, [pc, #184]	; (8001038 <ES_WIFI_SendData+0xdc>)
 8000f80:	461f      	mov	r7, r3
 8000f82:	f002 ff23 	bl	8003dcc <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000f86:	462a      	mov	r2, r5
 8000f88:	4629      	mov	r1, r5
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f7ff fd52 	bl	8000a34 <AT_ExecuteCommand>
  if (ret == ES_WIFI_STATUS_OK)
 8000f90:	4604      	mov	r4, r0
 8000f92:	2800      	cmp	r0, #0
 8000f94:	d147      	bne.n	8001026 <ES_WIFI_SendData+0xca>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8000f96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000f98:	4928      	ldr	r1, [pc, #160]	; (800103c <ES_WIFI_SendData+0xe0>)
 8000f9a:	2a01      	cmp	r2, #1
 8000f9c:	bf38      	it	cc
 8000f9e:	2201      	movcc	r2, #1
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	f002 ff13 	bl	8003dcc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fa6:	462a      	mov	r2, r5
 8000fa8:	4629      	mov	r1, r5
 8000faa:	4630      	mov	r0, r6
 8000fac:	f7ff fd42 	bl	8000a34 <AT_ExecuteCommand>

    if (ret == ES_WIFI_STATUS_OK)
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	bb80      	cbnz	r0, 8001016 <ES_WIFI_SendData+0xba>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8000fb4:	4922      	ldr	r1, [pc, #136]	; (8001040 <ES_WIFI_SendData+0xe4>)
 8000fb6:	463a      	mov	r2, r7
 8000fb8:	4628      	mov	r0, r5
 8000fba:	f002 ff07 	bl	8003dcc <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8000fbe:	9500      	str	r5, [sp, #0]
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	464a      	mov	r2, r9
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	f7ff fc70 	bl	80008ac <AT_RequestSendData>

      if (ret == ES_WIFI_STATUS_OK)
 8000fcc:	4604      	mov	r4, r0
 8000fce:	b998      	cbnz	r0, 8000ff8 <ES_WIFI_SendData+0x9c>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8000fd0:	491c      	ldr	r1, [pc, #112]	; (8001044 <ES_WIFI_SendData+0xe8>)
 8000fd2:	4628      	mov	r0, r5
 8000fd4:	f002 ff35 	bl	8003e42 <strstr>
 8000fd8:	b1c8      	cbz	r0, 800100e <ES_WIFI_SendData+0xb2>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8000fda:	491b      	ldr	r1, [pc, #108]	; (8001048 <ES_WIFI_SendData+0xec>)
 8000fdc:	481b      	ldr	r0, [pc, #108]	; (800104c <ES_WIFI_SendData+0xf0>)
 8000fde:	f640 1201 	movw	r2, #2305	; 0x901
 8000fe2:	f002 fe65 	bl	8003cb0 <iprintf>
 8000fe6:	481a      	ldr	r0, [pc, #104]	; (8001050 <ES_WIFI_SendData+0xf4>)
 8000fe8:	4629      	mov	r1, r5
 8000fea:	f002 fe61 	bl	8003cb0 <iprintf>
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f8a8 3000 	strh.w	r3, [r8]
 8000ff4:	2402      	movs	r4, #2
 8000ff6:	e00a      	b.n	800100e <ES_WIFI_SendData+0xb2>
        DEBUG("Send Data command failed\n");
 8000ff8:	4913      	ldr	r1, [pc, #76]	; (8001048 <ES_WIFI_SendData+0xec>)
 8000ffa:	4814      	ldr	r0, [pc, #80]	; (800104c <ES_WIFI_SendData+0xf0>)
 8000ffc:	f640 1207 	movw	r2, #2311	; 0x907
 8001000:	f002 fe56 	bl	8003cb0 <iprintf>
 8001004:	4813      	ldr	r0, [pc, #76]	; (8001054 <ES_WIFI_SendData+0xf8>)
   DEBUG("P0 command failed\n");
 8001006:	f002 fed9 	bl	8003dbc <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 800100a:	2c02      	cmp	r4, #2
 800100c:	d0ef      	beq.n	8000fee <ES_WIFI_SendData+0x92>
  }

  UNLOCK_WIFI();

  return ret;
}
 800100e:	4620      	mov	r0, r4
 8001010:	b003      	add	sp, #12
 8001012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n");
 8001016:	490c      	ldr	r1, [pc, #48]	; (8001048 <ES_WIFI_SendData+0xec>)
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <ES_WIFI_SendData+0xf0>)
 800101a:	f640 120c 	movw	r2, #2316	; 0x90c
 800101e:	f002 fe47 	bl	8003cb0 <iprintf>
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <ES_WIFI_SendData+0xfc>)
 8001024:	e7ef      	b.n	8001006 <ES_WIFI_SendData+0xaa>
   DEBUG("P0 command failed\n");
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <ES_WIFI_SendData+0xec>)
 8001028:	4808      	ldr	r0, [pc, #32]	; (800104c <ES_WIFI_SendData+0xf0>)
 800102a:	f640 1211 	movw	r2, #2321	; 0x911
 800102e:	f002 fe3f 	bl	8003cb0 <iprintf>
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <ES_WIFI_SendData+0x100>)
 8001034:	e7e7      	b.n	8001006 <ES_WIFI_SendData+0xaa>
 8001036:	bf00      	nop
 8001038:	080057cc 	.word	0x080057cc
 800103c:	080059a8 	.word	0x080059a8
 8001040:	080059b0 	.word	0x080059b0
 8001044:	080059b9 	.word	0x080059b9
 8001048:	08005840 	.word	0x08005840
 800104c:	080058b9 	.word	0x080058b9
 8001050:	080059be 	.word	0x080059be
 8001054:	080059d9 	.word	0x080059d9
 8001058:	080059f2 	.word	0x080059f2
 800105c:	08005a04 	.word	0x08005a04

08001060 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8001060:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8001064:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8001068:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800106c:	4606      	mov	r6, r0
 800106e:	4690      	mov	r8, r2
 8001070:	461f      	mov	r7, r3
  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8001072:	d867      	bhi.n	8001144 <ES_WIFI_ReceiveData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8001074:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8001078:	460a      	mov	r2, r1
 800107a:	4628      	mov	r0, r5
 800107c:	4932      	ldr	r1, [pc, #200]	; (8001148 <ES_WIFI_ReceiveData+0xe8>)
 800107e:	f002 fea5 	bl	8003dcc <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001082:	462a      	mov	r2, r5
 8001084:	4629      	mov	r1, r5
 8001086:	4630      	mov	r0, r6
 8001088:	f7ff fcd4 	bl	8000a34 <AT_ExecuteCommand>
 800108c:	4604      	mov	r4, r0
 800108e:	4682      	mov	sl, r0

    if (ret == ES_WIFI_STATUS_OK)
 8001090:	2800      	cmp	r0, #0
 8001092:	d149      	bne.n	8001128 <ES_WIFI_ReceiveData+0xc8>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8001094:	492d      	ldr	r1, [pc, #180]	; (800114c <ES_WIFI_ReceiveData+0xec>)
 8001096:	463a      	mov	r2, r7
 8001098:	4628      	mov	r0, r5
 800109a:	f002 fe97 	bl	8003dcc <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800109e:	462a      	mov	r2, r5
 80010a0:	4629      	mov	r1, r5
 80010a2:	4630      	mov	r0, r6
 80010a4:	f7ff fcc6 	bl	8000a34 <AT_ExecuteCommand>
      if (ret == ES_WIFI_STATUS_OK)
 80010a8:	4604      	mov	r4, r0
 80010aa:	bb88      	cbnz	r0, 8001110 <ES_WIFI_ReceiveData+0xb0>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 80010ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80010ae:	4928      	ldr	r1, [pc, #160]	; (8001150 <ES_WIFI_ReceiveData+0xf0>)
 80010b0:	2a01      	cmp	r2, #1
 80010b2:	bf38      	it	cc
 80010b4:	2201      	movcc	r2, #1
 80010b6:	4628      	mov	r0, r5
 80010b8:	f002 fe88 	bl	8003dcc <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80010bc:	462a      	mov	r2, r5
 80010be:	4629      	mov	r1, r5
 80010c0:	4630      	mov	r0, r6
 80010c2:	f7ff fcb7 	bl	8000a34 <AT_ExecuteCommand>
        if (ret == ES_WIFI_STATUS_OK)
 80010c6:	4604      	mov	r4, r0
 80010c8:	b9d0      	cbnz	r0, 8001100 <ES_WIFI_ReceiveData+0xa0>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 80010ca:	4922      	ldr	r1, [pc, #136]	; (8001154 <ES_WIFI_ReceiveData+0xf4>)
 80010cc:	4628      	mov	r0, r5
 80010ce:	f002 fe9d 	bl	8003e0c <strcpy>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80010d2:	f8cd 9000 	str.w	r9, [sp]
 80010d6:	463b      	mov	r3, r7
 80010d8:	4642      	mov	r2, r8
 80010da:	4629      	mov	r1, r5
 80010dc:	4630      	mov	r0, r6
 80010de:	f7ff fc31 	bl	8000944 <AT_RequestReceiveData>
          if (ret != ES_WIFI_STATUS_OK)
 80010e2:	4604      	mov	r4, r0
 80010e4:	b140      	cbz	r0, 80010f8 <ES_WIFI_ReceiveData+0x98>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 80010e6:	491c      	ldr	r1, [pc, #112]	; (8001158 <ES_WIFI_ReceiveData+0xf8>)
 80010e8:	481c      	ldr	r0, [pc, #112]	; (800115c <ES_WIFI_ReceiveData+0xfc>)
 80010ea:	f640 12a9 	movw	r2, #2473	; 0x9a9
 80010ee:	f002 fddf 	bl	8003cb0 <iprintf>
 80010f2:	481b      	ldr	r0, [pc, #108]	; (8001160 <ES_WIFI_ReceiveData+0x100>)
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 80010f4:	f002 fe62 	bl	8003dbc <puts>
  }

  UNLOCK_WIFI();

  return ret;
}
 80010f8:	4620      	mov	r0, r4
 80010fa:	b002      	add	sp, #8
 80010fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         DEBUG("Setting timeout failed\n");
 8001100:	4915      	ldr	r1, [pc, #84]	; (8001158 <ES_WIFI_ReceiveData+0xf8>)
 8001102:	4816      	ldr	r0, [pc, #88]	; (800115c <ES_WIFI_ReceiveData+0xfc>)
 8001104:	f640 12ae 	movw	r2, #2478	; 0x9ae
 8001108:	f002 fdd2 	bl	8003cb0 <iprintf>
 800110c:	4815      	ldr	r0, [pc, #84]	; (8001164 <ES_WIFI_ReceiveData+0x104>)
 800110e:	e7f1      	b.n	80010f4 <ES_WIFI_ReceiveData+0x94>
        DEBUG("Setting requested len failed\n");
 8001110:	4911      	ldr	r1, [pc, #68]	; (8001158 <ES_WIFI_ReceiveData+0xf8>)
 8001112:	4812      	ldr	r0, [pc, #72]	; (800115c <ES_WIFI_ReceiveData+0xfc>)
 8001114:	f640 12b3 	movw	r2, #2483	; 0x9b3
 8001118:	f002 fdca 	bl	8003cb0 <iprintf>
 800111c:	4812      	ldr	r0, [pc, #72]	; (8001168 <ES_WIFI_ReceiveData+0x108>)
 800111e:	f002 fe4d 	bl	8003dbc <puts>
        *Receivedlen = 0;
 8001122:	f8a9 a000 	strh.w	sl, [r9]
 8001126:	e7e7      	b.n	80010f8 <ES_WIFI_ReceiveData+0x98>
      DEBUG("Setting socket for read failed\n");
 8001128:	f640 12b9 	movw	r2, #2489	; 0x9b9
 800112c:	490a      	ldr	r1, [pc, #40]	; (8001158 <ES_WIFI_ReceiveData+0xf8>)
 800112e:	480b      	ldr	r0, [pc, #44]	; (800115c <ES_WIFI_ReceiveData+0xfc>)
 8001130:	f002 fdbe 	bl	8003cb0 <iprintf>
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <ES_WIFI_ReceiveData+0x10c>)
 8001136:	f002 fe41 	bl	8003dbc <puts>
      issue15++;
 800113a:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <ES_WIFI_ReceiveData+0x110>)
 800113c:	6813      	ldr	r3, [r2, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e7d9      	b.n	80010f8 <ES_WIFI_ReceiveData+0x98>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001144:	2402      	movs	r4, #2
 8001146:	e7d7      	b.n	80010f8 <ES_WIFI_ReceiveData+0x98>
 8001148:	080057cc 	.word	0x080057cc
 800114c:	08005a26 	.word	0x08005a26
 8001150:	08005a2d 	.word	0x08005a2d
 8001154:	08005a35 	.word	0x08005a35
 8001158:	08005840 	.word	0x08005840
 800115c:	080058b9 	.word	0x080058b9
 8001160:	08005a39 	.word	0x08005a39
 8001164:	08005a56 	.word	0x08005a56
 8001168:	08005a6d 	.word	0x08005a6d
 800116c:	08005a8a 	.word	0x08005a8a
 8001170:	20000298 	.word	0x20000298

08001174 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8001174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t        loop_per_us = 0;
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8001176:	4c16      	ldr	r4, [pc, #88]	; (80011d0 <SPI_WIFI_DelayUs+0x5c>)
 8001178:	4f16      	ldr	r7, [pc, #88]	; (80011d4 <SPI_WIFI_DelayUs+0x60>)
  volatile        uint32_t ct = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	9301      	str	r3, [sp, #4]
  if (cycle_per_loop == 0)
 800117e:	6823      	ldr	r3, [r4, #0]
{
 8001180:	4606      	mov	r6, r0
  if (cycle_per_loop == 0)
 8001182:	b98b      	cbnz	r3, 80011a8 <SPI_WIFI_DelayUs+0x34>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800118a:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t t = 0;
     ct = cycle_per_ms;
 800118e:	9301      	str	r3, [sp, #4]
     t = HAL_GetTick();
 8001190:	f000 fbde 	bl	8001950 <HAL_GetTick>
 8001194:	4605      	mov	r5, r0
     while(ct) ct--;
 8001196:	9b01      	ldr	r3, [sp, #4]
 8001198:	b99b      	cbnz	r3, 80011c2 <SPI_WIFI_DelayUs+0x4e>
     cycle_per_loop = HAL_GetTick() - t;
 800119a:	f000 fbd9 	bl	8001950 <HAL_GetTick>
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 800119e:	1b40      	subs	r0, r0, r5
 80011a0:	bf0a      	itet	eq
 80011a2:	2301      	moveq	r3, #1
     cycle_per_loop = HAL_GetTick() - t;
 80011a4:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80011a6:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80011a8:	480b      	ldr	r0, [pc, #44]	; (80011d8 <SPI_WIFI_DelayUs+0x64>)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	fbb3 f3f0 	udiv	r3, r3, r0
 80011b0:	6820      	ldr	r0, [r4, #0]
 80011b2:	fbb3 f3f0 	udiv	r3, r3, r0
  ct = n * loop_per_us;
 80011b6:	4373      	muls	r3, r6
  while(ct) ct--;
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	9b01      	ldr	r3, [sp, #4]
 80011bc:	b92b      	cbnz	r3, 80011ca <SPI_WIFI_DelayUs+0x56>
  return;
}
 80011be:	b003      	add	sp, #12
 80011c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 80011c2:	9b01      	ldr	r3, [sp, #4]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	9301      	str	r3, [sp, #4]
 80011c8:	e7e5      	b.n	8001196 <SPI_WIFI_DelayUs+0x22>
  while(ct) ct--;
 80011ca:	9b01      	ldr	r3, [sp, #4]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	e7f3      	b.n	80011b8 <SPI_WIFI_DelayUs+0x44>
 80011d0:	2000029c 	.word	0x2000029c
 80011d4:	20000018 	.word	0x20000018
 80011d8:	000f4240 	.word	0x000f4240

080011dc <wait_spi_tx_event.isra.0>:
static int wait_spi_tx_event(int timeout)
 80011dc:	b570      	push	{r4, r5, r6, lr}
 80011de:	4605      	mov	r5, r0
  int tickstart = HAL_GetTick();
 80011e0:	f000 fbb6 	bl	8001950 <HAL_GetTick>
  while (spi_tx_event == 1)
 80011e4:	4e05      	ldr	r6, [pc, #20]	; (80011fc <wait_spi_tx_event.isra.0+0x20>)
  int tickstart = HAL_GetTick();
 80011e6:	4604      	mov	r4, r0
  while (spi_tx_event == 1)
 80011e8:	6873      	ldr	r3, [r6, #4]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d104      	bne.n	80011f8 <wait_spi_tx_event.isra.0+0x1c>
    if((HAL_GetTick() - tickstart ) > timeout)
 80011ee:	f000 fbaf 	bl	8001950 <HAL_GetTick>
 80011f2:	1b00      	subs	r0, r0, r4
 80011f4:	42a8      	cmp	r0, r5
 80011f6:	d9f7      	bls.n	80011e8 <wait_spi_tx_event.isra.0+0xc>
}
 80011f8:	bd70      	pop	{r4, r5, r6, pc}
 80011fa:	bf00      	nop
 80011fc:	2000029c 	.word	0x2000029c

08001200 <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001200:	4b3f      	ldr	r3, [pc, #252]	; (8001300 <SPI_WIFI_MspInit+0x100>)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001202:	4840      	ldr	r0, [pc, #256]	; (8001304 <SPI_WIFI_MspInit+0x104>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001204:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8001206:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800120c:	659a      	str	r2, [r3, #88]	; 0x58
 800120e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8001210:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001212:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001216:	9201      	str	r2, [sp, #4]
 8001218:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800121c:	f042 0202 	orr.w	r2, r2, #2
 8001220:	64da      	str	r2, [r3, #76]	; 0x4c
 8001222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001224:	f002 0202 	and.w	r2, r2, #2
 8001228:	9202      	str	r2, [sp, #8]
 800122a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800122e:	f042 0204 	orr.w	r2, r2, #4
 8001232:	64da      	str	r2, [r3, #76]	; 0x4c
 8001234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001236:	f002 0204 	and.w	r2, r2, #4
 800123a:	9203      	str	r2, [sp, #12]
 800123c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001240:	f042 0210 	orr.w	r2, r2, #16
 8001244:	64da      	str	r2, [r3, #76]	; 0x4c
 8001246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001248:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800124c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800124e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001250:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001254:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 8001256:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001258:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800125a:	f000 fd03 	bl	8001c64 <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800125e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001262:	a905      	add	r1, sp, #20
 8001264:	4827      	ldr	r0, [pc, #156]	; (8001304 <SPI_WIFI_MspInit+0x104>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001266:	2602      	movs	r6, #2
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001268:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800126c:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 8001270:	f000 fc14 	bl	8001a9c <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 8001274:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001278:	a905      	add	r1, sp, #20
 800127a:	4823      	ldr	r0, [pc, #140]	; (8001308 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800127c:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001280:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8001284:	f000 fc0a 	bl	8001a9c <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 8001288:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800128c:	a905      	add	r1, sp, #20
 800128e:	481e      	ldr	r0, [pc, #120]	; (8001308 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Alternate = 0;
 8001290:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8001292:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8001296:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800129a:	f000 fbff 	bl	8001a9c <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 800129e:	4622      	mov	r2, r4
 80012a0:	4621      	mov	r1, r4
 80012a2:	4819      	ldr	r0, [pc, #100]	; (8001308 <SPI_WIFI_MspInit+0x108>)
 80012a4:	f000 fcde 	bl	8001c64 <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80012a8:	a905      	add	r1, sp, #20
 80012aa:	4817      	ldr	r0, [pc, #92]	; (8001308 <SPI_WIFI_MspInit+0x108>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80012ac:	2706      	movs	r7, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80012ae:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80012b2:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80012b6:	f000 fbf1 	bl	8001a9c <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80012ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80012be:	a905      	add	r1, sp, #20
 80012c0:	4812      	ldr	r0, [pc, #72]	; (800130c <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80012c2:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80012c4:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80012c8:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80012cc:	f000 fbe6 	bl	8001a9c <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80012d4:	a905      	add	r1, sp, #20
 80012d6:	480d      	ldr	r0, [pc, #52]	; (800130c <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80012d8:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80012da:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80012de:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 80012e2:	f000 fbdb 	bl	8001a9c <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 80012e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 80012ea:	4808      	ldr	r0, [pc, #32]	; (800130c <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80012ec:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 80012ee:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80012f0:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80012f4:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 80012f8:	f000 fbd0 	bl	8001a9c <HAL_GPIO_Init>
}
 80012fc:	b00b      	add	sp, #44	; 0x2c
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001300:	40021000 	.word	0x40021000
 8001304:	48000400 	.word	0x48000400
 8001308:	48001000 	.word	0x48001000
 800130c:	48000800 	.word	0x48000800

08001310 <SPI_WIFI_ResetModule>:
{
 8001310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 8001312:	f000 fb1d 	bl	8001950 <HAL_GetTick>
  WIFI_RESET_MODULE();
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 800131c:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 800131e:	482e      	ldr	r0, [pc, #184]	; (80013d8 <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8001320:	4f2e      	ldr	r7, [pc, #184]	; (80013dc <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 8001322:	f000 fc9f 	bl	8001c64 <HAL_GPIO_WritePin>
 8001326:	200a      	movs	r0, #10
 8001328:	f000 fb18 	bl	800195c <HAL_Delay>
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001332:	4829      	ldr	r0, [pc, #164]	; (80013d8 <SPI_WIFI_ResetModule+0xc8>)
 8001334:	f000 fc96 	bl	8001c64 <HAL_GPIO_WritePin>
 8001338:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800133c:	f000 fb0e 	bl	800195c <HAL_Delay>
  WIFI_ENABLE_NSS();
 8001340:	4825      	ldr	r0, [pc, #148]	; (80013d8 <SPI_WIFI_ResetModule+0xc8>)
 8001342:	2200      	movs	r2, #0
 8001344:	2101      	movs	r1, #1
 8001346:	f000 fc8d 	bl	8001c64 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800134a:	200f      	movs	r0, #15
 800134c:	f7ff ff12 	bl	8001174 <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 8001350:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 8001352:	4821      	ldr	r0, [pc, #132]	; (80013d8 <SPI_WIFI_ResetModule+0xc8>)
 8001354:	2102      	movs	r1, #2
 8001356:	f000 fc7f 	bl	8001c58 <HAL_GPIO_ReadPin>
 800135a:	2801      	cmp	r0, #1
 800135c:	4602      	mov	r2, r0
 800135e:	d020      	beq.n	80013a2 <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS();
 8001360:	2201      	movs	r2, #1
 8001362:	481d      	ldr	r0, [pc, #116]	; (80013d8 <SPI_WIFI_ResetModule+0xc8>)
 8001364:	4611      	mov	r1, r2
 8001366:	f000 fc7d 	bl	8001c64 <HAL_GPIO_WritePin>
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 800136a:	f89d 3000 	ldrb.w	r3, [sp]
 800136e:	2b15      	cmp	r3, #21
 8001370:	d12e      	bne.n	80013d0 <SPI_WIFI_ResetModule+0xc0>
 8001372:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001376:	2b15      	cmp	r3, #21
 8001378:	d12a      	bne.n	80013d0 <SPI_WIFI_ResetModule+0xc0>
 800137a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800137e:	2b0d      	cmp	r3, #13
 8001380:	d126      	bne.n	80013d0 <SPI_WIFI_ResetModule+0xc0>
 8001382:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001386:	2b0a      	cmp	r3, #10
 8001388:	d122      	bne.n	80013d0 <SPI_WIFI_ResetModule+0xc0>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 800138a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800138e:	2b3e      	cmp	r3, #62	; 0x3e
 8001390:	d11e      	bne.n	80013d0 <SPI_WIFI_ResetModule+0xc0>
 8001392:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001396:	3820      	subs	r0, #32
 8001398:	bf18      	it	ne
 800139a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
}
 800139e:	b003      	add	sp, #12
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80013a2:	eb0d 0104 	add.w	r1, sp, r4
 80013a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013aa:	4638      	mov	r0, r7
 80013ac:	f001 fbe0 	bl	8002b70 <HAL_SPI_Receive>
 80013b0:	4606      	mov	r6, r0
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80013b2:	f000 facd 	bl	8001950 <HAL_GetTick>
 80013b6:	1b40      	subs	r0, r0, r5
    count += 2;
 80013b8:	3402      	adds	r4, #2
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80013ba:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 80013be:	b2e4      	uxtb	r4, r4
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 80013c0:	d201      	bcs.n	80013c6 <SPI_WIFI_ResetModule+0xb6>
 80013c2:	2e00      	cmp	r6, #0
 80013c4:	d0c5      	beq.n	8001352 <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS();
 80013c6:	2201      	movs	r2, #1
 80013c8:	4803      	ldr	r0, [pc, #12]	; (80013d8 <SPI_WIFI_ResetModule+0xc8>)
 80013ca:	4611      	mov	r1, r2
 80013cc:	f000 fc4a 	bl	8001c64 <HAL_GPIO_WritePin>
    return -1;
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d4:	e7e3      	b.n	800139e <SPI_WIFI_ResetModule+0x8e>
 80013d6:	bf00      	nop
 80013d8:	48001000 	.word	0x48001000
 80013dc:	200002a4 	.word	0x200002a4

080013e0 <SPI_WIFI_Init>:
{
 80013e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 80013e2:	4605      	mov	r5, r0
 80013e4:	bb88      	cbnz	r0, 800144a <SPI_WIFI_Init+0x6a>
    hspi.Instance               = SPI3;
 80013e6:	4c1d      	ldr	r4, [pc, #116]	; (800145c <SPI_WIFI_Init+0x7c>)
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <SPI_WIFI_Init+0x80>)
 80013ea:	4620      	mov	r0, r4
 80013ec:	f840 3f08 	str.w	r3, [r0, #8]!
    SPI_WIFI_MspInit(&hspi);
 80013f0:	f7ff ff06 	bl	8001200 <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 80013f4:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 80013f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 80013fc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001400:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8001404:	e9c4 3505 	strd	r3, r5, [r4, #20]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001408:	f104 0008 	add.w	r0, r4, #8
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800140c:	2310      	movs	r3, #16
 800140e:	e9c4 2308 	strd	r2, r3, [r4, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001412:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 8001416:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800141a:	61e5      	str	r5, [r4, #28]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800141c:	f001 f947 	bl	80026ae <HAL_SPI_Init>
 8001420:	4602      	mov	r2, r0
 8001422:	b9b8      	cbnz	r0, 8001454 <SPI_WIFI_Init+0x74>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 8001424:	4601      	mov	r1, r0
 8001426:	9001      	str	r0, [sp, #4]
 8001428:	2007      	movs	r0, #7
 800142a:	f000 fabd 	bl	80019a8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800142e:	2007      	movs	r0, #7
 8001430:	f000 faec 	bl	8001a0c <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 8001434:	9a01      	ldr	r2, [sp, #4]
 8001436:	2033      	movs	r0, #51	; 0x33
 8001438:	4611      	mov	r1, r2
 800143a:	f000 fab5 	bl	80019a8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800143e:	2033      	movs	r0, #51	; 0x33
 8001440:	f000 fae4 	bl	8001a0c <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 8001444:	200a      	movs	r0, #10
 8001446:	f7ff fe95 	bl	8001174 <SPI_WIFI_DelayUs>
}
 800144a:	b003      	add	sp, #12
 800144c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  rc = SPI_WIFI_ResetModule();
 8001450:	f7ff bf5e 	b.w	8001310 <SPI_WIFI_ResetModule>
}
 8001454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001458:	b003      	add	sp, #12
 800145a:	bd30      	pop	{r4, r5, pc}
 800145c:	2000029c 	.word	0x2000029c
 8001460:	40003c00 	.word	0x40003c00

08001464 <SPI_WIFI_DeInit>:
{
 8001464:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 8001466:	4802      	ldr	r0, [pc, #8]	; (8001470 <SPI_WIFI_DeInit+0xc>)
 8001468:	f001 f9a6 	bl	80027b8 <HAL_SPI_DeInit>
}
 800146c:	2000      	movs	r0, #0
 800146e:	bd08      	pop	{r3, pc}
 8001470:	200002a4 	.word	0x200002a4

08001474 <SPI_WIFI_ReceiveData>:
{
 8001474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001478:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS();
 800147a:	2201      	movs	r2, #1
{
 800147c:	4604      	mov	r4, r0
 800147e:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS();
 8001480:	4836      	ldr	r0, [pc, #216]	; (800155c <SPI_WIFI_ReceiveData+0xe8>)
  while (cmddata_rdy_rising_event == 1)
 8001482:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8001560 <SPI_WIFI_ReceiveData+0xec>
  WIFI_DISABLE_NSS();
 8001486:	4611      	mov	r1, r2
 8001488:	f000 fbec 	bl	8001c64 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 800148c:	2003      	movs	r0, #3
 800148e:	f7ff fe71 	bl	8001174 <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 8001492:	f000 fa5d 	bl	8001950 <HAL_GetTick>
 8001496:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event == 1)
 8001498:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800149c:	2b01      	cmp	r3, #1
 800149e:	d01a      	beq.n	80014d6 <SPI_WIFI_ReceiveData+0x62>
  WIFI_ENABLE_NSS();
 80014a0:	482e      	ldr	r0, [pc, #184]	; (800155c <SPI_WIFI_ReceiveData+0xe8>)
  while (WIFI_IS_CMDDATA_READY())
 80014a2:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800155c <SPI_WIFI_ReceiveData+0xe8>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80014a6:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001564 <SPI_WIFI_ReceiveData+0xf0>
  WIFI_ENABLE_NSS();
 80014aa:	2200      	movs	r2, #0
 80014ac:	2101      	movs	r1, #1
 80014ae:	f000 fbd9 	bl	8001c64 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80014b2:	200f      	movs	r0, #15
 80014b4:	f7ff fe5e 	bl	8001174 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80014b8:	3402      	adds	r4, #2
 80014ba:	2500      	movs	r5, #0
 80014bc:	2102      	movs	r1, #2
 80014be:	4658      	mov	r0, fp
 80014c0:	f000 fbca 	bl	8001c58 <HAL_GPIO_ReadPin>
 80014c4:	2801      	cmp	r0, #1
 80014c6:	b22e      	sxth	r6, r5
 80014c8:	d00d      	beq.n	80014e6 <SPI_WIFI_ReceiveData+0x72>
  WIFI_DISABLE_NSS();
 80014ca:	2201      	movs	r2, #1
 80014cc:	4823      	ldr	r0, [pc, #140]	; (800155c <SPI_WIFI_ReceiveData+0xe8>)
 80014ce:	4611      	mov	r1, r2
 80014d0:	f000 fbc8 	bl	8001c64 <HAL_GPIO_WritePin>
  return length;
 80014d4:	e01a      	b.n	800150c <SPI_WIFI_ReceiveData+0x98>
    if((HAL_GetTick() - tickstart ) > timeout)
 80014d6:	f000 fa3b 	bl	8001950 <HAL_GetTick>
 80014da:	1b40      	subs	r0, r0, r5
 80014dc:	4580      	cmp	r8, r0
 80014de:	d2db      	bcs.n	8001498 <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 80014e0:	f06f 0602 	mvn.w	r6, #2
 80014e4:	e012      	b.n	800150c <SPI_WIFI_ReceiveData+0x98>
    if ((length < len) || (!len))
 80014e6:	42af      	cmp	r7, r5
 80014e8:	dc01      	bgt.n	80014ee <SPI_WIFI_ReceiveData+0x7a>
 80014ea:	2f00      	cmp	r7, #0
 80014ec:	d1ed      	bne.n	80014ca <SPI_WIFI_ReceiveData+0x56>
      spi_rx_event = 1;
 80014ee:	2201      	movs	r2, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80014f0:	a901      	add	r1, sp, #4
 80014f2:	4650      	mov	r0, sl
      spi_rx_event = 1;
 80014f4:	f8c9 2070 	str.w	r2, [r9, #112]	; 0x70
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80014f8:	f001 fd38 	bl	8002f6c <HAL_SPI_Receive_IT>
 80014fc:	2201      	movs	r2, #1
 80014fe:	b148      	cbz	r0, 8001514 <SPI_WIFI_ReceiveData+0xa0>
        WIFI_DISABLE_NSS();
 8001500:	4816      	ldr	r0, [pc, #88]	; (800155c <SPI_WIFI_ReceiveData+0xe8>)
 8001502:	4611      	mov	r1, r2
 8001504:	f000 fbae 	bl	8001c64 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 8001508:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
}
 800150c:	4630      	mov	r0, r6
 800150e:	b003      	add	sp, #12
 8001510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 8001514:	f000 fa1c 	bl	8001950 <HAL_GetTick>
 8001518:	4606      	mov	r6, r0
  while (spi_rx_event == 1)
 800151a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800151e:	2b01      	cmp	r3, #1
 8001520:	d104      	bne.n	800152c <SPI_WIFI_ReceiveData+0xb8>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001522:	f000 fa15 	bl	8001950 <HAL_GetTick>
 8001526:	1b80      	subs	r0, r0, r6
 8001528:	4580      	cmp	r8, r0
 800152a:	d2f6      	bcs.n	800151a <SPI_WIFI_ReceiveData+0xa6>
      pData[0] = tmp[0];
 800152c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001530:	f804 3c02 	strb.w	r3, [r4, #-2]
      if (length >= ES_WIFI_DATA_SIZE) {
 8001534:	3502      	adds	r5, #2
      pData[1] = tmp[1];
 8001536:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800153a:	f804 3c01 	strb.w	r3, [r4, #-1]
      if (length >= ES_WIFI_DATA_SIZE) {
 800153e:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8001542:	f104 0402 	add.w	r4, r4, #2
 8001546:	d1b9      	bne.n	80014bc <SPI_WIFI_ReceiveData+0x48>
        WIFI_DISABLE_NSS();
 8001548:	2201      	movs	r2, #1
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <SPI_WIFI_ReceiveData+0xe8>)
 800154c:	4611      	mov	r1, r2
 800154e:	f000 fb89 	bl	8001c64 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001552:	f06f 0603 	mvn.w	r6, #3
        SPI_WIFI_ResetModule();
 8001556:	f7ff fedb 	bl	8001310 <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800155a:	e7d7      	b.n	800150c <SPI_WIFI_ReceiveData+0x98>
 800155c:	48001000 	.word	0x48001000
 8001560:	2000029c 	.word	0x2000029c
 8001564:	200002a4 	.word	0x200002a4

08001568 <SPI_WIFI_SendData>:
{
 8001568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800156c:	4605      	mov	r5, r0
 800156e:	460c      	mov	r4, r1
 8001570:	4617      	mov	r7, r2
  int tickstart = HAL_GetTick();
 8001572:	f000 f9ed 	bl	8001950 <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8001576:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001610 <SPI_WIFI_SendData+0xa8>
  int tickstart = HAL_GetTick();
 800157a:	4680      	mov	r8, r0
  while (WIFI_IS_CMDDATA_READY() == 0)
 800157c:	2102      	movs	r1, #2
 800157e:	4648      	mov	r0, r9
 8001580:	f000 fb6a 	bl	8001c58 <HAL_GPIO_ReadPin>
 8001584:	2801      	cmp	r0, #1
 8001586:	4606      	mov	r6, r0
 8001588:	d11c      	bne.n	80015c4 <SPI_WIFI_SendData+0x5c>
  cmddata_rdy_rising_event = 1;
 800158a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001618 <SPI_WIFI_SendData+0xb0>
  WIFI_ENABLE_NSS();
 800158e:	4601      	mov	r1, r0
  cmddata_rdy_rising_event = 1;
 8001590:	f8c8 006c 	str.w	r0, [r8, #108]	; 0x6c
  WIFI_ENABLE_NSS();
 8001594:	2200      	movs	r2, #0
 8001596:	481e      	ldr	r0, [pc, #120]	; (8001610 <SPI_WIFI_SendData+0xa8>)
 8001598:	f000 fb64 	bl	8001c64 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800159c:	200f      	movs	r0, #15
 800159e:	f7ff fde9 	bl	8001174 <SPI_WIFI_DelayUs>
  if (len > 1)
 80015a2:	2c01      	cmp	r4, #1
 80015a4:	d91a      	bls.n	80015dc <SPI_WIFI_SendData+0x74>
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 80015a6:	0862      	lsrs	r2, r4, #1
 80015a8:	4629      	mov	r1, r5
 80015aa:	f108 0008 	add.w	r0, r8, #8
    spi_tx_event = 1;
 80015ae:	f8c8 6004 	str.w	r6, [r8, #4]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 80015b2:	f001 fc01 	bl	8002db8 <HAL_SPI_Transmit_IT>
 80015b6:	b170      	cbz	r0, 80015d6 <SPI_WIFI_SendData+0x6e>
      WIFI_DISABLE_NSS();
 80015b8:	2201      	movs	r2, #1
 80015ba:	4815      	ldr	r0, [pc, #84]	; (8001610 <SPI_WIFI_SendData+0xa8>)
 80015bc:	4611      	mov	r1, r2
 80015be:	f000 fb51 	bl	8001c64 <HAL_GPIO_WritePin>
      return ES_WIFI_ERROR_SPI_FAILED;
 80015c2:	e005      	b.n	80015d0 <SPI_WIFI_SendData+0x68>
    if((HAL_GetTick() - tickstart ) > timeout)
 80015c4:	f000 f9c4 	bl	8001950 <HAL_GetTick>
 80015c8:	eba0 0008 	sub.w	r0, r0, r8
 80015cc:	4287      	cmp	r7, r0
 80015ce:	d2d5      	bcs.n	800157c <SPI_WIFI_SendData+0x14>
    return ES_WIFI_ERROR_SPI_FAILED;
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d4:	e019      	b.n	800160a <SPI_WIFI_SendData+0xa2>
    wait_spi_tx_event(timeout);
 80015d6:	4638      	mov	r0, r7
 80015d8:	f7ff fe00 	bl	80011dc <wait_spi_tx_event.isra.0>
  if (len & 1)
 80015dc:	07e3      	lsls	r3, r4, #31
 80015de:	d513      	bpl.n	8001608 <SPI_WIFI_SendData+0xa0>
    Padding[0] = pdata[len - 1];
 80015e0:	4425      	add	r5, r4
    spi_tx_event=1;
 80015e2:	2201      	movs	r2, #1
    Padding[0] = pdata[len - 1];
 80015e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80015e8:	f88d 3004 	strb.w	r3, [sp, #4]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 80015ee:	f8c8 2004 	str.w	r2, [r8, #4]
    Padding[1] = '\n';
 80015f2:	230a      	movs	r3, #10
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80015f4:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 80015f6:	f88d 3005 	strb.w	r3, [sp, #5]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80015fa:	f001 fbdd 	bl	8002db8 <HAL_SPI_Transmit_IT>
 80015fe:	2800      	cmp	r0, #0
 8001600:	d1da      	bne.n	80015b8 <SPI_WIFI_SendData+0x50>
    wait_spi_tx_event(timeout);
 8001602:	4638      	mov	r0, r7
 8001604:	f7ff fdea 	bl	80011dc <wait_spi_tx_event.isra.0>
  return len;
 8001608:	b220      	sxth	r0, r4
}
 800160a:	b003      	add	sp, #12
 800160c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001610:	48001000 	.word	0x48001000
 8001614:	200002a4 	.word	0x200002a4
 8001618:	2000029c 	.word	0x2000029c

0800161c <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 800161c:	f000 b99e 	b.w	800195c <HAL_Delay>

08001620 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <HAL_SPI_RxCpltCallback+0xc>)
 8001622:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001624:	b10a      	cbz	r2, 800162a <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8001626:	2200      	movs	r2, #0
 8001628:	671a      	str	r2, [r3, #112]	; 0x70
  }
}
 800162a:	4770      	bx	lr
 800162c:	2000029c 	.word	0x2000029c

08001630 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <HAL_SPI_TxCpltCallback+0xc>)
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	b10a      	cbz	r2, 800163a <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  }
}
 800163a:	4770      	bx	lr
 800163c:	2000029c 	.word	0x2000029c

08001640 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event == 1)
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <SPI_WIFI_ISR+0x10>)
 8001642:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001644:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8001646:	bf04      	itt	eq
 8001648:	2200      	moveq	r2, #0
 800164a:	66da      	streq	r2, [r3, #108]	; 0x6c
   }
}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	2000029c 	.word	0x2000029c

08001654 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8001654:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <WIFI_Init+0x30>)
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <WIFI_Init+0x34>)
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <WIFI_Init+0x38>)
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <WIFI_Init+0x3c>)
 8001662:	490c      	ldr	r1, [pc, #48]	; (8001694 <WIFI_Init+0x40>)
 8001664:	480c      	ldr	r0, [pc, #48]	; (8001698 <WIFI_Init+0x44>)
 8001666:	f7ff faeb 	bl	8000c40 <ES_WIFI_RegisterBusIO>
 800166a:	b940      	cbnz	r0, 800167e <WIFI_Init+0x2a>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800166c:	480a      	ldr	r0, [pc, #40]	; (8001698 <WIFI_Init+0x44>)
 800166e:	f7ff fa69 	bl	8000b44 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001672:	3800      	subs	r0, #0
 8001674:	bf18      	it	ne
 8001676:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8001678:	b003      	add	sp, #12
 800167a:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800167e:	2001      	movs	r0, #1
 8001680:	e7fa      	b.n	8001678 <WIFI_Init+0x24>
 8001682:	bf00      	nop
 8001684:	08001475 	.word	0x08001475
 8001688:	08001569 	.word	0x08001569
 800168c:	08001465 	.word	0x08001465
 8001690:	0800161d 	.word	0x0800161d
 8001694:	080013e1 	.word	0x080013e1
 8001698:	20000310 	.word	0x20000310

0800169c <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 800169c:	b508      	push	{r3, lr}
 800169e:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80016a0:	460a      	mov	r2, r1
 80016a2:	4601      	mov	r1, r0
 80016a4:	4806      	ldr	r0, [pc, #24]	; (80016c0 <WIFI_Connect+0x24>)
 80016a6:	f7ff fadd 	bl	8000c64 <ES_WIFI_Connect>
 80016aa:	b930      	cbnz	r0, 80016ba <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <WIFI_Connect+0x24>)
 80016ae:	f7ff fb35 	bl	8000d1c <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80016b2:	3800      	subs	r0, #0
 80016b4:	bf18      	it	ne
 80016b6:	2001      	movne	r0, #1
    {
       ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 80016b8:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80016ba:	2001      	movs	r0, #1
 80016bc:	e7fc      	b.n	80016b8 <WIFI_Connect+0x1c>
 80016be:	bf00      	nop
 80016c0:	20000310 	.word	0x20000310

080016c4 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 80016c4:	b508      	push	{r3, lr}
 80016c6:	460a      	mov	r2, r1
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if ((mac != NULL) && (0 < MacLength))
 80016c8:	b140      	cbz	r0, 80016dc <WIFI_GetMAC_Address+0x18>
 80016ca:	b139      	cbz	r1, 80016dc <WIFI_GetMAC_Address+0x18>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 80016cc:	4601      	mov	r1, r0
 80016ce:	4804      	ldr	r0, [pc, #16]	; (80016e0 <WIFI_GetMAC_Address+0x1c>)
 80016d0:	f7ff fba4 	bl	8000e1c <ES_WIFI_GetMACAddress>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80016d4:	3800      	subs	r0, #0
 80016d6:	bf18      	it	ne
 80016d8:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 80016da:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80016dc:	2001      	movs	r0, #1
 80016de:	e7fc      	b.n	80016da <WIFI_GetMAC_Address+0x16>
 80016e0:	20000310 	.word	0x20000310

080016e4 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 80016e4:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 80016e6:	4604      	mov	r4, r0
 80016e8:	b908      	cbnz	r0, 80016ee <WIFI_GetIP_Address+0xa>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80016ea:	2001      	movs	r0, #1
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 80016ec:	bd38      	pop	{r3, r4, r5, pc}
  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 80016ee:	2903      	cmp	r1, #3
 80016f0:	d9fb      	bls.n	80016ea <WIFI_GetIP_Address+0x6>
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 80016f2:	4d05      	ldr	r5, [pc, #20]	; (8001708 <WIFI_GetIP_Address+0x24>)
 80016f4:	4628      	mov	r0, r5
 80016f6:	f7ff faf5 	bl	8000ce4 <ES_WIFI_IsConnected>
 80016fa:	2801      	cmp	r0, #1
 80016fc:	d1f5      	bne.n	80016ea <WIFI_GetIP_Address+0x6>
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80016fe:	f8d5 30d5 	ldr.w	r3, [r5, #213]	; 0xd5
 8001702:	6023      	str	r3, [r4, #0]
      ret = WIFI_STATUS_OK;
 8001704:	2000      	movs	r0, #0
 8001706:	e7f1      	b.n	80016ec <WIFI_GetIP_Address+0x8>
 8001708:	20000310 	.word	0x20000310

0800170c <WIFI_OpenClientConnection>:
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name,
                                        const uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800170c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
  conn.RemotePort = port;
 800170e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8001712:	f8ad 2006 	strh.w	r2, [sp, #6]
  conn.LocalPort = local_port;
 8001716:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800171a:	f8ad 2008 	strh.w	r2, [sp, #8]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800171e:	3900      	subs	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	f88d 200a 	strb.w	r2, [sp, #10]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001726:	bf18      	it	ne
 8001728:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 800172a:	785a      	ldrb	r2, [r3, #1]
  conn.Number = (uint8_t)socket;
 800172c:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001730:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.RemoteIP[1] = ipaddr[1];
 8001734:	f88d 200b 	strb.w	r2, [sp, #11]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];

  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001738:	a901      	add	r1, sp, #4
  conn.RemoteIP[2] = ipaddr[2];
 800173a:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800173c:	4806      	ldr	r0, [pc, #24]	; (8001758 <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 800173e:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 8001740:	f88d 200c 	strb.w	r2, [sp, #12]
  conn.RemoteIP[3] = ipaddr[3];
 8001744:	f88d 300d 	strb.w	r3, [sp, #13]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001748:	f7ff fb88 	bl	8000e5c <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 800174c:	3800      	subs	r0, #0
 800174e:	bf18      	it	ne
 8001750:	2001      	movne	r0, #1
 8001752:	b007      	add	sp, #28
 8001754:	f85d fb04 	ldr.w	pc, [sp], #4
 8001758:	20000310 	.word	0x20000310

0800175c <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 800175c:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800175e:	9c04      	ldr	r4, [sp, #16]
 8001760:	e9cd 3400 	strd	r3, r4, [sp]
 8001764:	4613      	mov	r3, r2
 8001766:	460a      	mov	r2, r1
 8001768:	b2c1      	uxtb	r1, r0
 800176a:	4804      	ldr	r0, [pc, #16]	; (800177c <WIFI_SendData+0x20>)
 800176c:	f7ff fbf6 	bl	8000f5c <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 8001770:	3800      	subs	r0, #0
 8001772:	bf18      	it	ne
 8001774:	2001      	movne	r0, #1
 8001776:	b002      	add	sp, #8
 8001778:	bd10      	pop	{r4, pc}
 800177a:	bf00      	nop
 800177c:	20000310 	.word	0x20000310

08001780 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 8001780:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8001782:	9c04      	ldr	r4, [sp, #16]
 8001784:	e9cd 3400 	strd	r3, r4, [sp]
 8001788:	4613      	mov	r3, r2
 800178a:	460a      	mov	r2, r1
 800178c:	b2c1      	uxtb	r1, r0
 800178e:	4804      	ldr	r0, [pc, #16]	; (80017a0 <WIFI_ReceiveData+0x20>)
 8001790:	f7ff fc66 	bl	8001060 <ES_WIFI_ReceiveData>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001794:	3800      	subs	r0, #0
 8001796:	bf18      	it	ne
 8001798:	2001      	movne	r0, #1
 800179a:	b002      	add	sp, #8
 800179c:	bd10      	pop	{r4, pc}
 800179e:	bf00      	nop
 80017a0:	20000310 	.word	0x20000310

080017a4 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80017a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 80017a6:	b948      	cbnz	r0, 80017bc <BSP_LED_Init+0x18>
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <BSP_LED_Init+0x3c>)
 80017aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ac:	f042 0202 	orr.w	r2, r2, #2
 80017b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80017b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	9b00      	ldr	r3, [sp, #0]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80017bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017c0:	2301      	movs	r3, #1
 80017c2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c6:	2100      	movs	r1, #0
 80017c8:	2302      	movs	r3, #2
 80017ca:	e9cd 1303 	strd	r1, r3, [sp, #12]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <BSP_LED_Init+0x40>)
 80017d0:	a901      	add	r1, sp, #4
 80017d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80017d6:	f000 f961 	bl	8001a9c <HAL_GPIO_Init>
}
 80017da:	b007      	add	sp, #28
 80017dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80017e0:	40021000 	.word	0x40021000
 80017e4:	20000004 	.word	0x20000004

080017e8 <BSP_LED_On>:
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <BSP_LED_On+0x10>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80017f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017f4:	f000 ba36 	b.w	8001c64 <HAL_GPIO_WritePin>
 80017f8:	20000004 	.word	0x20000004

080017fc <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	460d      	mov	r5, r1
 8001800:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8001802:	b9d8      	cbnz	r0, 800183c <BSP_COM_Init+0x40>
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <BSP_COM_Init+0x80>)
 8001806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001808:	f042 0202 	orr.w	r2, r2, #2
 800180c:	64da      	str	r2, [r3, #76]	; 0x4c
 800180e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001810:	f002 0202 	and.w	r2, r2, #2
 8001814:	9200      	str	r2, [sp, #0]
 8001816:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8001818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800181a:	f042 0202 	orr.w	r2, r2, #2
 800181e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001820:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001822:	f002 0202 	and.w	r2, r2, #2
 8001826:	9201      	str	r2, [sp, #4]
 8001828:	9a01      	ldr	r2, [sp, #4]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 800182a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800182c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001830:	661a      	str	r2, [r3, #96]	; 0x60
 8001832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001838:	9302      	str	r3, [sp, #8]
 800183a:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin = COM_TX_PIN[COM];
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Alternate = COM_TX_AF[COM];
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800183c:	4c10      	ldr	r4, [pc, #64]	; (8001880 <BSP_COM_Init+0x84>)
 800183e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001842:	2602      	movs	r6, #2
 8001844:	2340      	movs	r3, #64	; 0x40
 8001846:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800184a:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800184c:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8001850:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001852:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001854:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8001856:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001858:	f000 f920 	bl	8001a9c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800185c:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800185e:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8001860:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001862:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001864:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001868:	f000 f918 	bl	8001a9c <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 800186c:	6923      	ldr	r3, [r4, #16]
 800186e:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 8001870:	4628      	mov	r0, r5
 8001872:	f002 f93a 	bl	8003aea <HAL_UART_Init>
}
 8001876:	b009      	add	sp, #36	; 0x24
 8001878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	20000004 	.word	0x20000004

08001884 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001884:	490f      	ldr	r1, [pc, #60]	; (80018c4 <SystemInit+0x40>)
 8001886:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800188a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800188e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <SystemInit+0x44>)
 8001894:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001896:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001898:	f042 0201 	orr.w	r2, r2, #1
 800189c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800189e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80018a6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80018aa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80018ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018b0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018b8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018ba:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018c0:	608b      	str	r3, [r1, #8]
#endif
}
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80018cc:	4770      	bx	lr
	...

080018d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018d2:	4e0f      	ldr	r6, [pc, #60]	; (8001910 <HAL_InitTick+0x40>)
{
 80018d4:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80018d6:	7830      	ldrb	r0, [r6, #0]
 80018d8:	b908      	cbnz	r0, 80018de <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80018da:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80018dc:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018de:	4a0d      	ldr	r2, [pc, #52]	; (8001914 <HAL_InitTick+0x44>)
 80018e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80018e8:	6810      	ldr	r0, [r2, #0]
 80018ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80018ee:	f000 f89b 	bl	8001a28 <HAL_SYSTICK_Config>
 80018f2:	4604      	mov	r4, r0
 80018f4:	2800      	cmp	r0, #0
 80018f6:	d1f0      	bne.n	80018da <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f8:	2d0f      	cmp	r5, #15
 80018fa:	d8ee      	bhi.n	80018da <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fc:	4602      	mov	r2, r0
 80018fe:	4629      	mov	r1, r5
 8001900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001904:	f000 f850 	bl	80019a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001908:	6075      	str	r5, [r6, #4]
 800190a:	4620      	mov	r0, r4
 800190c:	e7e6      	b.n	80018dc <HAL_InitTick+0xc>
 800190e:	bf00      	nop
 8001910:	2000001c 	.word	0x2000001c
 8001914:	20000018 	.word	0x20000018

08001918 <HAL_Init>:
{
 8001918:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191a:	2003      	movs	r0, #3
 800191c:	f000 f832 	bl	8001984 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001920:	200f      	movs	r0, #15
 8001922:	f7ff ffd5 	bl	80018d0 <HAL_InitTick>
 8001926:	4604      	mov	r4, r0
 8001928:	b918      	cbnz	r0, 8001932 <HAL_Init+0x1a>
    HAL_MspInit();
 800192a:	f7ff ffcf 	bl	80018cc <HAL_MspInit>
}
 800192e:	4620      	mov	r0, r4
 8001930:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001932:	2401      	movs	r4, #1
 8001934:	e7fb      	b.n	800192e <HAL_Init+0x16>
	...

08001938 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001938:	4a03      	ldr	r2, [pc, #12]	; (8001948 <HAL_IncTick+0x10>)
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <HAL_IncTick+0x14>)
 800193c:	6811      	ldr	r1, [r2, #0]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	440b      	add	r3, r1
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000ce8 	.word	0x20000ce8
 800194c:	2000001c 	.word	0x2000001c

08001950 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001950:	4b01      	ldr	r3, [pc, #4]	; (8001958 <HAL_GetTick+0x8>)
 8001952:	6818      	ldr	r0, [r3, #0]
}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000ce8 	.word	0x20000ce8

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800195c:	b538      	push	{r3, r4, r5, lr}
 800195e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff fff6 	bl	8001950 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001964:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001966:	bf1c      	itt	ne
 8001968:	4b05      	ldrne	r3, [pc, #20]	; (8001980 <HAL_Delay+0x24>)
 800196a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800196c:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 800196e:	bf18      	it	ne
 8001970:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001972:	f7ff ffed 	bl	8001950 <HAL_GetTick>
 8001976:	1b43      	subs	r3, r0, r5
 8001978:	42a3      	cmp	r3, r4
 800197a:	d3fa      	bcc.n	8001972 <HAL_Delay+0x16>
  {
  }
}
 800197c:	bd38      	pop	{r3, r4, r5, pc}
 800197e:	bf00      	nop
 8001980:	2000001c 	.word	0x2000001c

08001984 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4907      	ldr	r1, [pc, #28]	; (80019a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001986:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001988:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800198c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001994:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80019a0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019aa:	b530      	push	{r4, r5, lr}
 80019ac:	68dc      	ldr	r4, [r3, #12]
 80019ae:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b8:	2d04      	cmp	r5, #4
 80019ba:	bf28      	it	cs
 80019bc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c4:	bf8c      	ite	hi
 80019c6:	3c03      	subhi	r4, #3
 80019c8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ca:	fa03 f505 	lsl.w	r5, r3, r5
 80019ce:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d2:	40a3      	lsls	r3, r4
 80019d4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80019da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	bfac      	ite	ge
 80019e2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	4a08      	ldrlt	r2, [pc, #32]	; (8001a08 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	bfb8      	it	lt
 80019ee:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	bfaa      	itet	ge
 80019f6:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fa:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fc:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a00:	bd30      	pop	{r4, r5, pc}
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00
 8001a08:	e000ed14 	.word	0xe000ed14

08001a0c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	2800      	cmp	r0, #0
 8001a0e:	db08      	blt.n	8001a22 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a10:	2301      	movs	r3, #1
 8001a12:	0942      	lsrs	r2, r0, #5
 8001a14:	f000 001f 	and.w	r0, r0, #31
 8001a18:	fa03 f000 	lsl.w	r0, r3, r0
 8001a1c:	4b01      	ldr	r3, [pc, #4]	; (8001a24 <HAL_NVIC_EnableIRQ+0x18>)
 8001a1e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	3801      	subs	r0, #1
 8001a2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a2e:	d20b      	bcs.n	8001a48 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	21f0      	movs	r1, #240	; 0xf0
 8001a3a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a40:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a42:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a44:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a46:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a48:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a50:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a52:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001a56:	2a02      	cmp	r2, #2
 8001a58:	d003      	beq.n	8001a62 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001a5e:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001a60:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a62:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 8001a64:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a66:	6811      	ldr	r1, [r2, #0]
 8001a68:	f021 010e 	bic.w	r1, r1, #14
 8001a6c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001a6e:	6811      	ldr	r1, [r2, #0]
 8001a70:	f021 0101 	bic.w	r1, r1, #1
 8001a74:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a76:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	f002 021c 	and.w	r2, r2, #28
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8001a86:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001a88:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001a8c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001a90:	b113      	cbz	r3, 8001a98 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 8001a92:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001a94:	4620      	mov	r0, r4
 8001a96:	e7e3      	b.n	8001a60 <HAL_DMA_Abort_IT+0x10>
 8001a98:	4618      	mov	r0, r3
 8001a9a:	e7e1      	b.n	8001a60 <HAL_DMA_Abort_IT+0x10>

08001a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa0:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8001c54 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aa4:	4c69      	ldr	r4, [pc, #420]	; (8001c4c <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8001aa6:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa8:	680a      	ldr	r2, [r1, #0]
 8001aaa:	fa32 f503 	lsrs.w	r5, r2, r3
 8001aae:	d102      	bne.n	8001ab6 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001ab0:	b003      	add	sp, #12
 8001ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab6:	f04f 0e01 	mov.w	lr, #1
 8001aba:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8001abe:	ea1e 0202 	ands.w	r2, lr, r2
 8001ac2:	f000 8090 	beq.w	8001be6 <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ac6:	684d      	ldr	r5, [r1, #4]
 8001ac8:	f005 0603 	and.w	r6, r5, #3
 8001acc:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ad0:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad4:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ad6:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ada:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001adc:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae0:	f200 8083 	bhi.w	8001bea <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8001ae4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ae6:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aea:	68cf      	ldr	r7, [r1, #12]
 8001aec:	fa07 f708 	lsl.w	r7, r7, r8
 8001af0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001af4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001af6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001af8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afc:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001b00:	409f      	lsls	r7, r3
 8001b02:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001b06:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001b08:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b0a:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0e:	688f      	ldr	r7, [r1, #8]
 8001b10:	fa07 f708 	lsl.w	r7, r7, r8
 8001b14:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 8001b1a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1c:	d071      	beq.n	8001c02 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8001b1e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b20:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b24:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b28:	4337      	orrs	r7, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b2a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001b2e:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b30:	d059      	beq.n	8001be6 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001b36:	f046 0601 	orr.w	r6, r6, #1
 8001b3a:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001b3e:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001b42:	f023 0703 	bic.w	r7, r3, #3
 8001b46:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001b4a:	f006 0601 	and.w	r6, r6, #1
 8001b4e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001b52:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b54:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b58:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b5a:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b5c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001b60:	f04f 0c0f 	mov.w	ip, #15
 8001b64:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b68:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b6c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b70:	d05f      	beq.n	8001c32 <HAL_GPIO_Init+0x196>
 8001b72:	4e37      	ldr	r6, [pc, #220]	; (8001c50 <HAL_GPIO_Init+0x1b4>)
 8001b74:	42b0      	cmp	r0, r6
 8001b76:	d05e      	beq.n	8001c36 <HAL_GPIO_Init+0x19a>
 8001b78:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b7c:	42b0      	cmp	r0, r6
 8001b7e:	d05c      	beq.n	8001c3a <HAL_GPIO_Init+0x19e>
 8001b80:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b84:	42b0      	cmp	r0, r6
 8001b86:	d05a      	beq.n	8001c3e <HAL_GPIO_Init+0x1a2>
 8001b88:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b8c:	42b0      	cmp	r0, r6
 8001b8e:	d058      	beq.n	8001c42 <HAL_GPIO_Init+0x1a6>
 8001b90:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b94:	42b0      	cmp	r0, r6
 8001b96:	d056      	beq.n	8001c46 <HAL_GPIO_Init+0x1aa>
 8001b98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b9c:	42b0      	cmp	r0, r6
 8001b9e:	bf0c      	ite	eq
 8001ba0:	2606      	moveq	r6, #6
 8001ba2:	2607      	movne	r6, #7
 8001ba4:	fa06 f60e 	lsl.w	r6, r6, lr
 8001ba8:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bac:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8001bae:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001bb0:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bb2:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001bb6:	bf0c      	ite	eq
 8001bb8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001bba:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001bbc:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8001bbe:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bc0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001bc4:	bf0c      	ite	eq
 8001bc6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001bc8:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8001bca:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8001bcc:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bce:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001bd2:	bf0c      	ite	eq
 8001bd4:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001bd6:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001bd8:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8001bda:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bdc:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8001bde:	bf54      	ite	pl
 8001be0:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001be2:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8001be4:	6026      	str	r6, [r4, #0]
    position++;
 8001be6:	3301      	adds	r3, #1
 8001be8:	e75e      	b.n	8001aa8 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bea:	2e03      	cmp	r6, #3
 8001bec:	d18c      	bne.n	8001b08 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8001bee:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001bf0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001bf4:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8001bf8:	409f      	lsls	r7, r3
 8001bfa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8001bfe:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c00:	e78d      	b.n	8001b1e <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8001c02:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001c06:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c0a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001c0e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c12:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001c16:	f04f 0e0f 	mov.w	lr, #15
 8001c1a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001c1e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c22:	690f      	ldr	r7, [r1, #16]
 8001c24:	fa07 f70b 	lsl.w	r7, r7, fp
 8001c28:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001c2c:	f8ca 7020 	str.w	r7, [sl, #32]
 8001c30:	e775      	b.n	8001b1e <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c32:	2600      	movs	r6, #0
 8001c34:	e7b6      	b.n	8001ba4 <HAL_GPIO_Init+0x108>
 8001c36:	2601      	movs	r6, #1
 8001c38:	e7b4      	b.n	8001ba4 <HAL_GPIO_Init+0x108>
 8001c3a:	2602      	movs	r6, #2
 8001c3c:	e7b2      	b.n	8001ba4 <HAL_GPIO_Init+0x108>
 8001c3e:	2603      	movs	r6, #3
 8001c40:	e7b0      	b.n	8001ba4 <HAL_GPIO_Init+0x108>
 8001c42:	2604      	movs	r6, #4
 8001c44:	e7ae      	b.n	8001ba4 <HAL_GPIO_Init+0x108>
 8001c46:	2605      	movs	r6, #5
 8001c48:	e7ac      	b.n	8001ba4 <HAL_GPIO_Init+0x108>
 8001c4a:	bf00      	nop
 8001c4c:	40010400 	.word	0x40010400
 8001c50:	48000400 	.word	0x48000400
 8001c54:	40021000 	.word	0x40021000

08001c58 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c58:	6903      	ldr	r3, [r0, #16]
 8001c5a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001c5c:	bf14      	ite	ne
 8001c5e:	2001      	movne	r0, #1
 8001c60:	2000      	moveq	r0, #0
 8001c62:	4770      	bx	lr

08001c64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c64:	b10a      	cbz	r2, 8001c6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c66:	6181      	str	r1, [r0, #24]
 8001c68:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c6a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001c6c:	4770      	bx	lr
	...

08001c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001c72:	6951      	ldr	r1, [r2, #20]
 8001c74:	4201      	tst	r1, r0
{
 8001c76:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c78:	d002      	beq.n	8001c80 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c7a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c7c:	f7fe fde0 	bl	8000840 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c80:	bd08      	pop	{r3, pc}
 8001c82:	bf00      	nop
 8001c84:	40010400 	.word	0x40010400

08001c88 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c88:	4b02      	ldr	r3, [pc, #8]	; (8001c94 <HAL_PWREx_GetVoltageRange+0xc>)
 8001c8a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001c8c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40007000 	.word	0x40007000

08001c98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c9a:	4d1e      	ldr	r5, [pc, #120]	; (8001d14 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001c9c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c9e:	00da      	lsls	r2, r3, #3
{
 8001ca0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ca2:	d518      	bpl.n	8001cd6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ca4:	f7ff fff0 	bl	8001c88 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ca8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001cac:	d123      	bne.n	8001cf6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cae:	2c80      	cmp	r4, #128	; 0x80
 8001cb0:	d929      	bls.n	8001d06 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cb2:	2ca0      	cmp	r4, #160	; 0xa0
 8001cb4:	bf8c      	ite	hi
 8001cb6:	2002      	movhi	r0, #2
 8001cb8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cba:	4a17      	ldr	r2, [pc, #92]	; (8001d18 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001cbc:	6813      	ldr	r3, [r2, #0]
 8001cbe:	f023 0307 	bic.w	r3, r3, #7
 8001cc2:	4303      	orrs	r3, r0
 8001cc4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cc6:	6813      	ldr	r3, [r2, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001ccc:	1a18      	subs	r0, r3, r0
 8001cce:	bf18      	it	ne
 8001cd0:	2001      	movne	r0, #1
 8001cd2:	b003      	add	sp, #12
 8001cd4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cd6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	65ab      	str	r3, [r5, #88]	; 0x58
 8001cde:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001ce8:	f7ff ffce 	bl	8001c88 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cec:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	65ab      	str	r3, [r5, #88]	; 0x58
 8001cf4:	e7d8      	b.n	8001ca8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001cf6:	2c80      	cmp	r4, #128	; 0x80
 8001cf8:	d807      	bhi.n	8001d0a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001cfa:	d008      	beq.n	8001d0e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001cfc:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001d00:	4258      	negs	r0, r3
 8001d02:	4158      	adcs	r0, r3
 8001d04:	e7d9      	b.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d06:	2000      	movs	r0, #0
 8001d08:	e7d7      	b.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d0a:	2003      	movs	r0, #3
 8001d0c:	e7d5      	b.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d0e:	2002      	movs	r0, #2
 8001d10:	e7d3      	b.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40022000 	.word	0x40022000

08001d1c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1c:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001d1e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d20:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d22:	f012 020c 	ands.w	r2, r2, #12
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x18>
 8001d28:	2a0c      	cmp	r2, #12
 8001d2a:	d115      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d2c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d30:	2901      	cmp	r1, #1
 8001d32:	d118      	bne.n	8001d66 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d34:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001d36:	481d      	ldr	r0, [pc, #116]	; (8001dac <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d38:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d3a:	bf55      	itete	pl
 8001d3c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d40:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d42:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d46:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001d4a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4e:	b34a      	cbz	r2, 8001da4 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d50:	2a0c      	cmp	r2, #12
 8001d52:	d009      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x4c>
 8001d54:	2000      	movs	r0, #0
  return sysclockfreq;
 8001d56:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d58:	2a04      	cmp	r2, #4
 8001d5a:	d022      	beq.n	8001da2 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d5c:	2a08      	cmp	r2, #8
 8001d5e:	4814      	ldr	r0, [pc, #80]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d60:	bf18      	it	ne
 8001d62:	2000      	movne	r0, #0
 8001d64:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d66:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001d6e:	2a02      	cmp	r2, #2
 8001d70:	d015      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x82>
 8001d72:	490f      	ldr	r1, [pc, #60]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d74:	2a03      	cmp	r2, #3
 8001d76:	bf08      	it	eq
 8001d78:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d7a:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001d82:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d84:	68d8      	ldr	r0, [r3, #12]
 8001d86:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d8a:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d8e:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d90:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d92:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d94:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8001d98:	fbb2 f0f0 	udiv	r0, r2, r0
 8001d9c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001da0:	e7eb      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001da2:	4804      	ldr	r0, [pc, #16]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08005290 	.word	0x08005290
 8001db0:	007a1200 	.word	0x007a1200
 8001db4:	00f42400 	.word	0x00f42400

08001db8 <HAL_RCC_OscConfig>:
{
 8001db8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001dbc:	4605      	mov	r5, r0
 8001dbe:	b918      	cbnz	r0, 8001dc8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001dc0:	2001      	movs	r0, #1
}
 8001dc2:	b003      	add	sp, #12
 8001dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc8:	4c92      	ldr	r4, [pc, #584]	; (8002014 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dca:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dcc:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dce:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dd0:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd2:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd6:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dda:	d53d      	bpl.n	8001e58 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ddc:	b11e      	cbz	r6, 8001de6 <HAL_RCC_OscConfig+0x2e>
 8001dde:	2e0c      	cmp	r6, #12
 8001de0:	d166      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001de2:	2f01      	cmp	r7, #1
 8001de4:	d164      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	0798      	lsls	r0, r3, #30
 8001dea:	d502      	bpl.n	8001df2 <HAL_RCC_OscConfig+0x3a>
 8001dec:	69ab      	ldr	r3, [r5, #24]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0e6      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	6a28      	ldr	r0, [r5, #32]
 8001df6:	0719      	lsls	r1, r3, #28
 8001df8:	bf56      	itet	pl
 8001dfa:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001dfe:	6823      	ldrmi	r3, [r4, #0]
 8001e00:	091b      	lsrpl	r3, r3, #4
 8001e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e06:	4298      	cmp	r0, r3
 8001e08:	d93b      	bls.n	8001e82 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e0a:	f7ff ff45 	bl	8001c98 <RCC_SetFlashLatencyFromMSIRange>
 8001e0e:	2800      	cmp	r0, #0
 8001e10:	d1d6      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e12:	6823      	ldr	r3, [r4, #0]
 8001e14:	f043 0308 	orr.w	r3, r3, #8
 8001e18:	6023      	str	r3, [r4, #0]
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	6a2a      	ldr	r2, [r5, #32]
 8001e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e22:	4313      	orrs	r3, r2
 8001e24:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e26:	6863      	ldr	r3, [r4, #4]
 8001e28:	69ea      	ldr	r2, [r5, #28]
 8001e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e32:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e34:	f7ff ff72 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001e38:	68a3      	ldr	r3, [r4, #8]
 8001e3a:	4a77      	ldr	r2, [pc, #476]	; (8002018 <HAL_RCC_OscConfig+0x260>)
 8001e3c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e40:	5cd3      	ldrb	r3, [r2, r3]
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	40d8      	lsrs	r0, r3
 8001e48:	4b74      	ldr	r3, [pc, #464]	; (800201c <HAL_RCC_OscConfig+0x264>)
 8001e4a:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001e4c:	4b74      	ldr	r3, [pc, #464]	; (8002020 <HAL_RCC_OscConfig+0x268>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	f7ff fd3e 	bl	80018d0 <HAL_InitTick>
        if(status != HAL_OK)
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d1b4      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e58:	682b      	ldr	r3, [r5, #0]
 8001e5a:	07d8      	lsls	r0, r3, #31
 8001e5c:	d45f      	bmi.n	8001f1e <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5e:	682b      	ldr	r3, [r5, #0]
 8001e60:	0799      	lsls	r1, r3, #30
 8001e62:	f100 809e 	bmi.w	8001fa2 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e66:	682b      	ldr	r3, [r5, #0]
 8001e68:	0718      	lsls	r0, r3, #28
 8001e6a:	f100 80db 	bmi.w	8002024 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6e:	682b      	ldr	r3, [r5, #0]
 8001e70:	0759      	lsls	r1, r3, #29
 8001e72:	f100 8101 	bmi.w	8002078 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e76:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 816a 	bne.w	8002152 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001e7e:	2000      	movs	r0, #0
 8001e80:	e79f      	b.n	8001dc2 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	6023      	str	r3, [r4, #0]
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e90:	4303      	orrs	r3, r0
 8001e92:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e94:	6863      	ldr	r3, [r4, #4]
 8001e96:	69ea      	ldr	r2, [r5, #28]
 8001e98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ea0:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ea2:	2e00      	cmp	r6, #0
 8001ea4:	d1c6      	bne.n	8001e34 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ea6:	f7ff fef7 	bl	8001c98 <RCC_SetFlashLatencyFromMSIRange>
 8001eaa:	2800      	cmp	r0, #0
 8001eac:	d0c2      	beq.n	8001e34 <HAL_RCC_OscConfig+0x7c>
 8001eae:	e787      	b.n	8001dc0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eb0:	69ab      	ldr	r3, [r5, #24]
 8001eb2:	b31b      	cbz	r3, 8001efc <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fd48 	bl	8001950 <HAL_GetTick>
 8001ec0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	079a      	lsls	r2, r3, #30
 8001ec6:	d511      	bpl.n	8001eec <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	6023      	str	r3, [r4, #0]
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	6a2a      	ldr	r2, [r5, #32]
 8001ed4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001edc:	6863      	ldr	r3, [r4, #4]
 8001ede:	69ea      	ldr	r2, [r5, #28]
 8001ee0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ee4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ee8:	6063      	str	r3, [r4, #4]
 8001eea:	e7b5      	b.n	8001e58 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eec:	f7ff fd30 	bl	8001950 <HAL_GetTick>
 8001ef0:	eba0 0008 	sub.w	r0, r0, r8
 8001ef4:	2802      	cmp	r0, #2
 8001ef6:	d9e4      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8001ef8:	2003      	movs	r0, #3
 8001efa:	e762      	b.n	8001dc2 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	f023 0301 	bic.w	r3, r3, #1
 8001f02:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f04:	f7ff fd24 	bl	8001950 <HAL_GetTick>
 8001f08:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	079b      	lsls	r3, r3, #30
 8001f0e:	d5a3      	bpl.n	8001e58 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f10:	f7ff fd1e 	bl	8001950 <HAL_GetTick>
 8001f14:	eba0 0008 	sub.w	r0, r0, r8
 8001f18:	2802      	cmp	r0, #2
 8001f1a:	d9f6      	bls.n	8001f0a <HAL_RCC_OscConfig+0x152>
 8001f1c:	e7ec      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f1e:	2e08      	cmp	r6, #8
 8001f20:	d003      	beq.n	8001f2a <HAL_RCC_OscConfig+0x172>
 8001f22:	2e0c      	cmp	r6, #12
 8001f24:	d108      	bne.n	8001f38 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f26:	2f03      	cmp	r7, #3
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2a:	6823      	ldr	r3, [r4, #0]
 8001f2c:	039a      	lsls	r2, r3, #14
 8001f2e:	d596      	bpl.n	8001e5e <HAL_RCC_OscConfig+0xa6>
 8001f30:	686b      	ldr	r3, [r5, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d193      	bne.n	8001e5e <HAL_RCC_OscConfig+0xa6>
 8001f36:	e743      	b.n	8001dc0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f38:	686b      	ldr	r3, [r5, #4]
 8001f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3e:	d110      	bne.n	8001f62 <HAL_RCC_OscConfig+0x1aa>
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f46:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f48:	f7ff fd02 	bl	8001950 <HAL_GetTick>
 8001f4c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	039b      	lsls	r3, r3, #14
 8001f52:	d484      	bmi.n	8001e5e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f54:	f7ff fcfc 	bl	8001950 <HAL_GetTick>
 8001f58:	eba0 0008 	sub.w	r0, r0, r8
 8001f5c:	2864      	cmp	r0, #100	; 0x64
 8001f5e:	d9f6      	bls.n	8001f4e <HAL_RCC_OscConfig+0x196>
 8001f60:	e7ca      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f66:	d104      	bne.n	8001f72 <HAL_RCC_OscConfig+0x1ba>
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6e:	6023      	str	r3, [r4, #0]
 8001f70:	e7e6      	b.n	8001f40 <HAL_RCC_OscConfig+0x188>
 8001f72:	6822      	ldr	r2, [r4, #0]
 8001f74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f78:	6022      	str	r2, [r4, #0]
 8001f7a:	6822      	ldr	r2, [r4, #0]
 8001f7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f80:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1e0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8001f86:	f7ff fce3 	bl	8001950 <HAL_GetTick>
 8001f8a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	0398      	lsls	r0, r3, #14
 8001f90:	f57f af65 	bpl.w	8001e5e <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f94:	f7ff fcdc 	bl	8001950 <HAL_GetTick>
 8001f98:	eba0 0008 	sub.w	r0, r0, r8
 8001f9c:	2864      	cmp	r0, #100	; 0x64
 8001f9e:	d9f5      	bls.n	8001f8c <HAL_RCC_OscConfig+0x1d4>
 8001fa0:	e7aa      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fa2:	2e04      	cmp	r6, #4
 8001fa4:	d003      	beq.n	8001fae <HAL_RCC_OscConfig+0x1f6>
 8001fa6:	2e0c      	cmp	r6, #12
 8001fa8:	d110      	bne.n	8001fcc <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001faa:	2f02      	cmp	r7, #2
 8001fac:	d10e      	bne.n	8001fcc <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	0559      	lsls	r1, r3, #21
 8001fb2:	d503      	bpl.n	8001fbc <HAL_RCC_OscConfig+0x204>
 8001fb4:	68eb      	ldr	r3, [r5, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f43f af02 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	6863      	ldr	r3, [r4, #4]
 8001fbe:	692a      	ldr	r2, [r5, #16]
 8001fc0:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001fc4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001fc8:	6063      	str	r3, [r4, #4]
 8001fca:	e74c      	b.n	8001e66 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fcc:	68eb      	ldr	r3, [r5, #12]
 8001fce:	b17b      	cbz	r3, 8001ff0 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fcba 	bl	8001950 <HAL_GetTick>
 8001fdc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	055a      	lsls	r2, r3, #21
 8001fe2:	d4eb      	bmi.n	8001fbc <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fcb4 	bl	8001950 <HAL_GetTick>
 8001fe8:	1bc0      	subs	r0, r0, r7
 8001fea:	2802      	cmp	r0, #2
 8001fec:	d9f7      	bls.n	8001fde <HAL_RCC_OscConfig+0x226>
 8001fee:	e783      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001ff0:	6823      	ldr	r3, [r4, #0]
 8001ff2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ff6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fcaa 	bl	8001950 <HAL_GetTick>
 8001ffc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	055b      	lsls	r3, r3, #21
 8002002:	f57f af30 	bpl.w	8001e66 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002006:	f7ff fca3 	bl	8001950 <HAL_GetTick>
 800200a:	1bc0      	subs	r0, r0, r7
 800200c:	2802      	cmp	r0, #2
 800200e:	d9f6      	bls.n	8001ffe <HAL_RCC_OscConfig+0x246>
 8002010:	e772      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	080052c0 	.word	0x080052c0
 800201c:	20000018 	.word	0x20000018
 8002020:	20000020 	.word	0x20000020
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002024:	696b      	ldr	r3, [r5, #20]
 8002026:	b19b      	cbz	r3, 8002050 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8002028:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002034:	f7ff fc8c 	bl	8001950 <HAL_GetTick>
 8002038:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800203a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800203e:	079a      	lsls	r2, r3, #30
 8002040:	f53f af15 	bmi.w	8001e6e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002044:	f7ff fc84 	bl	8001950 <HAL_GetTick>
 8002048:	1bc0      	subs	r0, r0, r7
 800204a:	2802      	cmp	r0, #2
 800204c:	d9f5      	bls.n	800203a <HAL_RCC_OscConfig+0x282>
 800204e:	e753      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002050:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002054:	f023 0301 	bic.w	r3, r3, #1
 8002058:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800205c:	f7ff fc78 	bl	8001950 <HAL_GetTick>
 8002060:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002062:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002066:	079b      	lsls	r3, r3, #30
 8002068:	f57f af01 	bpl.w	8001e6e <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206c:	f7ff fc70 	bl	8001950 <HAL_GetTick>
 8002070:	1bc0      	subs	r0, r0, r7
 8002072:	2802      	cmp	r0, #2
 8002074:	d9f5      	bls.n	8002062 <HAL_RCC_OscConfig+0x2aa>
 8002076:	e73f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002078:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800207a:	00df      	lsls	r7, r3, #3
 800207c:	d429      	bmi.n	80020d2 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002084:	65a3      	str	r3, [r4, #88]	; 0x58
 8002086:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208c:	9301      	str	r3, [sp, #4]
 800208e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002090:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002094:	4f85      	ldr	r7, [pc, #532]	; (80022ac <HAL_RCC_OscConfig+0x4f4>)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	05d8      	lsls	r0, r3, #23
 800209a:	d51d      	bpl.n	80020d8 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209c:	68ab      	ldr	r3, [r5, #8]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d12b      	bne.n	80020fa <HAL_RCC_OscConfig+0x342>
 80020a2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80020ae:	f7ff fc4f 	bl	8001950 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80020b6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80020bc:	079a      	lsls	r2, r3, #30
 80020be:	d542      	bpl.n	8002146 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 80020c0:	f1b8 0f00 	cmp.w	r8, #0
 80020c4:	f43f aed7 	beq.w	8001e76 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80020ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80020d0:	e6d1      	b.n	8001e76 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 80020d2:	f04f 0800 	mov.w	r8, #0
 80020d6:	e7dd      	b.n	8002094 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020de:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80020e0:	f7ff fc36 	bl	8001950 <HAL_GetTick>
 80020e4:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	05d9      	lsls	r1, r3, #23
 80020ea:	d4d7      	bmi.n	800209c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ec:	f7ff fc30 	bl	8001950 <HAL_GetTick>
 80020f0:	eba0 0009 	sub.w	r0, r0, r9
 80020f4:	2802      	cmp	r0, #2
 80020f6:	d9f6      	bls.n	80020e6 <HAL_RCC_OscConfig+0x32e>
 80020f8:	e6fe      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d106      	bne.n	800210c <HAL_RCC_OscConfig+0x354>
 80020fe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800210a:	e7ca      	b.n	80020a2 <HAL_RCC_OscConfig+0x2ea>
 800210c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002118:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800211c:	f022 0204 	bic.w	r2, r2, #4
 8002120:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1c2      	bne.n	80020ae <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8002128:	f7ff fc12 	bl	8001950 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002130:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002132:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002136:	079b      	lsls	r3, r3, #30
 8002138:	d5c2      	bpl.n	80020c0 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7ff fc09 	bl	8001950 <HAL_GetTick>
 800213e:	1bc0      	subs	r0, r0, r7
 8002140:	4548      	cmp	r0, r9
 8002142:	d9f6      	bls.n	8002132 <HAL_RCC_OscConfig+0x37a>
 8002144:	e6d8      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002146:	f7ff fc03 	bl	8001950 <HAL_GetTick>
 800214a:	1bc0      	subs	r0, r0, r7
 800214c:	4548      	cmp	r0, r9
 800214e:	d9b3      	bls.n	80020b8 <HAL_RCC_OscConfig+0x300>
 8002150:	e6d2      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002152:	2b02      	cmp	r3, #2
 8002154:	f040 808f 	bne.w	8002276 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8002158:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800215c:	f003 0103 	and.w	r1, r3, #3
 8002160:	4291      	cmp	r1, r2
 8002162:	d124      	bne.n	80021ae <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002164:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002166:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800216a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800216c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002170:	d11d      	bne.n	80021ae <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002172:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8002174:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002178:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800217c:	d117      	bne.n	80021ae <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800217e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002180:	3a07      	subs	r2, #7
 8002182:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002186:	bf18      	it	ne
 8002188:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800218a:	4291      	cmp	r1, r2
 800218c:	d10f      	bne.n	80021ae <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800218e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002190:	0852      	lsrs	r2, r2, #1
 8002192:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002196:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002198:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800219c:	d107      	bne.n	80021ae <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800219e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80021a0:	0852      	lsrs	r2, r2, #1
 80021a2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80021a6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80021ac:	d04a      	beq.n	8002244 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ae:	2e0c      	cmp	r6, #12
 80021b0:	f43f ae06 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	015f      	lsls	r7, r3, #5
 80021b8:	f53f ae02 	bmi.w	8001dc0 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021bc:	6823      	ldr	r3, [r4, #0]
 80021be:	00de      	lsls	r6, r3, #3
 80021c0:	f53f adfe 	bmi.w	8001dc0 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80021cc:	f7ff fbc0 	bl	8001950 <HAL_GetTick>
 80021d0:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	0198      	lsls	r0, r3, #6
 80021d6:	d42f      	bmi.n	8002238 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d8:	68e2      	ldr	r2, [r4, #12]
 80021da:	4b35      	ldr	r3, [pc, #212]	; (80022b0 <HAL_RCC_OscConfig+0x4f8>)
 80021dc:	4013      	ands	r3, r2
 80021de:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80021e0:	4313      	orrs	r3, r2
 80021e2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80021e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80021e8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80021ea:	3a01      	subs	r2, #1
 80021ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80021f0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80021f2:	0912      	lsrs	r2, r2, #4
 80021f4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80021f8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80021fa:	0852      	lsrs	r2, r2, #1
 80021fc:	3a01      	subs	r2, #1
 80021fe:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002202:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002204:	0852      	lsrs	r2, r2, #1
 8002206:	3a01      	subs	r2, #1
 8002208:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800220c:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002214:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002216:	68e3      	ldr	r3, [r4, #12]
 8002218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800221c:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 800221e:	f7ff fb97 	bl	8001950 <HAL_GetTick>
 8002222:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	0199      	lsls	r1, r3, #6
 8002228:	f53f ae29 	bmi.w	8001e7e <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7ff fb90 	bl	8001950 <HAL_GetTick>
 8002230:	1b40      	subs	r0, r0, r5
 8002232:	2802      	cmp	r0, #2
 8002234:	d9f6      	bls.n	8002224 <HAL_RCC_OscConfig+0x46c>
 8002236:	e65f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002238:	f7ff fb8a 	bl	8001950 <HAL_GetTick>
 800223c:	1b80      	subs	r0, r0, r6
 800223e:	2802      	cmp	r0, #2
 8002240:	d9c7      	bls.n	80021d2 <HAL_RCC_OscConfig+0x41a>
 8002242:	e659      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	019a      	lsls	r2, r3, #6
 8002248:	f53f ae19 	bmi.w	8001e7e <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002252:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002254:	68e3      	ldr	r3, [r4, #12]
 8002256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225a:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 800225c:	f7ff fb78 	bl	8001950 <HAL_GetTick>
 8002260:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	019b      	lsls	r3, r3, #6
 8002266:	f53f ae0a 	bmi.w	8001e7e <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226a:	f7ff fb71 	bl	8001950 <HAL_GetTick>
 800226e:	1b40      	subs	r0, r0, r5
 8002270:	2802      	cmp	r0, #2
 8002272:	d9f6      	bls.n	8002262 <HAL_RCC_OscConfig+0x4aa>
 8002274:	e640      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002276:	2e0c      	cmp	r6, #12
 8002278:	f43f ada2 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002282:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002284:	f7ff fb64 	bl	8001950 <HAL_GetTick>
 8002288:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002290:	d105      	bne.n	800229e <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002292:	68e1      	ldr	r1, [r4, #12]
 8002294:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_RCC_OscConfig+0x4fc>)
 8002296:	400a      	ands	r2, r1
 8002298:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 800229a:	4618      	mov	r0, r3
 800229c:	e591      	b.n	8001dc2 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229e:	f7ff fb57 	bl	8001950 <HAL_GetTick>
 80022a2:	1b40      	subs	r0, r0, r5
 80022a4:	2802      	cmp	r0, #2
 80022a6:	d9f0      	bls.n	800228a <HAL_RCC_OscConfig+0x4d2>
 80022a8:	e626      	b.n	8001ef8 <HAL_RCC_OscConfig+0x140>
 80022aa:	bf00      	nop
 80022ac:	40007000 	.word	0x40007000
 80022b0:	f99d808c 	.word	0xf99d808c
 80022b4:	feeefffc 	.word	0xfeeefffc

080022b8 <HAL_RCC_ClockConfig>:
{
 80022b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022bc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80022be:	4604      	mov	r4, r0
 80022c0:	b910      	cbnz	r0, 80022c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80022c2:	2001      	movs	r0, #1
}
 80022c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4a4b      	ldr	r2, [pc, #300]	; (80023f8 <HAL_RCC_ClockConfig+0x140>)
 80022ca:	6813      	ldr	r3, [r2, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	428b      	cmp	r3, r1
 80022d2:	d32c      	bcc.n	800232e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	6820      	ldr	r0, [r4, #0]
 80022d6:	0786      	lsls	r6, r0, #30
 80022d8:	d434      	bmi.n	8002344 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022da:	07c1      	lsls	r1, r0, #31
 80022dc:	d43f      	bmi.n	800235e <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022de:	6821      	ldr	r1, [r4, #0]
 80022e0:	078a      	lsls	r2, r1, #30
 80022e2:	d468      	bmi.n	80023b6 <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e4:	4a44      	ldr	r2, [pc, #272]	; (80023f8 <HAL_RCC_ClockConfig+0x140>)
 80022e6:	6813      	ldr	r3, [r2, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	42ab      	cmp	r3, r5
 80022ee:	d86f      	bhi.n	80023d0 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	f011 0f04 	tst.w	r1, #4
 80022f4:	4d41      	ldr	r5, [pc, #260]	; (80023fc <HAL_RCC_ClockConfig+0x144>)
 80022f6:	d177      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	070b      	lsls	r3, r1, #28
 80022fa:	d506      	bpl.n	800230a <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022fc:	68ab      	ldr	r3, [r5, #8]
 80022fe:	6922      	ldr	r2, [r4, #16]
 8002300:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002304:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002308:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800230a:	f7ff fd07 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 800230e:	68ab      	ldr	r3, [r5, #8]
 8002310:	4a3b      	ldr	r2, [pc, #236]	; (8002400 <HAL_RCC_ClockConfig+0x148>)
 8002312:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	40d8      	lsrs	r0, r3
 8002322:	4b38      	ldr	r3, [pc, #224]	; (8002404 <HAL_RCC_ClockConfig+0x14c>)
 8002324:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002326:	4b38      	ldr	r3, [pc, #224]	; (8002408 <HAL_RCC_ClockConfig+0x150>)
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	f7ff bad1 	b.w	80018d0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	f023 0307 	bic.w	r3, r3, #7
 8002334:	430b      	orrs	r3, r1
 8002336:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002338:	6813      	ldr	r3, [r2, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	428b      	cmp	r3, r1
 8002340:	d1bf      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xa>
 8002342:	e7c7      	b.n	80022d4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002344:	4a2d      	ldr	r2, [pc, #180]	; (80023fc <HAL_RCC_ClockConfig+0x144>)
 8002346:	68a6      	ldr	r6, [r4, #8]
 8002348:	6891      	ldr	r1, [r2, #8]
 800234a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 800234e:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002350:	bf81      	itttt	hi
 8002352:	6893      	ldrhi	r3, [r2, #8]
 8002354:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8002358:	4333      	orrhi	r3, r6
 800235a:	6093      	strhi	r3, [r2, #8]
 800235c:	e7bd      	b.n	80022da <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800235e:	6862      	ldr	r2, [r4, #4]
 8002360:	4e26      	ldr	r6, [pc, #152]	; (80023fc <HAL_RCC_ClockConfig+0x144>)
 8002362:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002364:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002366:	d11a      	bne.n	800239e <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002368:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800236c:	d0a9      	beq.n	80022c2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800236e:	68b3      	ldr	r3, [r6, #8]
 8002370:	f023 0303 	bic.w	r3, r3, #3
 8002374:	4313      	orrs	r3, r2
 8002376:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002378:	f7ff faea 	bl	8001950 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002380:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	68b3      	ldr	r3, [r6, #8]
 8002384:	6862      	ldr	r2, [r4, #4]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800238e:	d0a6      	beq.n	80022de <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002390:	f7ff fade 	bl	8001950 <HAL_GetTick>
 8002394:	1bc0      	subs	r0, r0, r7
 8002396:	4540      	cmp	r0, r8
 8002398:	d9f3      	bls.n	8002382 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 800239a:	2003      	movs	r0, #3
 800239c:	e792      	b.n	80022c4 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239e:	2a02      	cmp	r2, #2
 80023a0:	d102      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80023a6:	e7e1      	b.n	800236c <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023a8:	b912      	cbnz	r2, 80023b0 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023aa:	f013 0f02 	tst.w	r3, #2
 80023ae:	e7dd      	b.n	800236c <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80023b4:	e7da      	b.n	800236c <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023b6:	4a11      	ldr	r2, [pc, #68]	; (80023fc <HAL_RCC_ClockConfig+0x144>)
 80023b8:	68a6      	ldr	r6, [r4, #8]
 80023ba:	6890      	ldr	r0, [r2, #8]
 80023bc:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 80023c0:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c2:	bf3f      	itttt	cc
 80023c4:	6893      	ldrcc	r3, [r2, #8]
 80023c6:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 80023ca:	4333      	orrcc	r3, r6
 80023cc:	6093      	strcc	r3, [r2, #8]
 80023ce:	e789      	b.n	80022e4 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d0:	6813      	ldr	r3, [r2, #0]
 80023d2:	f023 0307 	bic.w	r3, r3, #7
 80023d6:	432b      	orrs	r3, r5
 80023d8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	6813      	ldr	r3, [r2, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	42ab      	cmp	r3, r5
 80023e2:	f47f af6e 	bne.w	80022c2 <HAL_RCC_ClockConfig+0xa>
 80023e6:	e783      	b.n	80022f0 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	68ab      	ldr	r3, [r5, #8]
 80023ea:	68e2      	ldr	r2, [r4, #12]
 80023ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60ab      	str	r3, [r5, #8]
 80023f4:	e780      	b.n	80022f8 <HAL_RCC_ClockConfig+0x40>
 80023f6:	bf00      	nop
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40021000 	.word	0x40021000
 8002400:	080052c0 	.word	0x080052c0
 8002404:	20000018 	.word	0x20000018
 8002408:	20000020 	.word	0x20000020

0800240c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_GetPCLK1Freq+0x18>)
 800240e:	4a06      	ldr	r2, [pc, #24]	; (8002428 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002416:	5cd3      	ldrb	r3, [r2, r3]
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <HAL_RCC_GetPCLK1Freq+0x20>)
 800241a:	6810      	ldr	r0, [r2, #0]
 800241c:	f003 031f 	and.w	r3, r3, #31
}
 8002420:	40d8      	lsrs	r0, r3
 8002422:	4770      	bx	lr
 8002424:	40021000 	.word	0x40021000
 8002428:	080052d0 	.word	0x080052d0
 800242c:	20000018 	.word	0x20000018

08002430 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002432:	4a06      	ldr	r2, [pc, #24]	; (800244c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800243a:	5cd3      	ldrb	r3, [r2, r3]
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_RCC_GetPCLK2Freq+0x20>)
 800243e:	6810      	ldr	r0, [r2, #0]
 8002440:	f003 031f 	and.w	r3, r3, #31
}
 8002444:	40d8      	lsrs	r0, r3
 8002446:	4770      	bx	lr
 8002448:	40021000 	.word	0x40021000
 800244c:	080052d0 	.word	0x080052d0
 8002450:	20000018 	.word	0x20000018

08002454 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002454:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002458:	461f      	mov	r7, r3
 800245a:	4689      	mov	r9, r1
 800245c:	4690      	mov	r8, r2
 800245e:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002460:	f7ff fa76 	bl	8001950 <HAL_GetTick>
 8002464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002466:	443b      	add	r3, r7
 8002468:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 800246a:	f7ff fa71 	bl	8001950 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8002470:	681e      	ldr	r6, [r3, #0]
 8002472:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8002476:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8002478:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800247a:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800247c:	6822      	ldr	r2, [r4, #0]
 800247e:	6893      	ldr	r3, [r2, #8]
 8002480:	ea39 0303 	bics.w	r3, r9, r3
 8002484:	bf0c      	ite	eq
 8002486:	2301      	moveq	r3, #1
 8002488:	2300      	movne	r3, #0
 800248a:	4543      	cmp	r3, r8
 800248c:	d101      	bne.n	8002492 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800248e:	2000      	movs	r0, #0
 8002490:	e02e      	b.n	80024f0 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8002492:	1c7b      	adds	r3, r7, #1
 8002494:	d0f3      	beq.n	800247e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002496:	f7ff fa5b 	bl	8001950 <HAL_GetTick>
 800249a:	eba0 000a 	sub.w	r0, r0, sl
 800249e:	42a8      	cmp	r0, r5
 80024a0:	d329      	bcc.n	80024f6 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024aa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ac:	6862      	ldr	r2, [r4, #4]
 80024ae:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80024b2:	d10a      	bne.n	80024ca <SPI_WaitFlagStateUntilTimeout+0x76>
 80024b4:	68a2      	ldr	r2, [r4, #8]
 80024b6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80024ba:	d002      	beq.n	80024c2 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024bc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80024c0:	d103      	bne.n	80024ca <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024cc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80024d0:	d107      	bne.n	80024e2 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e0:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80024e8:	2300      	movs	r3, #0
 80024ea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 80024ee:	2003      	movs	r0, #3
}
 80024f0:	b002      	add	sp, #8
 80024f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 80024f6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80024f8:	2b00      	cmp	r3, #0
      count--;
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 8002500:	bf08      	it	eq
 8002502:	2500      	moveq	r5, #0
      count--;
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	e7b9      	b.n	800247c <SPI_WaitFlagStateUntilTimeout+0x28>
 8002508:	20000018 	.word	0x20000018

0800250c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002510:	4699      	mov	r9, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002512:	2300      	movs	r3, #0
{
 8002514:	4604      	mov	r4, r0
 8002516:	4688      	mov	r8, r1
 8002518:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 800251a:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800251e:	f7ff fa17 	bl	8001950 <HAL_GetTick>
 8002522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002524:	444b      	add	r3, r9
 8002526:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8002528:	f7ff fa12 	bl	8001950 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800252c:	4b2c      	ldr	r3, [pc, #176]	; (80025e0 <SPI_WaitFifoStateUntilTimeout+0xd4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800252e:	f8d4 b000 	ldr.w	fp, [r4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002532:	681e      	ldr	r6, [r3, #0]
 8002534:	2323      	movs	r3, #35	; 0x23
 8002536:	435e      	muls	r6, r3
 8002538:	0d36      	lsrs	r6, r6, #20
 800253a:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 800253c:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800253e:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8002540:	6822      	ldr	r2, [r4, #0]
 8002542:	6893      	ldr	r3, [r2, #8]
 8002544:	ea03 0308 	and.w	r3, r3, r8
 8002548:	42bb      	cmp	r3, r7
 800254a:	d101      	bne.n	8002550 <SPI_WaitFifoStateUntilTimeout+0x44>
      }
      count--;
    }
  }

  return HAL_OK;
 800254c:	2000      	movs	r0, #0
 800254e:	e03a      	b.n	80025c6 <SPI_WaitFifoStateUntilTimeout+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002550:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 8002554:	d107      	bne.n	8002566 <SPI_WaitFifoStateUntilTimeout+0x5a>
 8002556:	b937      	cbnz	r7, 8002566 <SPI_WaitFifoStateUntilTimeout+0x5a>
      tmpreg8 = *ptmpreg8;
 8002558:	f89b 300c 	ldrb.w	r3, [fp, #12]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8002562:	f89d 3003 	ldrb.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 8002566:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800256a:	d0ea      	beq.n	8002542 <SPI_WaitFifoStateUntilTimeout+0x36>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800256c:	f7ff f9f0 	bl	8001950 <HAL_GetTick>
 8002570:	eba0 000a 	sub.w	r0, r0, sl
 8002574:	42a8      	cmp	r0, r5
 8002576:	d329      	bcc.n	80025cc <SPI_WaitFifoStateUntilTimeout+0xc0>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002580:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002582:	6862      	ldr	r2, [r4, #4]
 8002584:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002588:	d10a      	bne.n	80025a0 <SPI_WaitFifoStateUntilTimeout+0x94>
 800258a:	68a2      	ldr	r2, [r4, #8]
 800258c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002590:	d002      	beq.n	8002598 <SPI_WaitFifoStateUntilTimeout+0x8c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002592:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002596:	d103      	bne.n	80025a0 <SPI_WaitFifoStateUntilTimeout+0x94>
          __HAL_SPI_DISABLE(hspi);
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800259e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80025a2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80025a6:	d107      	bne.n	80025b8 <SPI_WaitFifoStateUntilTimeout+0xac>
          SPI_RESET_CRC(hspi);
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025b6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80025b8:	2301      	movs	r3, #1
 80025ba:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80025be:	2300      	movs	r3, #0
 80025c0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 80025c4:	2003      	movs	r0, #3
}
 80025c6:	b003      	add	sp, #12
 80025c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (count == 0U)
 80025cc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80025ce:	2b00      	cmp	r3, #0
      count--;
 80025d0:	9b01      	ldr	r3, [sp, #4]
 80025d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 80025d6:	bf08      	it	eq
 80025d8:	2500      	moveq	r5, #0
      count--;
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	e7b0      	b.n	8002540 <SPI_WaitFifoStateUntilTimeout+0x34>
 80025de:	bf00      	nop
 80025e0:	20000018 	.word	0x20000018

080025e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80025e6:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e8:	6842      	ldr	r2, [r0, #4]
 80025ea:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80025ee:	4604      	mov	r4, r0
 80025f0:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025f2:	d10b      	bne.n	800260c <SPI_EndRxTransaction+0x28>
 80025f4:	6882      	ldr	r2, [r0, #8]
 80025f6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80025fa:	d002      	beq.n	8002602 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025fc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002600:	d104      	bne.n	800260c <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002602:	6821      	ldr	r1, [r4, #0]
 8002604:	680a      	ldr	r2, [r1, #0]
 8002606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260a:	600a      	str	r2, [r1, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800260c:	9600      	str	r6, [sp, #0]
 800260e:	2200      	movs	r2, #0
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	4620      	mov	r0, r4
 8002614:	9303      	str	r3, [sp, #12]
 8002616:	f7ff ff1d 	bl	8002454 <SPI_WaitFlagStateUntilTimeout>
 800261a:	9b03      	ldr	r3, [sp, #12]
 800261c:	4605      	mov	r5, r0
 800261e:	b128      	cbz	r0, 800262c <SPI_EndRxTransaction+0x48>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002620:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002622:	f043 0320 	orr.w	r3, r3, #32
 8002626:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002628:	2503      	movs	r5, #3
 800262a:	e013      	b.n	8002654 <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800262c:	6862      	ldr	r2, [r4, #4]
 800262e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002632:	d10f      	bne.n	8002654 <SPI_EndRxTransaction+0x70>
 8002634:	68a2      	ldr	r2, [r4, #8]
 8002636:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800263a:	d002      	beq.n	8002642 <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800263c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002640:	d108      	bne.n	8002654 <SPI_EndRxTransaction+0x70>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002642:	9600      	str	r6, [sp, #0]
 8002644:	2200      	movs	r2, #0
 8002646:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800264a:	4620      	mov	r0, r4
 800264c:	f7ff ff5e 	bl	800250c <SPI_WaitFifoStateUntilTimeout>
 8002650:	2800      	cmp	r0, #0
 8002652:	d1e5      	bne.n	8002620 <SPI_EndRxTransaction+0x3c>
    }
  }
  return HAL_OK;
}
 8002654:	4628      	mov	r0, r5
 8002656:	b004      	add	sp, #16
 8002658:	bd70      	pop	{r4, r5, r6, pc}

0800265a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800265a:	b530      	push	{r4, r5, lr}
 800265c:	b085      	sub	sp, #20
 800265e:	460b      	mov	r3, r1
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002660:	9200      	str	r2, [sp, #0]
 8002662:	9103      	str	r1, [sp, #12]
{
 8002664:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002666:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800266a:	2200      	movs	r2, #0
{
 800266c:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800266e:	f7ff ff4d 	bl	800250c <SPI_WaitFifoStateUntilTimeout>
 8002672:	9b03      	ldr	r3, [sp, #12]
 8002674:	4602      	mov	r2, r0
 8002676:	b128      	cbz	r0, 8002684 <SPI_EndRxTxTransaction+0x2a>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002678:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800267a:	f043 0320 	orr.w	r3, r3, #32
 800267e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002680:	2003      	movs	r0, #3
 8002682:	e011      	b.n	80026a8 <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002684:	9500      	str	r5, [sp, #0]
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	4620      	mov	r0, r4
 800268a:	9303      	str	r3, [sp, #12]
 800268c:	f7ff fee2 	bl	8002454 <SPI_WaitFlagStateUntilTimeout>
 8002690:	9b03      	ldr	r3, [sp, #12]
 8002692:	4602      	mov	r2, r0
 8002694:	2800      	cmp	r0, #0
 8002696:	d1ef      	bne.n	8002678 <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002698:	9500      	str	r5, [sp, #0]
 800269a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800269e:	4620      	mov	r0, r4
 80026a0:	f7ff ff34 	bl	800250c <SPI_WaitFifoStateUntilTimeout>
 80026a4:	2800      	cmp	r0, #0
 80026a6:	d1e7      	bne.n	8002678 <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 80026a8:	b005      	add	sp, #20
 80026aa:	bd30      	pop	{r4, r5, pc}

080026ac <HAL_SPI_MspInit>:
}
 80026ac:	4770      	bx	lr

080026ae <HAL_SPI_Init>:
{
 80026ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 80026b0:	4604      	mov	r4, r0
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d079      	beq.n	80027aa <HAL_SPI_Init+0xfc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d14f      	bne.n	800275c <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026bc:	6842      	ldr	r2, [r0, #4]
 80026be:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80026c2:	d000      	beq.n	80026c6 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026c4:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80026c6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80026ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026ce:	b923      	cbnz	r3, 80026da <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 80026d0:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80026d4:	4620      	mov	r0, r4
 80026d6:	f7ff ffe9 	bl	80026ac <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80026da:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026dc:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80026de:	2302      	movs	r3, #2
 80026e0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80026e4:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80026ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026ee:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	d85b      	bhi.n	80027ae <HAL_SPI_Init+0x100>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026f6:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026fa:	d000      	beq.n	80026fe <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026fc:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026fe:	6863      	ldr	r3, [r4, #4]
 8002700:	68a7      	ldr	r7, [r4, #8]
 8002702:	69a0      	ldr	r0, [r4, #24]
 8002704:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002706:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 800270a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800270e:	433b      	orrs	r3, r7
 8002710:	6927      	ldr	r7, [r4, #16]
 8002712:	f007 0702 	and.w	r7, r7, #2
 8002716:	433b      	orrs	r3, r7
 8002718:	6967      	ldr	r7, [r4, #20]
 800271a:	f007 0701 	and.w	r7, r7, #1
 800271e:	433b      	orrs	r3, r7
 8002720:	f400 7700 	and.w	r7, r0, #512	; 0x200
 8002724:	433b      	orrs	r3, r7
 8002726:	69e7      	ldr	r7, [r4, #28]
 8002728:	f007 0738 	and.w	r7, r7, #56	; 0x38
 800272c:	433b      	orrs	r3, r7
 800272e:	6a27      	ldr	r7, [r4, #32]
 8002730:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8002734:	433b      	orrs	r3, r7
 8002736:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 800273a:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800273c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002740:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002742:	d111      	bne.n	8002768 <HAL_SPI_Init+0xba>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002744:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002746:	bb6b      	cbnz	r3, 80027a4 <HAL_SPI_Init+0xf6>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002748:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800274c:	d90a      	bls.n	8002764 <HAL_SPI_Init+0xb6>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800274e:	2302      	movs	r3, #2
 8002750:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8002752:	6813      	ldr	r3, [r2, #0]
 8002754:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e005      	b.n	8002768 <HAL_SPI_Init+0xba>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800275c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800275e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002762:	e7b0      	b.n	80026c6 <HAL_SPI_Init+0x18>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002764:	2301      	movs	r3, #1
 8002766:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800276a:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	f007 0708 	and.w	r7, r7, #8
 8002774:	433b      	orrs	r3, r7
 8002776:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800277a:	0c00      	lsrs	r0, r0, #16
 800277c:	4319      	orrs	r1, r3
 800277e:	f000 0004 	and.w	r0, r0, #4
 8002782:	4301      	orrs	r1, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002784:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002788:	bf08      	it	eq
 800278a:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800278c:	ea45 0501 	orr.w	r5, r5, r1
 8002790:	6055      	str	r5, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002792:	f04f 0000 	mov.w	r0, #0
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002796:	bf08      	it	eq
 8002798:	6113      	streq	r3, [r2, #16]
  hspi->State     = HAL_SPI_STATE_READY;
 800279a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800279c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800279e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80027a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d1df      	bne.n	8002768 <HAL_SPI_Init+0xba>
 80027a8:	e7d3      	b.n	8002752 <HAL_SPI_Init+0xa4>
    return HAL_ERROR;
 80027aa:	2001      	movs	r0, #1
 80027ac:	e7f9      	b.n	80027a2 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027ae:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027b0:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 80027b4:	e7a1      	b.n	80026fa <HAL_SPI_Init+0x4c>

080027b6 <HAL_SPI_MspDeInit>:
 80027b6:	4770      	bx	lr

080027b8 <HAL_SPI_DeInit>:
{
 80027b8:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80027ba:	4604      	mov	r4, r0
 80027bc:	b180      	cbz	r0, 80027e0 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 80027be:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80027c0:	2302      	movs	r3, #2
 80027c2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80027c6:	6813      	ldr	r3, [r2, #0]
 80027c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027cc:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80027ce:	f7ff fff2 	bl	80027b6 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027d2:	2000      	movs	r0, #0
 80027d4:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 80027d6:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 80027da:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 80027de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027e0:	2001      	movs	r0, #1
 80027e2:	e7fc      	b.n	80027de <HAL_SPI_DeInit+0x26>

080027e4 <HAL_SPI_TransmitReceive>:
{
 80027e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027e8:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 80027ee:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 80027f2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80027f6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80027f8:	2b01      	cmp	r3, #1
{
 80027fa:	4604      	mov	r4, r0
 80027fc:	460e      	mov	r6, r1
 80027fe:	4692      	mov	sl, r2
  __HAL_LOCK(hspi);
 8002800:	f000 81b4 	beq.w	8002b6c <HAL_SPI_TransmitReceive+0x388>
 8002804:	2301      	movs	r3, #1
 8002806:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800280a:	f7ff f8a1 	bl	8001950 <HAL_GetTick>
  tmp_state           = hspi->State;
 800280e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8002812:	e9d4 5200 	ldrd	r5, r2, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002816:	2b01      	cmp	r3, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8002818:	6829      	ldr	r1, [r5, #0]
  tickstart = HAL_GetTick();
 800281a:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 800281c:	fa5f fc83 	uxtb.w	ip, r3
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8002820:	6868      	ldr	r0, [r5, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002822:	d00b      	beq.n	800283c <HAL_SPI_TransmitReceive+0x58>
 8002824:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002828:	f040 819e 	bne.w	8002b68 <HAL_SPI_TransmitReceive+0x384>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800282c:	68a3      	ldr	r3, [r4, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 819a 	bne.w	8002b68 <HAL_SPI_TransmitReceive+0x384>
 8002834:	f1bc 0f04 	cmp.w	ip, #4
 8002838:	f040 8196 	bne.w	8002b68 <HAL_SPI_TransmitReceive+0x384>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800283c:	2e00      	cmp	r6, #0
 800283e:	f000 8176 	beq.w	8002b2e <HAL_SPI_TransmitReceive+0x34a>
 8002842:	f1ba 0f00 	cmp.w	sl, #0
 8002846:	f000 8172 	beq.w	8002b2e <HAL_SPI_TransmitReceive+0x34a>
 800284a:	f1b9 0f00 	cmp.w	r9, #0
 800284e:	f000 816e 	beq.w	8002b2e <HAL_SPI_TransmitReceive+0x34a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002852:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002856:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800285a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800285c:	bf1c      	itt	ne
 800285e:	2305      	movne	r3, #5
 8002860:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002864:	2300      	movs	r3, #0
 8002866:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8002868:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800286c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 800286e:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 8002876:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800287a:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800287c:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002880:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002884:	d107      	bne.n	8002896 <HAL_SPI_TransmitReceive+0xb2>
    SPI_RESET_CRC(hspi);
 8002886:	682b      	ldr	r3, [r5, #0]
 8002888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800288c:	602b      	str	r3, [r5, #0]
 800288e:	682b      	ldr	r3, [r5, #0]
 8002890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002894:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002896:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800289a:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800289c:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 80028a0:	d802      	bhi.n	80028a8 <HAL_SPI_TransmitReceive+0xc4>
 80028a2:	f1b9 0f01 	cmp.w	r9, #1
 80028a6:	d03a      	beq.n	800291e <HAL_SPI_TransmitReceive+0x13a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028ac:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ae:	682b      	ldr	r3, [r5, #0]
 80028b0:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80028b2:	bf5e      	ittt	pl
 80028b4:	682b      	ldrpl	r3, [r5, #0]
 80028b6:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80028ba:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028bc:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 80028c0:	d97f      	bls.n	80029c2 <HAL_SPI_TransmitReceive+0x1de>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028c2:	b112      	cbz	r2, 80028ca <HAL_SPI_TransmitReceive+0xe6>
 80028c4:	f1b9 0f01 	cmp.w	r9, #1
 80028c8:	d107      	bne.n	80028da <HAL_SPI_TransmitReceive+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ca:	f836 3b02 	ldrh.w	r3, [r6], #2
 80028ce:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 80028d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d2:	63a6      	str	r6, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80028da:	f04f 0901 	mov.w	r9, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80028de:	f001 0604 	and.w	r6, r1, #4
 80028e2:	f000 0508 	and.w	r5, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	b9db      	cbnz	r3, 8002924 <HAL_SPI_TransmitReceive+0x140>
 80028ec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	b9bb      	cbnz	r3, 8002924 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fa:	f040 8101 	bne.w	8002b00 <HAL_SPI_TransmitReceive+0x31c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80028fe:	2201      	movs	r2, #1
 8002900:	f8cd 8000 	str.w	r8, [sp]
 8002904:	463b      	mov	r3, r7
 8002906:	4611      	mov	r1, r2
 8002908:	4620      	mov	r0, r4
 800290a:	f7ff fda3 	bl	8002454 <SPI_WaitFlagStateUntilTimeout>
 800290e:	2800      	cmp	r0, #0
 8002910:	f000 80ee 	beq.w	8002af0 <HAL_SPI_TransmitReceive+0x30c>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002914:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002916:	f043 0302 	orr.w	r3, r3, #2
 800291a:	6623      	str	r3, [r4, #96]	; 0x60
 800291c:	e02a      	b.n	8002974 <HAL_SPI_TransmitReceive+0x190>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800291e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002922:	e7c3      	b.n	80028ac <HAL_SPI_TransmitReceive+0xc8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	0790      	lsls	r0, r2, #30
 800292a:	d507      	bpl.n	800293c <HAL_SPI_TransmitReceive+0x158>
 800292c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800292e:	b292      	uxth	r2, r2
 8002930:	b122      	cbz	r2, 800293c <HAL_SPI_TransmitReceive+0x158>
 8002932:	f1b9 0f00 	cmp.w	r9, #0
 8002936:	d128      	bne.n	800298a <HAL_SPI_TransmitReceive+0x1a6>
        txallowed = 0U;
 8002938:	f04f 0900 	mov.w	r9, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800293c:	6899      	ldr	r1, [r3, #8]
 800293e:	f011 0101 	ands.w	r1, r1, #1
 8002942:	d00f      	beq.n	8002964 <HAL_SPI_TransmitReceive+0x180>
 8002944:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002948:	b292      	uxth	r2, r2
 800294a:	b15a      	cbz	r2, 8002964 <HAL_SPI_TransmitReceive+0x180>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002950:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002954:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002956:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800295a:	3b01      	subs	r3, #1
 800295c:	b29b      	uxth	r3, r3
 800295e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002962:	4689      	mov	r9, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002964:	f7fe fff4 	bl	8001950 <HAL_GetTick>
 8002968:	eba0 0008 	sub.w	r0, r0, r8
 800296c:	42b8      	cmp	r0, r7
 800296e:	d3ba      	bcc.n	80028e6 <HAL_SPI_TransmitReceive+0x102>
 8002970:	1c79      	adds	r1, r7, #1
 8002972:	d0b8      	beq.n	80028e6 <HAL_SPI_TransmitReceive+0x102>
          errorcode = HAL_TIMEOUT;
 8002974:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002976:	2301      	movs	r3, #1
 8002978:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800297c:	2300      	movs	r3, #0
 800297e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002982:	4628      	mov	r0, r5
 8002984:	b004      	add	sp, #16
 8002986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800298a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800298c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002990:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002992:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002994:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002996:	3a01      	subs	r2, #1
 8002998:	b292      	uxth	r2, r2
 800299a:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800299c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800299e:	b292      	uxth	r2, r2
 80029a0:	2a00      	cmp	r2, #0
 80029a2:	d1c9      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x154>
 80029a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80029a6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80029aa:	d1c5      	bne.n	8002938 <HAL_SPI_TransmitReceive+0x154>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80029ac:	b926      	cbnz	r6, 80029b8 <HAL_SPI_TransmitReceive+0x1d4>
 80029ae:	b11d      	cbz	r5, 80029b8 <HAL_SPI_TransmitReceive+0x1d4>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b6:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e7ba      	b.n	8002938 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c2:	b112      	cbz	r2, 80029ca <HAL_SPI_TransmitReceive+0x1e6>
 80029c4:	f1b9 0f01 	cmp.w	r9, #1
 80029c8:	d10b      	bne.n	80029e2 <HAL_SPI_TransmitReceive+0x1fe>
      if (hspi->TxXferCount > 1U)
 80029ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d90d      	bls.n	80029ee <HAL_SPI_TransmitReceive+0x20a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029d2:	f836 3b02 	ldrh.w	r3, [r6], #2
 80029d6:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 80029d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029da:	63a6      	str	r6, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80029dc:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80029de:	b29b      	uxth	r3, r3
 80029e0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80029e2:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80029e4:	f001 0604 	and.w	r6, r1, #4
 80029e8:	f000 0908 	and.w	r9, r0, #8
 80029ec:	e03c      	b.n	8002a68 <HAL_SPI_TransmitReceive+0x284>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029ee:	7833      	ldrb	r3, [r6, #0]
 80029f0:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 80029f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029f4:	3301      	adds	r3, #1
 80029f6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80029f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029fa:	3b01      	subs	r3, #1
 80029fc:	e7ef      	b.n	80029de <HAL_SPI_TransmitReceive+0x1fa>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029fe:	6821      	ldr	r1, [r4, #0]
 8002a00:	688b      	ldr	r3, [r1, #8]
 8002a02:	079a      	lsls	r2, r3, #30
 8002a04:	d505      	bpl.n	8002a12 <HAL_SPI_TransmitReceive+0x22e>
 8002a06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	b113      	cbz	r3, 8002a12 <HAL_SPI_TransmitReceive+0x22e>
 8002a0c:	2d00      	cmp	r5, #0
 8002a0e:	d135      	bne.n	8002a7c <HAL_SPI_TransmitReceive+0x298>
        txallowed = 0U;
 8002a10:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a12:	6821      	ldr	r1, [r4, #0]
 8002a14:	688b      	ldr	r3, [r1, #8]
 8002a16:	f013 0301 	ands.w	r3, r3, #1
 8002a1a:	d01d      	beq.n	8002a58 <HAL_SPI_TransmitReceive+0x274>
 8002a1c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002a20:	b292      	uxth	r2, r2
 8002a22:	b1ca      	cbz	r2, 8002a58 <HAL_SPI_TransmitReceive+0x274>
        if (hspi->RxXferCount > 1U)
 8002a24:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a28:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (hspi->RxXferCount > 1U)
 8002a2a:	b280      	uxth	r0, r0
 8002a2c:	2801      	cmp	r0, #1
 8002a2e:	d950      	bls.n	8002ad2 <HAL_SPI_TransmitReceive+0x2ee>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a30:	68c8      	ldr	r0, [r1, #12]
 8002a32:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a36:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002a38:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002a3c:	3a02      	subs	r2, #2
 8002a3e:	b292      	uxth	r2, r2
 8002a40:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002a44:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002a48:	b292      	uxth	r2, r2
 8002a4a:	2a01      	cmp	r2, #1
 8002a4c:	d803      	bhi.n	8002a56 <HAL_SPI_TransmitReceive+0x272>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a4e:	684a      	ldr	r2, [r1, #4]
 8002a50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a54:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 8002a56:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a58:	f7fe ff7a 	bl	8001950 <HAL_GetTick>
 8002a5c:	eba0 0008 	sub.w	r0, r0, r8
 8002a60:	42b8      	cmp	r0, r7
 8002a62:	d342      	bcc.n	8002aea <HAL_SPI_TransmitReceive+0x306>
 8002a64:	1c7b      	adds	r3, r7, #1
 8002a66:	d185      	bne.n	8002974 <HAL_SPI_TransmitReceive+0x190>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1c6      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x21a>
 8002a70:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1c1      	bne.n	80029fe <HAL_SPI_TransmitReceive+0x21a>
 8002a7a:	e73b      	b.n	80028f4 <HAL_SPI_TransmitReceive+0x110>
        if (hspi->TxXferCount > 1U)
 8002a7c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8002a80:	b292      	uxth	r2, r2
 8002a82:	2a01      	cmp	r2, #1
 8002a84:	d91d      	bls.n	8002ac2 <HAL_SPI_TransmitReceive+0x2de>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a86:	f833 2b02 	ldrh.w	r2, [r3], #2
 8002a8a:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a8c:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a8e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a90:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002a96:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1b8      	bne.n	8002a10 <HAL_SPI_TransmitReceive+0x22c>
 8002a9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002aa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa4:	d1b4      	bne.n	8002a10 <HAL_SPI_TransmitReceive+0x22c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8002aa6:	6823      	ldr	r3, [r4, #0]
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8002aa8:	b936      	cbnz	r6, 8002ab8 <HAL_SPI_TransmitReceive+0x2d4>
 8002aaa:	f1b9 0f00 	cmp.w	r9, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_SPI_TransmitReceive+0x2d4>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab6:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	e7a6      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x22c>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 8002ac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ac8:	3301      	adds	r3, #1
 8002aca:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002acc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	e7df      	b.n	8002a92 <HAL_SPI_TransmitReceive+0x2ae>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ad2:	7b09      	ldrb	r1, [r1, #12]
 8002ad4:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 8002ad6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ad8:	3201      	adds	r2, #1
 8002ada:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002adc:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002ae0:	3a01      	subs	r2, #1
 8002ae2:	b292      	uxth	r2, r2
 8002ae4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8002ae8:	e7b5      	b.n	8002a56 <HAL_SPI_TransmitReceive+0x272>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002aea:	2f00      	cmp	r7, #0
 8002aec:	d1bc      	bne.n	8002a68 <HAL_SPI_TransmitReceive+0x284>
 8002aee:	e741      	b.n	8002974 <HAL_SPI_TransmitReceive+0x190>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002af0:	68e3      	ldr	r3, [r4, #12]
      tmpreg = READ_REG(hspi->Instance->DR);
 8002af2:	6825      	ldr	r5, [r4, #0]
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002af4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002af8:	d11b      	bne.n	8002b32 <HAL_SPI_TransmitReceive+0x34e>
      tmpreg = READ_REG(hspi->Instance->DR);
 8002afa:	68eb      	ldr	r3, [r5, #12]
 8002afc:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8002afe:	9b03      	ldr	r3, [sp, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002b00:	6822      	ldr	r2, [r4, #0]
 8002b02:	6895      	ldr	r5, [r2, #8]
 8002b04:	f015 0510 	ands.w	r5, r5, #16
 8002b08:	d007      	beq.n	8002b1a <HAL_SPI_TransmitReceive+0x336>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002b0a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002b12:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002b16:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8002b18:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b1a:	4642      	mov	r2, r8
 8002b1c:	4639      	mov	r1, r7
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f7ff fd9b 	bl	800265a <SPI_EndRxTxTransaction>
 8002b24:	2800      	cmp	r0, #0
 8002b26:	f43f af26 	beq.w	8002976 <HAL_SPI_TransmitReceive+0x192>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002b2e:	2501      	movs	r5, #1
 8002b30:	e721      	b.n	8002976 <HAL_SPI_TransmitReceive+0x192>
      tmpreg8 = *ptmpreg8;
 8002b32:	7b2b      	ldrb	r3, [r5, #12]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 8002b3a:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002b3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d1dd      	bne.n	8002b00 <HAL_SPI_TransmitReceive+0x31c>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002b44:	2201      	movs	r2, #1
 8002b46:	f8cd 8000 	str.w	r8, [sp]
 8002b4a:	463b      	mov	r3, r7
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7ff fc80 	bl	8002454 <SPI_WaitFlagStateUntilTimeout>
 8002b54:	2800      	cmp	r0, #0
 8002b56:	f47f aedd 	bne.w	8002914 <HAL_SPI_TransmitReceive+0x130>
        tmpreg8 = *ptmpreg8;
 8002b5a:	7b2b      	ldrb	r3, [r5, #12]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8002b62:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002b66:	e7cb      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x31c>
    errorcode = HAL_BUSY;
 8002b68:	2502      	movs	r5, #2
 8002b6a:	e704      	b.n	8002976 <HAL_SPI_TransmitReceive+0x192>
  __HAL_LOCK(hspi);
 8002b6c:	2502      	movs	r5, #2
 8002b6e:	e708      	b.n	8002982 <HAL_SPI_TransmitReceive+0x19e>

08002b70 <HAL_SPI_Receive>:
{
 8002b70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002b74:	461e      	mov	r6, r3
  __IO uint32_t tmpreg = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8002b7a:	f88d 300b 	strb.w	r3, [sp, #11]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b7e:	6843      	ldr	r3, [r0, #4]
 8002b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002b84:	4604      	mov	r4, r0
 8002b86:	4688      	mov	r8, r1
 8002b88:	4615      	mov	r5, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b8a:	d10c      	bne.n	8002ba6 <HAL_SPI_Receive+0x36>
 8002b8c:	6883      	ldr	r3, [r0, #8]
 8002b8e:	b953      	cbnz	r3, 8002ba6 <HAL_SPI_Receive+0x36>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b90:	2304      	movs	r3, #4
 8002b92:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b96:	4613      	mov	r3, r2
 8002b98:	9600      	str	r6, [sp, #0]
 8002b9a:	460a      	mov	r2, r1
 8002b9c:	f7ff fe22 	bl	80027e4 <HAL_SPI_TransmitReceive>
}
 8002ba0:	b004      	add	sp, #16
 8002ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002ba6:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	f000 8102 	beq.w	8002db4 <HAL_SPI_Receive+0x244>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002bb6:	f7fe fecb 	bl	8001950 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002bba:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002bbe:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002bc0:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002bc2:	b2d8      	uxtb	r0, r3
 8002bc4:	f040 80f4 	bne.w	8002db0 <HAL_SPI_Receive+0x240>
  if ((pData == NULL) || (Size == 0U))
 8002bc8:	f1b8 0f00 	cmp.w	r8, #0
 8002bcc:	f000 809f 	beq.w	8002d0e <HAL_SPI_Receive+0x19e>
 8002bd0:	2d00      	cmp	r5, #0
 8002bd2:	f000 809c 	beq.w	8002d0e <HAL_SPI_Receive+0x19e>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferSize  = Size;
 8002bde:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002be2:	2000      	movs	r0, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002be8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8002bea:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 8002bee:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bf2:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    SPI_RESET_CRC(hspi);
 8002bf6:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bf8:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002bfa:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002bfc:	87e0      	strh	r0, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bfe:	d10d      	bne.n	8002c1c <HAL_SPI_Receive+0xac>
    SPI_RESET_CRC(hspi);
 8002c00:	682b      	ldr	r3, [r5, #0]
 8002c02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c06:	602b      	str	r3, [r5, #0]
 8002c08:	682b      	ldr	r3, [r5, #0]
 8002c0a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c0e:	602b      	str	r3, [r5, #0]
    hspi->RxXferCount--;
 8002c10:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c1c:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c1e:	686b      	ldr	r3, [r5, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c20:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c24:	bf8c      	ite	hi
 8002c26:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c2a:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 8002c2e:	606b      	str	r3, [r5, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c30:	68a3      	ldr	r3, [r4, #8]
 8002c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c36:	d107      	bne.n	8002c48 <HAL_SPI_Receive+0xd8>
    __HAL_SPI_DISABLE(hspi);
 8002c38:	682b      	ldr	r3, [r5, #0]
 8002c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c3e:	602b      	str	r3, [r5, #0]
    SPI_1LINE_RX(hspi);
 8002c40:	682b      	ldr	r3, [r5, #0]
 8002c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c46:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c48:	682b      	ldr	r3, [r5, #0]
 8002c4a:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002c4c:	bf5e      	ittt	pl
 8002c4e:	682b      	ldrpl	r3, [r5, #0]
 8002c50:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002c54:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c56:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8002c5a:	d923      	bls.n	8002ca4 <HAL_SPI_Receive+0x134>
    while (hspi->RxXferCount > 0U)
 8002c5c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	b323      	cbz	r3, 8002cae <HAL_SPI_Receive+0x13e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	07d1      	lsls	r1, r2, #31
 8002c6a:	d55a      	bpl.n	8002d22 <HAL_SPI_Receive+0x1b2>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c70:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c74:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002c76:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8002c82:	e7eb      	b.n	8002c5c <HAL_SPI_Receive+0xec>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	07d5      	lsls	r5, r2, #31
 8002c8a:	d538      	bpl.n	8002cfe <HAL_SPI_Receive+0x18e>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c8e:	7b1b      	ldrb	r3, [r3, #12]
 8002c90:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c94:	3301      	adds	r3, #1
 8002c96:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002c98:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8002ca4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1ea      	bne.n	8002c84 <HAL_SPI_Receive+0x114>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb4:	d148      	bne.n	8002d48 <HAL_SPI_Receive+0x1d8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	6813      	ldr	r3, [r2, #0]
 8002cba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cbe:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	9700      	str	r7, [sp, #0]
 8002cc4:	4633      	mov	r3, r6
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f7ff fbc3 	bl	8002454 <SPI_WaitFlagStateUntilTimeout>
 8002cce:	b9e8      	cbnz	r0, 8002d0c <HAL_SPI_Receive+0x19c>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cd0:	68e1      	ldr	r1, [r4, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cd2:	6822      	ldr	r2, [r4, #0]
 8002cd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cd6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cda:	bf8b      	itete	hi
 8002cdc:	68d2      	ldrhi	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cde:	7b12      	ldrbls	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ce0:	801a      	strhhi	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ce2:	701a      	strbls	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	9700      	str	r7, [sp, #0]
 8002ce8:	4633      	mov	r3, r6
 8002cea:	4611      	mov	r1, r2
 8002cec:	4620      	mov	r0, r4
 8002cee:	f7ff fbb1 	bl	8002454 <SPI_WaitFlagStateUntilTimeout>
 8002cf2:	b308      	cbz	r0, 8002d38 <HAL_SPI_Receive+0x1c8>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002cf4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002cf6:	f043 0302 	orr.w	r3, r3, #2
 8002cfa:	6623      	str	r3, [r4, #96]	; 0x60
 8002cfc:	e006      	b.n	8002d0c <HAL_SPI_Receive+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cfe:	f7fe fe27 	bl	8001950 <HAL_GetTick>
 8002d02:	1bc0      	subs	r0, r0, r7
 8002d04:	42b0      	cmp	r0, r6
 8002d06:	d309      	bcc.n	8002d1c <HAL_SPI_Receive+0x1ac>
 8002d08:	1c70      	adds	r0, r6, #1
 8002d0a:	d0cb      	beq.n	8002ca4 <HAL_SPI_Receive+0x134>
          errorcode = HAL_TIMEOUT;
 8002d0c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d14:	2300      	movs	r3, #0
 8002d16:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8002d1a:	e741      	b.n	8002ba0 <HAL_SPI_Receive+0x30>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d1c:	2e00      	cmp	r6, #0
 8002d1e:	d1c1      	bne.n	8002ca4 <HAL_SPI_Receive+0x134>
 8002d20:	e7f4      	b.n	8002d0c <HAL_SPI_Receive+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d22:	f7fe fe15 	bl	8001950 <HAL_GetTick>
 8002d26:	1bc0      	subs	r0, r0, r7
 8002d28:	42b0      	cmp	r0, r6
 8002d2a:	d302      	bcc.n	8002d32 <HAL_SPI_Receive+0x1c2>
 8002d2c:	1c72      	adds	r2, r6, #1
 8002d2e:	d095      	beq.n	8002c5c <HAL_SPI_Receive+0xec>
 8002d30:	e7ec      	b.n	8002d0c <HAL_SPI_Receive+0x19c>
 8002d32:	2e00      	cmp	r6, #0
 8002d34:	d192      	bne.n	8002c5c <HAL_SPI_Receive+0xec>
 8002d36:	e7e9      	b.n	8002d0c <HAL_SPI_Receive+0x19c>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d38:	68e2      	ldr	r2, [r4, #12]
      tmpreg = READ_REG(hspi->Instance->DR);
 8002d3a:	6825      	ldr	r5, [r4, #0]
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d3c:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8002d40:	d11a      	bne.n	8002d78 <HAL_SPI_Receive+0x208>
      tmpreg = READ_REG(hspi->Instance->DR);
 8002d42:	68eb      	ldr	r3, [r5, #12]
 8002d44:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8002d46:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d48:	463a      	mov	r2, r7
 8002d4a:	4631      	mov	r1, r6
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f7ff fc49 	bl	80025e4 <SPI_EndRxTransaction>
 8002d52:	b108      	cbz	r0, 8002d58 <HAL_SPI_Receive+0x1e8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d54:	2320      	movs	r3, #32
 8002d56:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002d58:	6822      	ldr	r2, [r4, #0]
 8002d5a:	6893      	ldr	r3, [r2, #8]
 8002d5c:	06db      	lsls	r3, r3, #27
 8002d5e:	d506      	bpl.n	8002d6e <HAL_SPI_Receive+0x1fe>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002d60:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002d68:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002d6c:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d6e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8002d70:	3800      	subs	r0, #0
 8002d72:	bf18      	it	ne
 8002d74:	2001      	movne	r0, #1
error :
 8002d76:	e7ca      	b.n	8002d0e <HAL_SPI_Receive+0x19e>
      tmpreg8 = *ptmpreg8;
 8002d78:	7b2b      	ldrb	r3, [r5, #12]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f88d 300b 	strb.w	r3, [sp, #11]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8002d80:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      UNUSED(tmpreg8);
 8002d84:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8002d88:	d1de      	bne.n	8002d48 <HAL_SPI_Receive+0x1d8>
 8002d8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d1db      	bne.n	8002d48 <HAL_SPI_Receive+0x1d8>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002d90:	2201      	movs	r2, #1
 8002d92:	9700      	str	r7, [sp, #0]
 8002d94:	4633      	mov	r3, r6
 8002d96:	4611      	mov	r1, r2
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7ff fb5b 	bl	8002454 <SPI_WaitFlagStateUntilTimeout>
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d1a8      	bne.n	8002cf4 <HAL_SPI_Receive+0x184>
        tmpreg8 = *ptmpreg8;
 8002da2:	7b2b      	ldrb	r3, [r5, #12]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8002daa:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002dae:	e7cb      	b.n	8002d48 <HAL_SPI_Receive+0x1d8>
    errorcode = HAL_BUSY;
 8002db0:	2002      	movs	r0, #2
 8002db2:	e7ac      	b.n	8002d0e <HAL_SPI_Receive+0x19e>
  __HAL_LOCK(hspi);
 8002db4:	2002      	movs	r0, #2
 8002db6:	e6f3      	b.n	8002ba0 <HAL_SPI_Receive+0x30>

08002db8 <HAL_SPI_Transmit_IT>:
{
 8002db8:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 8002dba:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8002dbe:	2801      	cmp	r0, #1
 8002dc0:	d04d      	beq.n	8002e5e <HAL_SPI_Transmit_IT+0xa6>
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 8002dc8:	2900      	cmp	r1, #0
 8002dca:	d040      	beq.n	8002e4e <HAL_SPI_Transmit_IT+0x96>
 8002dcc:	2a00      	cmp	r2, #0
 8002dce:	d03e      	beq.n	8002e4e <HAL_SPI_Transmit_IT+0x96>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002dd0:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8002dd4:	2801      	cmp	r0, #1
 8002dd6:	d13e      	bne.n	8002e56 <HAL_SPI_Transmit_IT+0x9e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dd8:	2003      	movs	r0, #3
 8002dda:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dde:	2000      	movs	r0, #0
 8002de0:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002de2:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002de4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR = SPI_TxISR_8BIT;
 8002de6:	491f      	ldr	r1, [pc, #124]	; (8002e64 <HAL_SPI_Transmit_IT+0xac>)
  hspi->TxXferSize  = Size;
 8002de8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dea:	6418      	str	r0, [r3, #64]	; 0x40
    hspi->TxISR = SPI_TxISR_8BIT;
 8002dec:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_SPI_Transmit_IT+0xb0>)
  hspi->RxXferSize  = 0U;
 8002dee:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002df2:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8002df6:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002df8:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 8002dfa:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002dfe:	bf98      	it	ls
 8002e00:	460a      	movls	r2, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e02:	6899      	ldr	r1, [r3, #8]
 8002e04:	651a      	str	r2, [r3, #80]	; 0x50
 8002e06:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 8002e0a:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e0c:	d107      	bne.n	8002e1e <HAL_SPI_Transmit_IT+0x66>
    __HAL_SPI_DISABLE(hspi);
 8002e0e:	6811      	ldr	r1, [r2, #0]
 8002e10:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002e14:	6011      	str	r1, [r2, #0]
    SPI_1LINE_TX(hspi);
 8002e16:	6811      	ldr	r1, [r2, #0]
 8002e18:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002e1c:	6011      	str	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e1e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e20:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8002e24:	d107      	bne.n	8002e36 <HAL_SPI_Transmit_IT+0x7e>
    SPI_RESET_CRC(hspi);
 8002e26:	6811      	ldr	r1, [r2, #0]
 8002e28:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002e2c:	6011      	str	r1, [r2, #0]
 8002e2e:	6811      	ldr	r1, [r2, #0]
 8002e30:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8002e34:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002e36:	6851      	ldr	r1, [r2, #4]
 8002e38:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 8002e3c:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e3e:	6810      	ldr	r0, [r2, #0]
 8002e40:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8002e44:	d109      	bne.n	8002e5a <HAL_SPI_Transmit_IT+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8002e46:	6811      	ldr	r1, [r2, #0]
 8002e48:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002e4c:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e54:	4770      	bx	lr
    errorcode = HAL_BUSY;
 8002e56:	2002      	movs	r0, #2
 8002e58:	e7f9      	b.n	8002e4e <HAL_SPI_Transmit_IT+0x96>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	e7f7      	b.n	8002e4e <HAL_SPI_Transmit_IT+0x96>
  __HAL_LOCK(hspi);
 8002e5e:	2002      	movs	r0, #2
}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	080030bf 	.word	0x080030bf
 8002e68:	080030f3 	.word	0x080030f3

08002e6c <HAL_SPI_TransmitReceive_IT>:
{
 8002e6c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hspi);
 8002e6e:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8002e72:	2c01      	cmp	r4, #1
 8002e74:	d070      	beq.n	8002f58 <HAL_SPI_TransmitReceive_IT+0xec>
 8002e76:	2401      	movs	r4, #1
 8002e78:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 8002e7c:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e80:	2c01      	cmp	r4, #1
  tmp_state           = hspi->State;
 8002e82:	b2e5      	uxtb	r5, r4
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e84:	d008      	beq.n	8002e98 <HAL_SPI_TransmitReceive_IT+0x2c>
 8002e86:	6844      	ldr	r4, [r0, #4]
 8002e88:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8002e8c:	d15e      	bne.n	8002f4c <HAL_SPI_TransmitReceive_IT+0xe0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e8e:	6884      	ldr	r4, [r0, #8]
 8002e90:	2c00      	cmp	r4, #0
 8002e92:	d15b      	bne.n	8002f4c <HAL_SPI_TransmitReceive_IT+0xe0>
 8002e94:	2d04      	cmp	r5, #4
 8002e96:	d159      	bne.n	8002f4c <HAL_SPI_TransmitReceive_IT+0xe0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e98:	2900      	cmp	r1, #0
 8002e9a:	d059      	beq.n	8002f50 <HAL_SPI_TransmitReceive_IT+0xe4>
 8002e9c:	2a00      	cmp	r2, #0
 8002e9e:	d057      	beq.n	8002f50 <HAL_SPI_TransmitReceive_IT+0xe4>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d055      	beq.n	8002f50 <HAL_SPI_TransmitReceive_IT+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ea4:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ea8:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002eaa:	2c04      	cmp	r4, #4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eac:	68c1      	ldr	r1, [r0, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002eae:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002eb0:	bf1c      	itt	ne
 8002eb2:	2405      	movne	r4, #5
 8002eb4:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eb8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002ebc:	bf8b      	itete	hi
 8002ebe:	4a27      	ldrhi	r2, [pc, #156]	; (8002f5c <HAL_SPI_TransmitReceive_IT+0xf0>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002ec0:	4a27      	ldrls	r2, [pc, #156]	; (8002f60 <HAL_SPI_TransmitReceive_IT+0xf4>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002ec2:	64c2      	strhi	r2, [r0, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002ec4:	64c2      	strls	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002ec6:	bf8c      	ite	hi
 8002ec8:	4a26      	ldrhi	r2, [pc, #152]	; (8002f64 <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002eca:	4a27      	ldrls	r2, [pc, #156]	; (8002f68 <HAL_SPI_TransmitReceive_IT+0xfc>)
 8002ecc:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ece:	6a82      	ldr	r2, [r0, #40]	; 0x28
  hspi->TxXferSize  = Size;
 8002ed0:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed2:	2400      	movs	r4, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ed4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed8:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 8002eda:	6802      	ldr	r2, [r0, #0]
 8002edc:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ede:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002ee2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ee6:	d12a      	bne.n	8002f3e <HAL_SPI_TransmitReceive_IT+0xd2>
    hspi->CRCSize = 1U;
 8002ee8:	2401      	movs	r4, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8002eea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8002eee:	6484      	str	r4, [r0, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8002ef0:	d803      	bhi.n	8002efa <HAL_SPI_TransmitReceive_IT+0x8e>
 8002ef2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002ef4:	2c02      	cmp	r4, #2
      hspi->CRCSize = 2U;
 8002ef6:	bf08      	it	eq
 8002ef8:	6484      	streq	r4, [r0, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 8002efa:	6814      	ldr	r4, [r2, #0]
 8002efc:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8002f00:	6014      	str	r4, [r2, #0]
 8002f02:	6814      	ldr	r4, [r2, #0]
 8002f04:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8002f08:	6014      	str	r4, [r2, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002f0a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002f0e:	d801      	bhi.n	8002f14 <HAL_SPI_TransmitReceive_IT+0xa8>
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d017      	beq.n	8002f44 <HAL_SPI_TransmitReceive_IT+0xd8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f14:	6853      	ldr	r3, [r2, #4]
 8002f16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f1a:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f1c:	6853      	ldr	r3, [r2, #4]
 8002f1e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002f22:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f24:	6813      	ldr	r3, [r2, #0]
 8002f26:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002f2a:	d113      	bne.n	8002f54 <HAL_SPI_TransmitReceive_IT+0xe8>
    __HAL_SPI_ENABLE(hspi);
 8002f2c:	6811      	ldr	r1, [r2, #0]
 8002f2e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002f32:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8002f34:	2200      	movs	r2, #0
 8002f36:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 8002f3e:	2400      	movs	r4, #0
 8002f40:	6484      	str	r4, [r0, #72]	; 0x48
 8002f42:	e7e2      	b.n	8002f0a <HAL_SPI_TransmitReceive_IT+0x9e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f44:	6853      	ldr	r3, [r2, #4]
 8002f46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f4a:	e7e6      	b.n	8002f1a <HAL_SPI_TransmitReceive_IT+0xae>
    errorcode = HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e7f1      	b.n	8002f34 <HAL_SPI_TransmitReceive_IT+0xc8>
    errorcode = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e7ef      	b.n	8002f34 <HAL_SPI_TransmitReceive_IT+0xc8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e7ed      	b.n	8002f34 <HAL_SPI_TransmitReceive_IT+0xc8>
  __HAL_LOCK(hspi);
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e7ee      	b.n	8002f3a <HAL_SPI_TransmitReceive_IT+0xce>
 8002f5c:	08003455 	.word	0x08003455
 8002f60:	08003345 	.word	0x08003345
 8002f64:	080033ff 	.word	0x080033ff
 8002f68:	080032df 	.word	0x080032df

08002f6c <HAL_SPI_Receive_IT>:
{
 8002f6c:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002f6e:	6886      	ldr	r6, [r0, #8]
{
 8002f70:	4604      	mov	r4, r0
 8002f72:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002f74:	b95e      	cbnz	r6, 8002f8e <HAL_SPI_Receive_IT+0x22>
 8002f76:	6843      	ldr	r3, [r0, #4]
 8002f78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7c:	d107      	bne.n	8002f8e <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f7e:	2304      	movs	r3, #4
 8002f80:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 8002f84:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002f86:	4613      	mov	r3, r2
 8002f88:	460a      	mov	r2, r1
 8002f8a:	f7ff bf6f 	b.w	8002e6c <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 8002f8e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d061      	beq.n	800305a <HAL_SPI_Receive_IT+0xee>
 8002f96:	2301      	movs	r3, #1
 8002f98:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8002f9c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	b2d8      	uxtb	r0, r3
 8002fa4:	d155      	bne.n	8003052 <HAL_SPI_Receive_IT+0xe6>
  if ((pData == NULL) || (Size == 0U))
 8002fa6:	2d00      	cmp	r5, #0
 8002fa8:	d04b      	beq.n	8003042 <HAL_SPI_Receive_IT+0xd6>
 8002faa:	2a00      	cmp	r2, #0
 8002fac:	d049      	beq.n	8003042 <HAL_SPI_Receive_IT+0xd6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fae:	2304      	movs	r3, #4
 8002fb0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fb8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002fba:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 8002fbe:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002fc0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002fc2:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fc4:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fc6:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 8002fc8:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fcc:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fce:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fd0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fd4:	bf8b      	itete	hi
 8002fd6:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fda:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fde:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fe0:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8002fe2:	bf8c      	ite	hi
 8002fe4:	4a1e      	ldrhi	r2, [pc, #120]	; (8003060 <HAL_SPI_Receive_IT+0xf4>)
    hspi->RxISR = SPI_RxISR_8BIT;
 8002fe6:	4a1f      	ldrls	r2, [pc, #124]	; (8003064 <HAL_SPI_Receive_IT+0xf8>)
 8002fe8:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fea:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8002fee:	d107      	bne.n	8003000 <HAL_SPI_Receive_IT+0x94>
    __HAL_SPI_DISABLE(hspi);
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ff6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ffe:	601a      	str	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003000:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003002:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003006:	d121      	bne.n	800304c <HAL_SPI_Receive_IT+0xe0>
    hspi->CRCSize = 1U;
 8003008:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 800300a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 800300e:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8003010:	d803      	bhi.n	800301a <HAL_SPI_Receive_IT+0xae>
 8003012:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003014:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 8003016:	bf08      	it	eq
 8003018:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003028:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003030:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003038:	d10d      	bne.n	8003056 <HAL_SPI_Receive_IT+0xea>
    __HAL_SPI_ENABLE(hspi);
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003040:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8003042:	2300      	movs	r3, #0
 8003044:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003048:	bc70      	pop	{r4, r5, r6}
 800304a:	4770      	bx	lr
    hspi->CRCSize = 0U;
 800304c:	2200      	movs	r2, #0
 800304e:	64a2      	str	r2, [r4, #72]	; 0x48
 8003050:	e7eb      	b.n	800302a <HAL_SPI_Receive_IT+0xbe>
    errorcode = HAL_BUSY;
 8003052:	2002      	movs	r0, #2
 8003054:	e7f5      	b.n	8003042 <HAL_SPI_Receive_IT+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003056:	2000      	movs	r0, #0
 8003058:	e7f3      	b.n	8003042 <HAL_SPI_Receive_IT+0xd6>
  __HAL_LOCK(hspi);
 800305a:	2002      	movs	r0, #2
 800305c:	e7f4      	b.n	8003048 <HAL_SPI_Receive_IT+0xdc>
 800305e:	bf00      	nop
 8003060:	080031fd 	.word	0x080031fd
 8003064:	0800317d 	.word	0x0800317d

08003068 <HAL_SPI_TxRxCpltCallback>:
 8003068:	4770      	bx	lr

0800306a <HAL_SPI_ErrorCallback>:
 800306a:	4770      	bx	lr

0800306c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800306c:	b513      	push	{r0, r1, r4, lr}
 800306e:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003070:	f7fe fc6e 	bl	8001950 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003074:	6821      	ldr	r1, [r4, #0]
 8003076:	684b      	ldr	r3, [r1, #4]
 8003078:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tickstart = HAL_GetTick();
 800307c:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800307e:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003080:	4620      	mov	r0, r4
 8003082:	2164      	movs	r1, #100	; 0x64
 8003084:	f7ff fae9 	bl	800265a <SPI_EndRxTxTransaction>
 8003088:	b118      	cbz	r0, 8003092 <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800308a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800308c:	f043 0320 	orr.w	r3, r3, #32
 8003090:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003092:	68a3      	ldr	r3, [r4, #8]
 8003094:	b933      	cbnz	r3, 80030a4 <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	9201      	str	r2, [sp, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	9301      	str	r3, [sp, #4]
 80030a2:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030aa:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80030ac:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030ae:	b11b      	cbz	r3, 80030b8 <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 80030b0:	f7ff ffdb 	bl	800306a <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80030b4:	b002      	add	sp, #8
 80030b6:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 80030b8:	f7fe faba 	bl	8001630 <HAL_SPI_TxCpltCallback>
}
 80030bc:	e7fa      	b.n	80030b4 <SPI_CloseTx_ISR+0x48>

080030be <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030be:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80030c0:	6803      	ldr	r3, [r0, #0]
 80030c2:	7812      	ldrb	r2, [r2, #0]
 80030c4:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 80030c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80030c8:	3301      	adds	r3, #1
 80030ca:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80030cc:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80030d4:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	b953      	cbnz	r3, 80030f0 <SPI_TxISR_8BIT+0x32>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80030dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80030e0:	bf01      	itttt	eq
 80030e2:	6802      	ldreq	r2, [r0, #0]
 80030e4:	6813      	ldreq	r3, [r2, #0]
 80030e6:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80030ea:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 80030ec:	f7ff bfbe 	b.w	800306c <SPI_CloseTx_ISR>
}
 80030f0:	4770      	bx	lr

080030f2 <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80030f4:	6802      	ldr	r2, [r0, #0]
 80030f6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80030fa:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80030fc:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 80030fe:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003100:	3b01      	subs	r3, #1
 8003102:	b29b      	uxth	r3, r3
 8003104:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003106:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003108:	b29b      	uxth	r3, r3
 800310a:	b94b      	cbnz	r3, 8003120 <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800310c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800310e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003112:	bf02      	ittt	eq
 8003114:	6813      	ldreq	r3, [r2, #0]
 8003116:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800311a:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 800311c:	f7ff bfa6 	b.w	800306c <SPI_CloseTx_ISR>
}
 8003120:	4770      	bx	lr

08003122 <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003122:	6802      	ldr	r2, [r0, #0]
 8003124:	6853      	ldr	r3, [r2, #4]
 8003126:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 800312a:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800312c:	6053      	str	r3, [r2, #4]
{
 800312e:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003130:	f7fe fc0e 	bl	8001950 <HAL_GetTick>
 8003134:	2164      	movs	r1, #100	; 0x64
 8003136:	4602      	mov	r2, r0
 8003138:	4620      	mov	r0, r4
 800313a:	f7ff fa53 	bl	80025e4 <SPI_EndRxTransaction>
 800313e:	b118      	cbz	r0, 8003148 <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003140:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003142:	f043 0320 	orr.w	r3, r3, #32
 8003146:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003148:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800314a:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 800314c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003150:	6893      	ldr	r3, [r2, #8]
 8003152:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003156:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003158:	d009      	beq.n	800316e <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800315a:	f043 0302 	orr.w	r3, r3, #2
 800315e:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003160:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003164:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 8003166:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 8003168:	f7ff ff7f 	bl	800306a <HAL_SPI_ErrorCallback>
}
 800316c:	e004      	b.n	8003178 <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 800316e:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f9      	bne.n	8003168 <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 8003174:	f7fe fa54 	bl	8001620 <HAL_SPI_RxCpltCallback>
}
 8003178:	bd10      	pop	{r4, pc}
	...

0800317c <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800317c:	6802      	ldr	r2, [r0, #0]
 800317e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003180:	7b12      	ldrb	r2, [r2, #12]
 8003182:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003184:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003186:	3301      	adds	r3, #1
 8003188:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800318a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800318e:	3b01      	subs	r3, #1
 8003190:	b29b      	uxth	r3, r3
 8003192:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003196:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	d108      	bne.n	80031b2 <SPI_RxISR_8BIT+0x36>
 80031a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80031a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80031a6:	bf01      	itttt	eq
 80031a8:	6802      	ldreq	r2, [r0, #0]
 80031aa:	6813      	ldreq	r3, [r2, #0]
 80031ac:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80031b0:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 80031b2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	b943      	cbnz	r3, 80031cc <SPI_RxISR_8BIT+0x50>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80031bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c0:	d102      	bne.n	80031c8 <SPI_RxISR_8BIT+0x4c>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 80031c2:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <SPI_RxISR_8BIT+0x54>)
 80031c4:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 80031c6:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 80031c8:	f7ff bfab 	b.w	8003122 <SPI_CloseRx_ISR>
}
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	080031d5 	.word	0x080031d5

080031d4 <SPI_RxISR_8BITCRC>:
{
 80031d4:	b082      	sub	sp, #8
  __IO uint8_t  tmpreg8 = 0;
 80031d6:	2200      	movs	r2, #0
 80031d8:	f88d 2007 	strb.w	r2, [sp, #7]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031dc:	6802      	ldr	r2, [r0, #0]
  tmpreg8 = *ptmpreg8;
 80031de:	7b12      	ldrb	r2, [r2, #12]
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg8);
 80031e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 80031ea:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80031ec:	3a01      	subs	r2, #1
 80031ee:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 80031f0:	b912      	cbnz	r2, 80031f8 <SPI_RxISR_8BITCRC+0x24>
}
 80031f2:	b002      	add	sp, #8
    SPI_CloseRx_ISR(hspi);
 80031f4:	f7ff bf95 	b.w	8003122 <SPI_CloseRx_ISR>
}
 80031f8:	b002      	add	sp, #8
 80031fa:	4770      	bx	lr

080031fc <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80031fc:	6802      	ldr	r2, [r0, #0]
 80031fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003200:	68d1      	ldr	r1, [r2, #12]
 8003202:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003206:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8003208:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800320c:	3b01      	subs	r3, #1
 800320e:	b29b      	uxth	r3, r3
 8003210:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003214:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b01      	cmp	r3, #1
 800321c:	d107      	bne.n	800322e <SPI_RxISR_16BIT+0x32>
 800321e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003224:	bf02      	ittt	eq
 8003226:	6813      	ldreq	r3, [r2, #0]
 8003228:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800322c:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 800322e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003232:	b29b      	uxth	r3, r3
 8003234:	b943      	cbnz	r3, 8003248 <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003236:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323c:	d102      	bne.n	8003244 <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 800323e:	4b03      	ldr	r3, [pc, #12]	; (800324c <SPI_RxISR_16BIT+0x50>)
 8003240:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8003242:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 8003244:	f7ff bf6d 	b.w	8003122 <SPI_CloseRx_ISR>
}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	08003251 	.word	0x08003251

08003250 <SPI_RxISR_16BITCRC>:
{
 8003250:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 8003256:	6803      	ldr	r3, [r0, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 800325c:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003264:	605a      	str	r2, [r3, #4]
}
 8003266:	b002      	add	sp, #8
  SPI_CloseRx_ISR(hspi);
 8003268:	f7ff bf5b 	b.w	8003122 <SPI_CloseRx_ISR>

0800326c <SPI_CloseRxTx_ISR>:
{
 800326c:	b510      	push	{r4, lr}
 800326e:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8003270:	f7fe fb6e 	bl	8001950 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003274:	6821      	ldr	r1, [r4, #0]
 8003276:	684b      	ldr	r3, [r1, #4]
 8003278:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 800327c:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800327e:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003280:	4620      	mov	r0, r4
 8003282:	2164      	movs	r1, #100	; 0x64
 8003284:	f7ff f9e9 	bl	800265a <SPI_EndRxTxTransaction>
 8003288:	b118      	cbz	r0, 8003292 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800328c:	f043 0320 	orr.w	r3, r3, #32
 8003290:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003292:	6822      	ldr	r2, [r4, #0]
 8003294:	6893      	ldr	r3, [r2, #8]
 8003296:	f013 0f10 	tst.w	r3, #16
 800329a:	f04f 0301 	mov.w	r3, #1
 800329e:	d00c      	beq.n	80032ba <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 80032a0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80032a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80032ac:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80032b0:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 80032b2:	4620      	mov	r0, r4
 80032b4:	f7ff fed9 	bl	800306a <HAL_SPI_ErrorCallback>
}
 80032b8:	e00a      	b.n	80032d0 <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80032ba:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80032bc:	b962      	cbnz	r2, 80032d8 <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80032be:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 80032c2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80032c6:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 80032c8:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80032ca:	d102      	bne.n	80032d2 <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 80032cc:	f7fe f9a8 	bl	8001620 <HAL_SPI_RxCpltCallback>
}
 80032d0:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 80032d2:	f7ff fec9 	bl	8003068 <HAL_SPI_TxRxCpltCallback>
 80032d6:	e7fb      	b.n	80032d0 <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 80032d8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 80032dc:	e7e9      	b.n	80032b2 <SPI_CloseRxTx_ISR+0x46>

080032de <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 80032de:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80032e2:	6801      	ldr	r1, [r0, #0]
  if (hspi->TxXferCount >= 2U)
 80032e4:	b292      	uxth	r2, r2
 80032e6:	2a01      	cmp	r2, #1
 80032e8:	d918      	bls.n	800331c <SPI_2linesTxISR_8BIT+0x3e>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ea:	f833 2b02 	ldrh.w	r2, [r3], #2
 80032ee:	60ca      	str	r2, [r1, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f0:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80032f2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80032f4:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 80032fa:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	b9fb      	cbnz	r3, 8003340 <SPI_2linesTxISR_8BIT+0x62>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003300:	6a82      	ldr	r2, [r0, #40]	; 0x28
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003302:	6803      	ldr	r3, [r0, #0]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003304:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003308:	d110      	bne.n	800332c <SPI_2linesTxISR_8BIT+0x4e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003310:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003318:	605a      	str	r2, [r3, #4]
      return;
 800331a:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	730b      	strb	r3, [r1, #12]
    hspi->pTxBuffPtr++;
 8003320:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003322:	3301      	adds	r3, #1
 8003324:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 8003326:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003328:	3b01      	subs	r3, #1
 800332a:	e7e4      	b.n	80032f6 <SPI_2linesTxISR_8BIT+0x18>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003332:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 8003334:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003338:	b29b      	uxth	r3, r3
 800333a:	b90b      	cbnz	r3, 8003340 <SPI_2linesTxISR_8BIT+0x62>
      SPI_CloseRxTx_ISR(hspi);
 800333c:	f7ff bf96 	b.w	800326c <SPI_CloseRxTx_ISR>
}
 8003340:	4770      	bx	lr
	...

08003344 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 8003344:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003348:	6802      	ldr	r2, [r0, #0]
 800334a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  if (hspi->RxXferCount > 1U)
 800334c:	b289      	uxth	r1, r1
 800334e:	2901      	cmp	r1, #1
 8003350:	d922      	bls.n	8003398 <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003352:	68d1      	ldr	r1, [r2, #12]
 8003354:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003358:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800335a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800335e:	3b02      	subs	r3, #2
 8003360:	b29b      	uxth	r3, r3
 8003362:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003366:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800336a:	b29b      	uxth	r3, r3
 800336c:	2b01      	cmp	r3, #1
 800336e:	d103      	bne.n	8003378 <SPI_2linesRxISR_8BIT+0x34>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003370:	6853      	ldr	r3, [r2, #4]
 8003372:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003376:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 8003378:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800337c:	b29b      	uxth	r3, r3
 800337e:	b9fb      	cbnz	r3, 80033c0 <SPI_2linesRxISR_8BIT+0x7c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003380:	6a82      	ldr	r2, [r0, #40]	; 0x28
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003382:	6803      	ldr	r3, [r0, #0]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003384:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003388:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800338a:	d111      	bne.n	80033b0 <SPI_2linesRxISR_8BIT+0x6c>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800338c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003390:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <SPI_2linesRxISR_8BIT+0x80>)
 8003394:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 8003396:	4770      	bx	lr
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003398:	7b12      	ldrb	r2, [r2, #12]
 800339a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800339c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800339e:	3301      	adds	r3, #1
 80033a0:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 80033a2:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 80033ae:	e7e3      	b.n	8003378 <SPI_2linesRxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80033b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033b4:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 80033b6:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	b90b      	cbnz	r3, 80033c0 <SPI_2linesRxISR_8BIT+0x7c>
      SPI_CloseRxTx_ISR(hspi);
 80033bc:	f7ff bf56 	b.w	800326c <SPI_CloseRxTx_ISR>
}
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	080033c9 	.word	0x080033c9

080033c8 <SPI_2linesRxISR_8BITCRC>:
{
 80033c8:	b082      	sub	sp, #8
  __IO uint8_t  tmpreg8 = 0;
 80033ca:	2200      	movs	r2, #0
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033cc:	6801      	ldr	r1, [r0, #0]
  __IO uint8_t  tmpreg8 = 0;
 80033ce:	f88d 2007 	strb.w	r2, [sp, #7]
  tmpreg8 = *ptmpreg8;
 80033d2:	7b0a      	ldrb	r2, [r1, #12]
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	f88d 2007 	strb.w	r2, [sp, #7]
  UNUSED(tmpreg8);
 80033da:	f89d 2007 	ldrb.w	r2, [sp, #7]
  hspi->CRCSize--;
 80033de:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80033e0:	3a01      	subs	r2, #1
 80033e2:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 80033e4:	b94a      	cbnz	r2, 80033fa <SPI_2linesRxISR_8BITCRC+0x32>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80033e6:	684a      	ldr	r2, [r1, #4]
 80033e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033ec:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 80033ee:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	b913      	cbnz	r3, 80033fa <SPI_2linesRxISR_8BITCRC+0x32>
}
 80033f4:	b002      	add	sp, #8
      SPI_CloseRxTx_ISR(hspi);
 80033f6:	f7ff bf39 	b.w	800326c <SPI_CloseRxTx_ISR>
}
 80033fa:	b002      	add	sp, #8
 80033fc:	4770      	bx	lr

080033fe <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033fe:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003400:	6802      	ldr	r2, [r0, #0]
{
 8003402:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003404:	f831 4b02 	ldrh.w	r4, [r1], #2
 8003408:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800340a:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800340c:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800340e:	3901      	subs	r1, #1
 8003410:	b289      	uxth	r1, r1
 8003412:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003414:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8003416:	b289      	uxth	r1, r1
 8003418:	b959      	cbnz	r1, 8003432 <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800341a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800341c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003420:	d10a      	bne.n	8003438 <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003422:	6813      	ldr	r3, [r2, #0]
 8003424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003428:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800342a:	6853      	ldr	r3, [r2, #4]
 800342c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003430:	6053      	str	r3, [r2, #4]
}
 8003432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003436:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003438:	6851      	ldr	r1, [r2, #4]
 800343a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800343e:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 8003440:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f3      	bne.n	8003432 <SPI_2linesTxISR_16BIT+0x34>
}
 800344a:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 800344e:	f7ff bf0d 	b.w	800326c <SPI_CloseRxTx_ISR>
	...

08003454 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003454:	6801      	ldr	r1, [r0, #0]
 8003456:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003458:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800345a:	68cc      	ldr	r4, [r1, #12]
 800345c:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003460:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 8003462:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 8003466:	3a01      	subs	r2, #1
 8003468:	b292      	uxth	r2, r2
 800346a:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 800346e:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 8003472:	b292      	uxth	r2, r2
 8003474:	b92a      	cbnz	r2, 8003482 <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003476:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003478:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800347c:	d104      	bne.n	8003488 <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 800347e:	4a08      	ldr	r2, [pc, #32]	; (80034a0 <SPI_2linesRxISR_16BIT+0x4c>)
 8003480:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 8003482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003486:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003488:	684a      	ldr	r2, [r1, #4]
 800348a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348e:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8003490:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f4      	bne.n	8003482 <SPI_2linesRxISR_16BIT+0x2e>
}
 8003498:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 800349c:	f7ff bee6 	b.w	800326c <SPI_CloseRxTx_ISR>
 80034a0:	080034a5 	.word	0x080034a5

080034a4 <SPI_2linesRxISR_16BITCRC>:
{
 80034a4:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	9301      	str	r3, [sp, #4]
  tmpreg = READ_REG(hspi->Instance->DR);
 80034aa:	6803      	ldr	r3, [r0, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	9201      	str	r2, [sp, #4]
  UNUSED(tmpreg);
 80034b0:	9a01      	ldr	r2, [sp, #4]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b8:	605a      	str	r2, [r3, #4]
}
 80034ba:	b002      	add	sp, #8
  SPI_CloseRxTx_ISR(hspi);
 80034bc:	f7ff bed6 	b.w	800326c <SPI_CloseRxTx_ISR>

080034c0 <HAL_SPI_IRQHandler>:
{
 80034c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80034c2:	6803      	ldr	r3, [r0, #0]
 80034c4:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80034c6:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80034c8:	0656      	lsls	r6, r2, #25
{
 80034ca:	b085      	sub	sp, #20
 80034cc:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80034ce:	ea4f 1192 	mov.w	r1, r2, lsr #6
 80034d2:	f3c2 1780 	ubfx	r7, r2, #6, #1
 80034d6:	d408      	bmi.n	80034ea <HAL_SPI_IRQHandler+0x2a>
 80034d8:	07d6      	lsls	r6, r2, #31
 80034da:	d506      	bpl.n	80034ea <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80034dc:	066e      	lsls	r6, r5, #25
 80034de:	d504      	bpl.n	80034ea <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 80034e0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 80034e2:	b005      	add	sp, #20
 80034e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 80034e8:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80034ea:	0796      	lsls	r6, r2, #30
 80034ec:	d504      	bpl.n	80034f8 <HAL_SPI_IRQHandler+0x38>
 80034ee:	0628      	lsls	r0, r5, #24
 80034f0:	d502      	bpl.n	80034f8 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 80034f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80034f4:	4620      	mov	r0, r4
 80034f6:	e7f4      	b.n	80034e2 <HAL_SPI_IRQHandler+0x22>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80034f8:	ea41 1152 	orr.w	r1, r1, r2, lsr #5
 80034fc:	f3c2 2000 	ubfx	r0, r2, #8, #1
 8003500:	f001 0101 	and.w	r1, r1, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003504:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003506:	ea51 0200 	orrs.w	r2, r1, r0
 800350a:	d057      	beq.n	80035bc <HAL_SPI_IRQHandler+0xfc>
 800350c:	06aa      	lsls	r2, r5, #26
 800350e:	d555      	bpl.n	80035bc <HAL_SPI_IRQHandler+0xfc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003510:	b17f      	cbz	r7, 8003532 <HAL_SPI_IRQHandler+0x72>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003512:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8003516:	2a03      	cmp	r2, #3
 8003518:	f04f 0100 	mov.w	r1, #0
 800351c:	d048      	beq.n	80035b0 <HAL_SPI_IRQHandler+0xf0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800351e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003520:	f042 0204 	orr.w	r2, r2, #4
 8003524:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003526:	9100      	str	r1, [sp, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	9200      	str	r2, [sp, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	9200      	str	r2, [sp, #0]
 8003530:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003532:	07f1      	lsls	r1, r6, #31
 8003534:	d50c      	bpl.n	8003550 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003536:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800353e:	2200      	movs	r2, #0
 8003540:	9202      	str	r2, [sp, #8]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	9202      	str	r2, [sp, #8]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003550:	b140      	cbz	r0, 8003564 <HAL_SPI_IRQHandler+0xa4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003552:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003554:	f042 0208 	orr.w	r2, r2, #8
 8003558:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800355a:	2200      	movs	r2, #0
 800355c:	9203      	str	r2, [sp, #12]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	9203      	str	r2, [sp, #12]
 8003562:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003564:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003566:	b34a      	cbz	r2, 80035bc <HAL_SPI_IRQHandler+0xfc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800356e:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003570:	2201      	movs	r2, #1
 8003572:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003576:	07aa      	lsls	r2, r5, #30
 8003578:	d022      	beq.n	80035c0 <HAL_SPI_IRQHandler+0x100>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800357a:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800357c:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800357e:	f022 0203 	bic.w	r2, r2, #3
 8003582:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003584:	b140      	cbz	r0, 8003598 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003586:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <HAL_SPI_IRQHandler+0x108>)
 8003588:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800358a:	f7fe fa61 	bl	8001a50 <HAL_DMA_Abort_IT>
 800358e:	b118      	cbz	r0, 8003598 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003590:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003596:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003598:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800359a:	b178      	cbz	r0, 80035bc <HAL_SPI_IRQHandler+0xfc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_SPI_IRQHandler+0x108>)
 800359e:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80035a0:	f7fe fa56 	bl	8001a50 <HAL_DMA_Abort_IT>
 80035a4:	b150      	cbz	r0, 80035bc <HAL_SPI_IRQHandler+0xfc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80035a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80035a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ac:	6623      	str	r3, [r4, #96]	; 0x60
 80035ae:	e005      	b.n	80035bc <HAL_SPI_IRQHandler+0xfc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035b0:	9101      	str	r1, [sp, #4]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	9201      	str	r2, [sp, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	9b01      	ldr	r3, [sp, #4]
}
 80035bc:	b005      	add	sp, #20
 80035be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 80035c0:	4620      	mov	r0, r4
 80035c2:	f7ff fd52 	bl	800306a <HAL_SPI_ErrorCallback>
 80035c6:	e7f9      	b.n	80035bc <HAL_SPI_IRQHandler+0xfc>
 80035c8:	080035cd 	.word	0x080035cd

080035cc <SPI_DMAAbortOnError>:
{
 80035cc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80035ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80035d6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80035d8:	f7ff fd47 	bl	800306a <HAL_SPI_ErrorCallback>
}
 80035dc:	bd08      	pop	{r3, pc}

080035de <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80035de:	4770      	bx	lr

080035e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80035e4:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035e6:	6921      	ldr	r1, [r4, #16]
 80035e8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035ea:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035ec:	69c0      	ldr	r0, [r0, #28]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	6961      	ldr	r1, [r4, #20]
 80035f2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035f4:	4992      	ldr	r1, [pc, #584]	; (8003840 <UART_SetConfig+0x260>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035f6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035f8:	4029      	ands	r1, r5
 80035fa:	430a      	orrs	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	68e1      	ldr	r1, [r4, #12]
 8003602:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800360a:	4a8e      	ldr	r2, [pc, #568]	; (8003844 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800360c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800360e:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003610:	bf1c      	itt	ne
 8003612:	6a22      	ldrne	r2, [r4, #32]
 8003614:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003620:	4a89      	ldr	r2, [pc, #548]	; (8003848 <UART_SetConfig+0x268>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d11b      	bne.n	800365e <UART_SetConfig+0x7e>
 8003626:	4b89      	ldr	r3, [pc, #548]	; (800384c <UART_SetConfig+0x26c>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	3b01      	subs	r3, #1
 8003632:	2b02      	cmp	r3, #2
 8003634:	f200 80d5 	bhi.w	80037e2 <UART_SetConfig+0x202>
 8003638:	4a85      	ldr	r2, [pc, #532]	; (8003850 <UART_SetConfig+0x270>)
 800363a:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003640:	f040 809f 	bne.w	8003782 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003644:	2b08      	cmp	r3, #8
 8003646:	d828      	bhi.n	800369a <UART_SetConfig+0xba>
 8003648:	e8df f013 	tbh	[pc, r3, lsl #1]
 800364c:	00ce00df 	.word	0x00ce00df
 8003650:	00270099 	.word	0x00270099
 8003654:	002700d4 	.word	0x002700d4
 8003658:	00270027 	.word	0x00270027
 800365c:	00e3      	.short	0x00e3
  UART_GETCLOCKSOURCE(huart, clocksource);
 800365e:	4a7d      	ldr	r2, [pc, #500]	; (8003854 <UART_SetConfig+0x274>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d108      	bne.n	8003676 <UART_SetConfig+0x96>
 8003664:	4b79      	ldr	r3, [pc, #484]	; (800384c <UART_SetConfig+0x26c>)
 8003666:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800366a:	4b79      	ldr	r3, [pc, #484]	; (8003850 <UART_SetConfig+0x270>)
 800366c:	f002 020c 	and.w	r2, r2, #12
 8003670:	4413      	add	r3, r2
 8003672:	78db      	ldrb	r3, [r3, #3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003674:	e7e2      	b.n	800363c <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003676:	4a78      	ldr	r2, [pc, #480]	; (8003858 <UART_SetConfig+0x278>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d119      	bne.n	80036b0 <UART_SetConfig+0xd0>
 800367c:	4b73      	ldr	r3, [pc, #460]	; (800384c <UART_SetConfig+0x26c>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003686:	2b20      	cmp	r3, #32
 8003688:	f000 80b7 	beq.w	80037fa <UART_SetConfig+0x21a>
 800368c:	d807      	bhi.n	800369e <UART_SetConfig+0xbe>
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80b8 	beq.w	8003804 <UART_SetConfig+0x224>
 8003694:	2b10      	cmp	r3, #16
 8003696:	f000 80aa 	beq.w	80037ee <UART_SetConfig+0x20e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800369a:	2001      	movs	r0, #1
 800369c:	e04e      	b.n	800373c <UART_SetConfig+0x15c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800369e:	2b30      	cmp	r3, #48	; 0x30
 80036a0:	d1fb      	bne.n	800369a <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80036a6:	f000 80b4 	beq.w	8003812 <UART_SetConfig+0x232>
 80036aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80036ae:	e083      	b.n	80037b8 <UART_SetConfig+0x1d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036b0:	4a6a      	ldr	r2, [pc, #424]	; (800385c <UART_SetConfig+0x27c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10f      	bne.n	80036d6 <UART_SetConfig+0xf6>
 80036b6:	4b65      	ldr	r3, [pc, #404]	; (800384c <UART_SetConfig+0x26c>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036c0:	2b80      	cmp	r3, #128	; 0x80
 80036c2:	f000 809a 	beq.w	80037fa <UART_SetConfig+0x21a>
 80036c6:	d804      	bhi.n	80036d2 <UART_SetConfig+0xf2>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 809b 	beq.w	8003804 <UART_SetConfig+0x224>
 80036ce:	2b40      	cmp	r3, #64	; 0x40
 80036d0:	e7e1      	b.n	8003696 <UART_SetConfig+0xb6>
 80036d2:	2bc0      	cmp	r3, #192	; 0xc0
 80036d4:	e7e4      	b.n	80036a0 <UART_SetConfig+0xc0>
 80036d6:	4a62      	ldr	r2, [pc, #392]	; (8003860 <UART_SetConfig+0x280>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d112      	bne.n	8003702 <UART_SetConfig+0x122>
 80036dc:	4b5b      	ldr	r3, [pc, #364]	; (800384c <UART_SetConfig+0x26c>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ea:	f000 8086 	beq.w	80037fa <UART_SetConfig+0x21a>
 80036ee:	d805      	bhi.n	80036fc <UART_SetConfig+0x11c>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 8087 	beq.w	8003804 <UART_SetConfig+0x224>
 80036f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036fa:	e7cc      	b.n	8003696 <UART_SetConfig+0xb6>
 80036fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003700:	e7ce      	b.n	80036a0 <UART_SetConfig+0xc0>
 8003702:	4a50      	ldr	r2, [pc, #320]	; (8003844 <UART_SetConfig+0x264>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d1c8      	bne.n	800369a <UART_SetConfig+0xba>
 8003708:	4b50      	ldr	r3, [pc, #320]	; (800384c <UART_SetConfig+0x26c>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003716:	d015      	beq.n	8003744 <UART_SetConfig+0x164>
 8003718:	d806      	bhi.n	8003728 <UART_SetConfig+0x148>
 800371a:	b15b      	cbz	r3, 8003734 <UART_SetConfig+0x154>
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003720:	d1bb      	bne.n	800369a <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 8003722:	f7fe fafb 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
        break;
 8003726:	e007      	b.n	8003738 <UART_SetConfig+0x158>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003728:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800372c:	d1b5      	bne.n	800369a <UART_SetConfig+0xba>
        pclk = (uint32_t) LSE_VALUE;
 800372e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003732:	e008      	b.n	8003746 <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003734:	f7fe fe6a 	bl	800240c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003738:	b928      	cbnz	r0, 8003746 <UART_SetConfig+0x166>
 800373a:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800373c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800373e:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8003742:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8003744:	4847      	ldr	r0, [pc, #284]	; (8003864 <UART_SetConfig+0x284>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003746:	6862      	ldr	r2, [r4, #4]
 8003748:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800374c:	4283      	cmp	r3, r0
 800374e:	d8a4      	bhi.n	800369a <UART_SetConfig+0xba>
 8003750:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003754:	d8a1      	bhi.n	800369a <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003756:	0851      	lsrs	r1, r2, #1
 8003758:	2500      	movs	r5, #0
 800375a:	468c      	mov	ip, r1
 800375c:	f44f 7680 	mov.w	r6, #256	; 0x100
 8003760:	4629      	mov	r1, r5
 8003762:	fbe0 c106 	umlal	ip, r1, r0, r6
 8003766:	462b      	mov	r3, r5
 8003768:	4660      	mov	r0, ip
 800376a:	f7fc fd89 	bl	8000280 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800376e:	4b3e      	ldr	r3, [pc, #248]	; (8003868 <UART_SetConfig+0x288>)
 8003770:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8003774:	429a      	cmp	r2, r3
 8003776:	d890      	bhi.n	800369a <UART_SetConfig+0xba>
          huart->Instance->BRR = usartdiv;
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	60d8      	str	r0, [r3, #12]
 800377c:	e7dd      	b.n	800373a <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 800377e:	4839      	ldr	r0, [pc, #228]	; (8003864 <UART_SetConfig+0x284>)
 8003780:	e047      	b.n	8003812 <UART_SetConfig+0x232>
    switch (clocksource)
 8003782:	2b08      	cmp	r3, #8
 8003784:	d889      	bhi.n	800369a <UART_SetConfig+0xba>
 8003786:	a201      	add	r2, pc, #4	; (adr r2, 800378c <UART_SetConfig+0x1ac>)
 8003788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378c:	080037b1 	.word	0x080037b1
 8003790:	080037d7 	.word	0x080037d7
 8003794:	08003801 	.word	0x08003801
 8003798:	0800369b 	.word	0x0800369b
 800379c:	080037dd 	.word	0x080037dd
 80037a0:	0800369b 	.word	0x0800369b
 80037a4:	0800369b 	.word	0x0800369b
 80037a8:	0800369b 	.word	0x0800369b
 80037ac:	080036ab 	.word	0x080036ab
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b0:	f7fe fe2c 	bl	800240c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d0c0      	beq.n	800373a <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037b8:	6862      	ldr	r2, [r4, #4]
 80037ba:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80037be:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80037c6:	f1a3 0110 	sub.w	r1, r3, #16
 80037ca:	4291      	cmp	r1, r2
 80037cc:	f63f af65 	bhi.w	800369a <UART_SetConfig+0xba>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037d0:	6822      	ldr	r2, [r4, #0]
 80037d2:	60d3      	str	r3, [r2, #12]
 80037d4:	e7b1      	b.n	800373a <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80037d6:	f7fe fe2b 	bl	8002430 <HAL_RCC_GetPCLK2Freq>
        break;
 80037da:	e7eb      	b.n	80037b4 <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 80037dc:	f7fe fa9e 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
        break;
 80037e0:	e7e8      	b.n	80037b4 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80037e6:	d1f6      	bne.n	80037d6 <UART_SetConfig+0x1f6>
        pclk = HAL_RCC_GetPCLK2Freq();
 80037e8:	f7fe fe22 	bl	8002430 <HAL_RCC_GetPCLK2Freq>
        break;
 80037ec:	e00f      	b.n	800380e <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80037f2:	d1f3      	bne.n	80037dc <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetSysClockFreq();
 80037f4:	f7fe fa92 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
        break;
 80037f8:	e009      	b.n	800380e <UART_SetConfig+0x22e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037fa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80037fe:	d0be      	beq.n	800377e <UART_SetConfig+0x19e>
        pclk = (uint32_t) HSI_VALUE;
 8003800:	4818      	ldr	r0, [pc, #96]	; (8003864 <UART_SetConfig+0x284>)
 8003802:	e7d9      	b.n	80037b8 <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003804:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003808:	d1d2      	bne.n	80037b0 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800380a:	f7fe fdff 	bl	800240c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800380e:	2800      	cmp	r0, #0
 8003810:	d093      	beq.n	800373a <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003812:	6862      	ldr	r2, [r4, #4]
 8003814:	0853      	lsrs	r3, r2, #1
 8003816:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800381a:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800381e:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003822:	f1a0 0210 	sub.w	r2, r0, #16
 8003826:	429a      	cmp	r2, r3
 8003828:	f63f af37 	bhi.w	800369a <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800382c:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8003830:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003832:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003834:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8003838:	4318      	orrs	r0, r3
 800383a:	60d0      	str	r0, [r2, #12]
 800383c:	e77d      	b.n	800373a <UART_SetConfig+0x15a>
 800383e:	bf00      	nop
 8003840:	efff69f3 	.word	0xefff69f3
 8003844:	40008000 	.word	0x40008000
 8003848:	40013800 	.word	0x40013800
 800384c:	40021000 	.word	0x40021000
 8003850:	080052d8 	.word	0x080052d8
 8003854:	40004400 	.word	0x40004400
 8003858:	40004800 	.word	0x40004800
 800385c:	40004c00 	.word	0x40004c00
 8003860:	40005000 	.word	0x40005000
 8003864:	00f42400 	.word	0x00f42400
 8003868:	000ffcff 	.word	0x000ffcff

0800386c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800386c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800386e:	07da      	lsls	r2, r3, #31
{
 8003870:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003872:	d506      	bpl.n	8003882 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003874:	6801      	ldr	r1, [r0, #0]
 8003876:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003878:	684a      	ldr	r2, [r1, #4]
 800387a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800387e:	4322      	orrs	r2, r4
 8003880:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003882:	079c      	lsls	r4, r3, #30
 8003884:	d506      	bpl.n	8003894 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003886:	6801      	ldr	r1, [r0, #0]
 8003888:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800388a:	684a      	ldr	r2, [r1, #4]
 800388c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003890:	4322      	orrs	r2, r4
 8003892:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003894:	0759      	lsls	r1, r3, #29
 8003896:	d506      	bpl.n	80038a6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003898:	6801      	ldr	r1, [r0, #0]
 800389a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800389c:	684a      	ldr	r2, [r1, #4]
 800389e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038a2:	4322      	orrs	r2, r4
 80038a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038a6:	071a      	lsls	r2, r3, #28
 80038a8:	d506      	bpl.n	80038b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038aa:	6801      	ldr	r1, [r0, #0]
 80038ac:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80038ae:	684a      	ldr	r2, [r1, #4]
 80038b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038b4:	4322      	orrs	r2, r4
 80038b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038b8:	06dc      	lsls	r4, r3, #27
 80038ba:	d506      	bpl.n	80038ca <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038bc:	6801      	ldr	r1, [r0, #0]
 80038be:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80038c0:	688a      	ldr	r2, [r1, #8]
 80038c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038c6:	4322      	orrs	r2, r4
 80038c8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ca:	0699      	lsls	r1, r3, #26
 80038cc:	d506      	bpl.n	80038dc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ce:	6801      	ldr	r1, [r0, #0]
 80038d0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80038d2:	688a      	ldr	r2, [r1, #8]
 80038d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038d8:	4322      	orrs	r2, r4
 80038da:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038dc:	065a      	lsls	r2, r3, #25
 80038de:	d50f      	bpl.n	8003900 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038e0:	6801      	ldr	r1, [r0, #0]
 80038e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80038e4:	684a      	ldr	r2, [r1, #4]
 80038e6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80038ea:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038f0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038f2:	d105      	bne.n	8003900 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f4:	684a      	ldr	r2, [r1, #4]
 80038f6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80038f8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80038fc:	4322      	orrs	r2, r4
 80038fe:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003900:	061b      	lsls	r3, r3, #24
 8003902:	d506      	bpl.n	8003912 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003904:	6802      	ldr	r2, [r0, #0]
 8003906:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003908:	6853      	ldr	r3, [r2, #4]
 800390a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800390e:	430b      	orrs	r3, r1
 8003910:	6053      	str	r3, [r2, #4]
  }
}
 8003912:	bd10      	pop	{r4, pc}

08003914 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003918:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800391c:	4604      	mov	r4, r0
 800391e:	460e      	mov	r6, r1
 8003920:	4615      	mov	r5, r2
 8003922:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003924:	6822      	ldr	r2, [r4, #0]
 8003926:	69d3      	ldr	r3, [r2, #28]
 8003928:	ea36 0303 	bics.w	r3, r6, r3
 800392c:	bf0c      	ite	eq
 800392e:	2301      	moveq	r3, #1
 8003930:	2300      	movne	r3, #0
 8003932:	42ab      	cmp	r3, r5
 8003934:	d001      	beq.n	800393a <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003936:	2000      	movs	r0, #0
 8003938:	e025      	b.n	8003986 <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 800393a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800393e:	d0f2      	beq.n	8003926 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003940:	f7fe f806 	bl	8001950 <HAL_GetTick>
 8003944:	1bc0      	subs	r0, r0, r7
 8003946:	4540      	cmp	r0, r8
 8003948:	6820      	ldr	r0, [r4, #0]
 800394a:	d802      	bhi.n	8003952 <UART_WaitOnFlagUntilTimeout+0x3e>
 800394c:	f1b8 0f00 	cmp.w	r8, #0
 8003950:	d11b      	bne.n	800398a <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003956:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395a:	e840 3200 	strex	r2, r3, [r0]
 800395e:	2a00      	cmp	r2, #0
 8003960:	d1f7      	bne.n	8003952 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	f100 0308 	add.w	r3, r0, #8
 8003966:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	f100 0108 	add.w	r1, r0, #8
 8003972:	e841 3200 	strex	r2, r3, [r1]
 8003976:	2a00      	cmp	r2, #0
 8003978:	d1f3      	bne.n	8003962 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 800397a:	2320      	movs	r3, #32
 800397c:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800397e:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8003980:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8003984:	2003      	movs	r0, #3
}
 8003986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800398a:	6803      	ldr	r3, [r0, #0]
 800398c:	075a      	lsls	r2, r3, #29
 800398e:	d5c9      	bpl.n	8003924 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003990:	69c3      	ldr	r3, [r0, #28]
 8003992:	051b      	lsls	r3, r3, #20
 8003994:	d5c6      	bpl.n	8003924 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003996:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800399a:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	e840 3200 	strex	r2, r3, [r0]
 80039a8:	2a00      	cmp	r2, #0
 80039aa:	d1f7      	bne.n	800399c <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	f100 0308 	add.w	r3, r0, #8
 80039b0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	f100 0108 	add.w	r1, r0, #8
 80039bc:	e841 3200 	strex	r2, r3, [r1]
 80039c0:	2a00      	cmp	r2, #0
 80039c2:	d1f3      	bne.n	80039ac <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 80039c4:	2320      	movs	r3, #32
 80039c6:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039c8:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039ca:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80039ce:	e7d7      	b.n	8003980 <UART_WaitOnFlagUntilTimeout+0x6c>

080039d0 <HAL_UART_Transmit>:
{
 80039d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80039d4:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80039d6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80039d8:	2b20      	cmp	r3, #32
{
 80039da:	4604      	mov	r4, r0
 80039dc:	460e      	mov	r6, r1
 80039de:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80039e0:	d14e      	bne.n	8003a80 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80039e2:	2900      	cmp	r1, #0
 80039e4:	d04a      	beq.n	8003a7c <HAL_UART_Transmit+0xac>
 80039e6:	2a00      	cmp	r2, #0
 80039e8:	d048      	beq.n	8003a7c <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80039ea:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d046      	beq.n	8003a80 <HAL_UART_Transmit+0xb0>
 80039f2:	2301      	movs	r3, #1
 80039f4:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f8:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039fa:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fc:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a00:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8003a02:	f7fd ffa5 	bl	8001950 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a06:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8003a08:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003a10:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8003a12:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a16:	d103      	bne.n	8003a20 <HAL_UART_Transmit+0x50>
 8003a18:	6922      	ldr	r2, [r4, #16]
 8003a1a:	b90a      	cbnz	r2, 8003a20 <HAL_UART_Transmit+0x50>
 8003a1c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003a1e:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8003a20:	2200      	movs	r2, #0
 8003a22:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8003a26:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a2a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003a2e:	b292      	uxth	r2, r2
 8003a30:	b93a      	cbnz	r2, 8003a42 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a32:	2140      	movs	r1, #64	; 0x40
 8003a34:	4620      	mov	r0, r4
 8003a36:	f7ff ff6d 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 8003a3a:	b950      	cbnz	r0, 8003a52 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8003a3c:	2320      	movs	r3, #32
 8003a3e:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8003a40:	e008      	b.n	8003a54 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a42:	2200      	movs	r2, #0
 8003a44:	2180      	movs	r1, #128	; 0x80
 8003a46:	4620      	mov	r0, r4
 8003a48:	9303      	str	r3, [sp, #12]
 8003a4a:	f7ff ff63 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 8003a4e:	9b03      	ldr	r3, [sp, #12]
 8003a50:	b118      	cbz	r0, 8003a5a <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8003a52:	2003      	movs	r0, #3
}
 8003a54:	b004      	add	sp, #16
 8003a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a5a:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8003a5c:	b95e      	cbnz	r6, 8003a76 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a5e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8003a62:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a66:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8003a68:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003a6c:	3a01      	subs	r2, #1
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8003a74:	e7d7      	b.n	8003a26 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a76:	f816 2b01 	ldrb.w	r2, [r6], #1
 8003a7a:	e7f4      	b.n	8003a66 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	e7e9      	b.n	8003a54 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8003a80:	2002      	movs	r0, #2
 8003a82:	e7e7      	b.n	8003a54 <HAL_UART_Transmit+0x84>

08003a84 <UART_CheckIdleState>:
{
 8003a84:	b530      	push	{r4, r5, lr}
 8003a86:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a88:	2500      	movs	r5, #0
{
 8003a8a:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a8c:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8003a90:	f7fd ff5e 	bl	8001950 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a94:	6822      	ldr	r2, [r4, #0]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8003a9a:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a9c:	d415      	bmi.n	8003aca <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	0752      	lsls	r2, r2, #29
 8003aa4:	d509      	bpl.n	8003aba <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aa6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003aaa:	9200      	str	r2, [sp, #0]
 8003aac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f7ff ff2e 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 8003ab8:	b9a0      	cbnz	r0, 8003ae4 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8003aba:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003abe:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003ac0:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac6:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8003ac8:	e00d      	b.n	8003ae6 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aca:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003ace:	9200      	str	r2, [sp, #0]
 8003ad0:	9003      	str	r0, [sp, #12]
 8003ad2:	462a      	mov	r2, r5
 8003ad4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f7ff ff1b 	bl	8003914 <UART_WaitOnFlagUntilTimeout>
 8003ade:	9b03      	ldr	r3, [sp, #12]
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d0dc      	beq.n	8003a9e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003ae4:	2003      	movs	r0, #3
}
 8003ae6:	b005      	add	sp, #20
 8003ae8:	bd30      	pop	{r4, r5, pc}

08003aea <HAL_UART_Init>:
{
 8003aea:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003aec:	4604      	mov	r4, r0
 8003aee:	b340      	cbz	r0, 8003b42 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003af0:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003af2:	b91b      	cbnz	r3, 8003afc <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003af4:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8003af8:	f7ff fd71 	bl	80035de <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003afc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003afe:	2324      	movs	r3, #36	; 0x24
 8003b00:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f7ff fd68 	bl	80035e0 <UART_SetConfig>
 8003b10:	2801      	cmp	r0, #1
 8003b12:	d016      	beq.n	8003b42 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b16:	b113      	cbz	r3, 8003b1e <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f7ff fea7 	bl	800386c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b2e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003b36:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003b38:	601a      	str	r2, [r3, #0]
}
 8003b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003b3e:	f7ff bfa1 	b.w	8003a84 <UART_CheckIdleState>
}
 8003b42:	2001      	movs	r0, #1
 8003b44:	bd10      	pop	{r4, pc}
	...

08003b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b4c:	f7fd fe9a 	bl	8001884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003b50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003b52:	e003      	b.n	8003b5c <LoopCopyDataInit>

08003b54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003b56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b5a:	3104      	adds	r1, #4

08003b5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b5c:	480a      	ldr	r0, [pc, #40]	; (8003b88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003b60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b64:	d3f6      	bcc.n	8003b54 <CopyDataInit>
	ldr	r2, =_sbss
 8003b66:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b68:	e002      	b.n	8003b70 <LoopFillZerobss>

08003b6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b6c:	f842 3b04 	str.w	r3, [r2], #4

08003b70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b70:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <LoopForever+0x16>)
	cmp	r2, r3
 8003b72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b74:	d3f9      	bcc.n	8003b6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b76:	f000 f861 	bl	8003c3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b7a:	f7fc fd03 	bl	8000584 <main>

08003b7e <LoopForever>:

LoopForever:
    b LoopForever
 8003b7e:	e7fe      	b.n	8003b7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b80:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003b84:	08005c90 	.word	0x08005c90
	ldr	r0, =_sdata
 8003b88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b8c:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8003b90:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8003b94:	20000d04 	.word	0x20000d04

08003b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b98:	e7fe      	b.n	8003b98 <ADC1_2_IRQHandler>

08003b9a <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	4770      	bx	lr

08003b9e <_kill>:

int _kill(int pid, int sig)
{
 8003b9e:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003ba0:	f000 f846 	bl	8003c30 <__errno>
 8003ba4:	2316      	movs	r3, #22
 8003ba6:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bac:	bd08      	pop	{r3, pc}

08003bae <_exit>:

void _exit (int status)
{
 8003bae:	b508      	push	{r3, lr}
	errno = EINVAL;
 8003bb0:	f000 f83e 	bl	8003c30 <__errno>
 8003bb4:	2316      	movs	r3, #22
 8003bb6:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003bb8:	e7fe      	b.n	8003bb8 <_exit+0xa>

08003bba <_read>:
}

int _read (int file, char *ptr, int len)
{
 8003bba:	b510      	push	{r4, lr}
 8003bbc:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 8003bbe:	f3af 8000 	nop.w
 8003bc2:	7020      	strb	r0, [r4, #0]

	return 1;
}
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	bd10      	pop	{r4, pc}

08003bc8 <_write>:

int _write(int file, char *ptr, int len)
{
 8003bc8:	b570      	push	{r4, r5, r6, lr}
 8003bca:	460d      	mov	r5, r1
 8003bcc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bce:	460e      	mov	r6, r1
 8003bd0:	1b73      	subs	r3, r6, r5
 8003bd2:	429c      	cmp	r4, r3
 8003bd4:	dc01      	bgt.n	8003bda <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8003bda:	f816 0b01 	ldrb.w	r0, [r6], #1
 8003bde:	f7fc fe1f 	bl	8000820 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be2:	e7f5      	b.n	8003bd0 <_write+0x8>

08003be4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003be4:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <_sbrk+0x2c>)
 8003be6:	6811      	ldr	r1, [r2, #0]
{
 8003be8:	b508      	push	{r3, lr}
 8003bea:	4603      	mov	r3, r0
	if (heap_end == 0)
 8003bec:	b909      	cbnz	r1, 8003bf2 <_sbrk+0xe>
		heap_end = &end;
 8003bee:	4909      	ldr	r1, [pc, #36]	; (8003c14 <_sbrk+0x30>)
 8003bf0:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8003bf2:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003bf4:	4669      	mov	r1, sp
 8003bf6:	4403      	add	r3, r0
 8003bf8:	428b      	cmp	r3, r1
 8003bfa:	d906      	bls.n	8003c0a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003bfc:	f000 f818 	bl	8003c30 <__errno>
 8003c00:	230c      	movs	r3, #12
 8003c02:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003c08:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8003c0a:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8003c0c:	e7fc      	b.n	8003c08 <_sbrk+0x24>
 8003c0e:	bf00      	nop
 8003c10:	20000cec 	.word	0x20000cec
 8003c14:	20000d08 	.word	0x20000d08

08003c18 <_close>:

int _close(int file)
{
	return -1;
}
 8003c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c1c:	4770      	bx	lr

08003c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c22:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003c24:	2000      	movs	r0, #0
 8003c26:	4770      	bx	lr

08003c28 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003c28:	2001      	movs	r0, #1
 8003c2a:	4770      	bx	lr

08003c2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	4770      	bx	lr

08003c30 <__errno>:
 8003c30:	4b01      	ldr	r3, [pc, #4]	; (8003c38 <__errno+0x8>)
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	20000024 	.word	0x20000024

08003c3c <__libc_init_array>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	4d0d      	ldr	r5, [pc, #52]	; (8003c74 <__libc_init_array+0x38>)
 8003c40:	4c0d      	ldr	r4, [pc, #52]	; (8003c78 <__libc_init_array+0x3c>)
 8003c42:	1b64      	subs	r4, r4, r5
 8003c44:	10a4      	asrs	r4, r4, #2
 8003c46:	2600      	movs	r6, #0
 8003c48:	42a6      	cmp	r6, r4
 8003c4a:	d109      	bne.n	8003c60 <__libc_init_array+0x24>
 8003c4c:	4d0b      	ldr	r5, [pc, #44]	; (8003c7c <__libc_init_array+0x40>)
 8003c4e:	4c0c      	ldr	r4, [pc, #48]	; (8003c80 <__libc_init_array+0x44>)
 8003c50:	f001 fb12 	bl	8005278 <_init>
 8003c54:	1b64      	subs	r4, r4, r5
 8003c56:	10a4      	asrs	r4, r4, #2
 8003c58:	2600      	movs	r6, #0
 8003c5a:	42a6      	cmp	r6, r4
 8003c5c:	d105      	bne.n	8003c6a <__libc_init_array+0x2e>
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c64:	4798      	blx	r3
 8003c66:	3601      	adds	r6, #1
 8003c68:	e7ee      	b.n	8003c48 <__libc_init_array+0xc>
 8003c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6e:	4798      	blx	r3
 8003c70:	3601      	adds	r6, #1
 8003c72:	e7f2      	b.n	8003c5a <__libc_init_array+0x1e>
 8003c74:	08005c80 	.word	0x08005c80
 8003c78:	08005c80 	.word	0x08005c80
 8003c7c:	08005c80 	.word	0x08005c80
 8003c80:	08005c84 	.word	0x08005c84

08003c84 <memcpy>:
 8003c84:	440a      	add	r2, r1
 8003c86:	4291      	cmp	r1, r2
 8003c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003c8c:	d100      	bne.n	8003c90 <memcpy+0xc>
 8003c8e:	4770      	bx	lr
 8003c90:	b510      	push	{r4, lr}
 8003c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c9a:	4291      	cmp	r1, r2
 8003c9c:	d1f9      	bne.n	8003c92 <memcpy+0xe>
 8003c9e:	bd10      	pop	{r4, pc}

08003ca0 <memset>:
 8003ca0:	4402      	add	r2, r0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d100      	bne.n	8003caa <memset+0xa>
 8003ca8:	4770      	bx	lr
 8003caa:	f803 1b01 	strb.w	r1, [r3], #1
 8003cae:	e7f9      	b.n	8003ca4 <memset+0x4>

08003cb0 <iprintf>:
 8003cb0:	b40f      	push	{r0, r1, r2, r3}
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <iprintf+0x2c>)
 8003cb4:	b513      	push	{r0, r1, r4, lr}
 8003cb6:	681c      	ldr	r4, [r3, #0]
 8003cb8:	b124      	cbz	r4, 8003cc4 <iprintf+0x14>
 8003cba:	69a3      	ldr	r3, [r4, #24]
 8003cbc:	b913      	cbnz	r3, 8003cc4 <iprintf+0x14>
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f000 fb2a 	bl	8004318 <__sinit>
 8003cc4:	ab05      	add	r3, sp, #20
 8003cc6:	9a04      	ldr	r2, [sp, #16]
 8003cc8:	68a1      	ldr	r1, [r4, #8]
 8003cca:	9301      	str	r3, [sp, #4]
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f000 fea9 	bl	8004a24 <_vfiprintf_r>
 8003cd2:	b002      	add	sp, #8
 8003cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd8:	b004      	add	sp, #16
 8003cda:	4770      	bx	lr
 8003cdc:	20000024 	.word	0x20000024

08003ce0 <_puts_r>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	460e      	mov	r6, r1
 8003ce4:	4605      	mov	r5, r0
 8003ce6:	b118      	cbz	r0, 8003cf0 <_puts_r+0x10>
 8003ce8:	6983      	ldr	r3, [r0, #24]
 8003cea:	b90b      	cbnz	r3, 8003cf0 <_puts_r+0x10>
 8003cec:	f000 fb14 	bl	8004318 <__sinit>
 8003cf0:	69ab      	ldr	r3, [r5, #24]
 8003cf2:	68ac      	ldr	r4, [r5, #8]
 8003cf4:	b913      	cbnz	r3, 8003cfc <_puts_r+0x1c>
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f000 fb0e 	bl	8004318 <__sinit>
 8003cfc:	4b2c      	ldr	r3, [pc, #176]	; (8003db0 <_puts_r+0xd0>)
 8003cfe:	429c      	cmp	r4, r3
 8003d00:	d120      	bne.n	8003d44 <_puts_r+0x64>
 8003d02:	686c      	ldr	r4, [r5, #4]
 8003d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d06:	07db      	lsls	r3, r3, #31
 8003d08:	d405      	bmi.n	8003d16 <_puts_r+0x36>
 8003d0a:	89a3      	ldrh	r3, [r4, #12]
 8003d0c:	0598      	lsls	r0, r3, #22
 8003d0e:	d402      	bmi.n	8003d16 <_puts_r+0x36>
 8003d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d12:	f000 fbb1 	bl	8004478 <__retarget_lock_acquire_recursive>
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	0719      	lsls	r1, r3, #28
 8003d1a:	d51d      	bpl.n	8003d58 <_puts_r+0x78>
 8003d1c:	6923      	ldr	r3, [r4, #16]
 8003d1e:	b1db      	cbz	r3, 8003d58 <_puts_r+0x78>
 8003d20:	3e01      	subs	r6, #1
 8003d22:	68a3      	ldr	r3, [r4, #8]
 8003d24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	60a3      	str	r3, [r4, #8]
 8003d2c:	bb39      	cbnz	r1, 8003d7e <_puts_r+0x9e>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	da38      	bge.n	8003da4 <_puts_r+0xc4>
 8003d32:	4622      	mov	r2, r4
 8003d34:	210a      	movs	r1, #10
 8003d36:	4628      	mov	r0, r5
 8003d38:	f000 f8f6 	bl	8003f28 <__swbuf_r>
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d011      	beq.n	8003d64 <_puts_r+0x84>
 8003d40:	250a      	movs	r5, #10
 8003d42:	e011      	b.n	8003d68 <_puts_r+0x88>
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <_puts_r+0xd4>)
 8003d46:	429c      	cmp	r4, r3
 8003d48:	d101      	bne.n	8003d4e <_puts_r+0x6e>
 8003d4a:	68ac      	ldr	r4, [r5, #8]
 8003d4c:	e7da      	b.n	8003d04 <_puts_r+0x24>
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <_puts_r+0xd8>)
 8003d50:	429c      	cmp	r4, r3
 8003d52:	bf08      	it	eq
 8003d54:	68ec      	ldreq	r4, [r5, #12]
 8003d56:	e7d5      	b.n	8003d04 <_puts_r+0x24>
 8003d58:	4621      	mov	r1, r4
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f000 f936 	bl	8003fcc <__swsetup_r>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	d0dd      	beq.n	8003d20 <_puts_r+0x40>
 8003d64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d6a:	07da      	lsls	r2, r3, #31
 8003d6c:	d405      	bmi.n	8003d7a <_puts_r+0x9a>
 8003d6e:	89a3      	ldrh	r3, [r4, #12]
 8003d70:	059b      	lsls	r3, r3, #22
 8003d72:	d402      	bmi.n	8003d7a <_puts_r+0x9a>
 8003d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d76:	f000 fb80 	bl	800447a <__retarget_lock_release_recursive>
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	bd70      	pop	{r4, r5, r6, pc}
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	da04      	bge.n	8003d8c <_puts_r+0xac>
 8003d82:	69a2      	ldr	r2, [r4, #24]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	dc06      	bgt.n	8003d96 <_puts_r+0xb6>
 8003d88:	290a      	cmp	r1, #10
 8003d8a:	d004      	beq.n	8003d96 <_puts_r+0xb6>
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	6022      	str	r2, [r4, #0]
 8003d92:	7019      	strb	r1, [r3, #0]
 8003d94:	e7c5      	b.n	8003d22 <_puts_r+0x42>
 8003d96:	4622      	mov	r2, r4
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f000 f8c5 	bl	8003f28 <__swbuf_r>
 8003d9e:	3001      	adds	r0, #1
 8003da0:	d1bf      	bne.n	8003d22 <_puts_r+0x42>
 8003da2:	e7df      	b.n	8003d64 <_puts_r+0x84>
 8003da4:	6823      	ldr	r3, [r4, #0]
 8003da6:	250a      	movs	r5, #10
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	6022      	str	r2, [r4, #0]
 8003dac:	701d      	strb	r5, [r3, #0]
 8003dae:	e7db      	b.n	8003d68 <_puts_r+0x88>
 8003db0:	08005c04 	.word	0x08005c04
 8003db4:	08005c24 	.word	0x08005c24
 8003db8:	08005be4 	.word	0x08005be4

08003dbc <puts>:
 8003dbc:	4b02      	ldr	r3, [pc, #8]	; (8003dc8 <puts+0xc>)
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	f7ff bf8d 	b.w	8003ce0 <_puts_r>
 8003dc6:	bf00      	nop
 8003dc8:	20000024 	.word	0x20000024

08003dcc <siprintf>:
 8003dcc:	b40e      	push	{r1, r2, r3}
 8003dce:	b500      	push	{lr}
 8003dd0:	b09c      	sub	sp, #112	; 0x70
 8003dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8003dd4:	9002      	str	r0, [sp, #8]
 8003dd6:	9006      	str	r0, [sp, #24]
 8003dd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ddc:	4809      	ldr	r0, [pc, #36]	; (8003e04 <siprintf+0x38>)
 8003dde:	9107      	str	r1, [sp, #28]
 8003de0:	9104      	str	r1, [sp, #16]
 8003de2:	4909      	ldr	r1, [pc, #36]	; (8003e08 <siprintf+0x3c>)
 8003de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003de8:	9105      	str	r1, [sp, #20]
 8003dea:	6800      	ldr	r0, [r0, #0]
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	a902      	add	r1, sp, #8
 8003df0:	f000 fcee 	bl	80047d0 <_svfiprintf_r>
 8003df4:	9b02      	ldr	r3, [sp, #8]
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	b01c      	add	sp, #112	; 0x70
 8003dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e00:	b003      	add	sp, #12
 8003e02:	4770      	bx	lr
 8003e04:	20000024 	.word	0x20000024
 8003e08:	ffff0208 	.word	0xffff0208

08003e0c <strcpy>:
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e12:	f803 2b01 	strb.w	r2, [r3], #1
 8003e16:	2a00      	cmp	r2, #0
 8003e18:	d1f9      	bne.n	8003e0e <strcpy+0x2>
 8003e1a:	4770      	bx	lr

08003e1c <strncpy>:
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	3901      	subs	r1, #1
 8003e20:	4603      	mov	r3, r0
 8003e22:	b132      	cbz	r2, 8003e32 <strncpy+0x16>
 8003e24:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003e28:	f803 4b01 	strb.w	r4, [r3], #1
 8003e2c:	3a01      	subs	r2, #1
 8003e2e:	2c00      	cmp	r4, #0
 8003e30:	d1f7      	bne.n	8003e22 <strncpy+0x6>
 8003e32:	441a      	add	r2, r3
 8003e34:	2100      	movs	r1, #0
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d100      	bne.n	8003e3c <strncpy+0x20>
 8003e3a:	bd10      	pop	{r4, pc}
 8003e3c:	f803 1b01 	strb.w	r1, [r3], #1
 8003e40:	e7f9      	b.n	8003e36 <strncpy+0x1a>

08003e42 <strstr>:
 8003e42:	780a      	ldrb	r2, [r1, #0]
 8003e44:	b570      	push	{r4, r5, r6, lr}
 8003e46:	b96a      	cbnz	r2, 8003e64 <strstr+0x22>
 8003e48:	bd70      	pop	{r4, r5, r6, pc}
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d109      	bne.n	8003e62 <strstr+0x20>
 8003e4e:	460c      	mov	r4, r1
 8003e50:	4605      	mov	r5, r0
 8003e52:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f6      	beq.n	8003e48 <strstr+0x6>
 8003e5a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003e5e:	429e      	cmp	r6, r3
 8003e60:	d0f7      	beq.n	8003e52 <strstr+0x10>
 8003e62:	3001      	adds	r0, #1
 8003e64:	7803      	ldrb	r3, [r0, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1ef      	bne.n	8003e4a <strstr+0x8>
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	e7ec      	b.n	8003e48 <strstr+0x6>
	...

08003e70 <strtok>:
 8003e70:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <strtok+0x5c>)
 8003e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e74:	681e      	ldr	r6, [r3, #0]
 8003e76:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003e78:	4605      	mov	r5, r0
 8003e7a:	b9fc      	cbnz	r4, 8003ebc <strtok+0x4c>
 8003e7c:	2050      	movs	r0, #80	; 0x50
 8003e7e:	9101      	str	r1, [sp, #4]
 8003e80:	f000 fb62 	bl	8004548 <malloc>
 8003e84:	9901      	ldr	r1, [sp, #4]
 8003e86:	65b0      	str	r0, [r6, #88]	; 0x58
 8003e88:	4602      	mov	r2, r0
 8003e8a:	b920      	cbnz	r0, 8003e96 <strtok+0x26>
 8003e8c:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <strtok+0x60>)
 8003e8e:	4811      	ldr	r0, [pc, #68]	; (8003ed4 <strtok+0x64>)
 8003e90:	2157      	movs	r1, #87	; 0x57
 8003e92:	f000 f909 	bl	80040a8 <__assert_func>
 8003e96:	e9c0 4400 	strd	r4, r4, [r0]
 8003e9a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003e9e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003ea2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003ea6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003eaa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003eae:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003eb2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003eb6:	6184      	str	r4, [r0, #24]
 8003eb8:	7704      	strb	r4, [r0, #28]
 8003eba:	6244      	str	r4, [r0, #36]	; 0x24
 8003ebc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	b002      	add	sp, #8
 8003ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ec8:	f000 b806 	b.w	8003ed8 <__strtok_r>
 8003ecc:	20000024 	.word	0x20000024
 8003ed0:	08005b34 	.word	0x08005b34
 8003ed4:	08005b4b 	.word	0x08005b4b

08003ed8 <__strtok_r>:
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eda:	b908      	cbnz	r0, 8003ee0 <__strtok_r+0x8>
 8003edc:	6810      	ldr	r0, [r2, #0]
 8003ede:	b188      	cbz	r0, 8003f04 <__strtok_r+0x2c>
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003ee8:	460f      	mov	r7, r1
 8003eea:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003eee:	b91e      	cbnz	r6, 8003ef8 <__strtok_r+0x20>
 8003ef0:	b965      	cbnz	r5, 8003f0c <__strtok_r+0x34>
 8003ef2:	6015      	str	r5, [r2, #0]
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	e005      	b.n	8003f04 <__strtok_r+0x2c>
 8003ef8:	42b5      	cmp	r5, r6
 8003efa:	d1f6      	bne.n	8003eea <__strtok_r+0x12>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <__strtok_r+0xa>
 8003f00:	6014      	str	r4, [r2, #0]
 8003f02:	7003      	strb	r3, [r0, #0]
 8003f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f06:	461c      	mov	r4, r3
 8003f08:	e00c      	b.n	8003f24 <__strtok_r+0x4c>
 8003f0a:	b915      	cbnz	r5, 8003f12 <__strtok_r+0x3a>
 8003f0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003f10:	460e      	mov	r6, r1
 8003f12:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003f16:	42ab      	cmp	r3, r5
 8003f18:	d1f7      	bne.n	8003f0a <__strtok_r+0x32>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f3      	beq.n	8003f06 <__strtok_r+0x2e>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003f24:	6014      	str	r4, [r2, #0]
 8003f26:	e7ed      	b.n	8003f04 <__strtok_r+0x2c>

08003f28 <__swbuf_r>:
 8003f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2a:	460e      	mov	r6, r1
 8003f2c:	4614      	mov	r4, r2
 8003f2e:	4605      	mov	r5, r0
 8003f30:	b118      	cbz	r0, 8003f3a <__swbuf_r+0x12>
 8003f32:	6983      	ldr	r3, [r0, #24]
 8003f34:	b90b      	cbnz	r3, 8003f3a <__swbuf_r+0x12>
 8003f36:	f000 f9ef 	bl	8004318 <__sinit>
 8003f3a:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <__swbuf_r+0x98>)
 8003f3c:	429c      	cmp	r4, r3
 8003f3e:	d12b      	bne.n	8003f98 <__swbuf_r+0x70>
 8003f40:	686c      	ldr	r4, [r5, #4]
 8003f42:	69a3      	ldr	r3, [r4, #24]
 8003f44:	60a3      	str	r3, [r4, #8]
 8003f46:	89a3      	ldrh	r3, [r4, #12]
 8003f48:	071a      	lsls	r2, r3, #28
 8003f4a:	d52f      	bpl.n	8003fac <__swbuf_r+0x84>
 8003f4c:	6923      	ldr	r3, [r4, #16]
 8003f4e:	b36b      	cbz	r3, 8003fac <__swbuf_r+0x84>
 8003f50:	6923      	ldr	r3, [r4, #16]
 8003f52:	6820      	ldr	r0, [r4, #0]
 8003f54:	1ac0      	subs	r0, r0, r3
 8003f56:	6963      	ldr	r3, [r4, #20]
 8003f58:	b2f6      	uxtb	r6, r6
 8003f5a:	4283      	cmp	r3, r0
 8003f5c:	4637      	mov	r7, r6
 8003f5e:	dc04      	bgt.n	8003f6a <__swbuf_r+0x42>
 8003f60:	4621      	mov	r1, r4
 8003f62:	4628      	mov	r0, r5
 8003f64:	f000 f944 	bl	80041f0 <_fflush_r>
 8003f68:	bb30      	cbnz	r0, 8003fb8 <__swbuf_r+0x90>
 8003f6a:	68a3      	ldr	r3, [r4, #8]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	60a3      	str	r3, [r4, #8]
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	6022      	str	r2, [r4, #0]
 8003f76:	701e      	strb	r6, [r3, #0]
 8003f78:	6963      	ldr	r3, [r4, #20]
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	4283      	cmp	r3, r0
 8003f7e:	d004      	beq.n	8003f8a <__swbuf_r+0x62>
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	07db      	lsls	r3, r3, #31
 8003f84:	d506      	bpl.n	8003f94 <__swbuf_r+0x6c>
 8003f86:	2e0a      	cmp	r6, #10
 8003f88:	d104      	bne.n	8003f94 <__swbuf_r+0x6c>
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	f000 f92f 	bl	80041f0 <_fflush_r>
 8003f92:	b988      	cbnz	r0, 8003fb8 <__swbuf_r+0x90>
 8003f94:	4638      	mov	r0, r7
 8003f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <__swbuf_r+0x9c>)
 8003f9a:	429c      	cmp	r4, r3
 8003f9c:	d101      	bne.n	8003fa2 <__swbuf_r+0x7a>
 8003f9e:	68ac      	ldr	r4, [r5, #8]
 8003fa0:	e7cf      	b.n	8003f42 <__swbuf_r+0x1a>
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <__swbuf_r+0xa0>)
 8003fa4:	429c      	cmp	r4, r3
 8003fa6:	bf08      	it	eq
 8003fa8:	68ec      	ldreq	r4, [r5, #12]
 8003faa:	e7ca      	b.n	8003f42 <__swbuf_r+0x1a>
 8003fac:	4621      	mov	r1, r4
 8003fae:	4628      	mov	r0, r5
 8003fb0:	f000 f80c 	bl	8003fcc <__swsetup_r>
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	d0cb      	beq.n	8003f50 <__swbuf_r+0x28>
 8003fb8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003fbc:	e7ea      	b.n	8003f94 <__swbuf_r+0x6c>
 8003fbe:	bf00      	nop
 8003fc0:	08005c04 	.word	0x08005c04
 8003fc4:	08005c24 	.word	0x08005c24
 8003fc8:	08005be4 	.word	0x08005be4

08003fcc <__swsetup_r>:
 8003fcc:	4b32      	ldr	r3, [pc, #200]	; (8004098 <__swsetup_r+0xcc>)
 8003fce:	b570      	push	{r4, r5, r6, lr}
 8003fd0:	681d      	ldr	r5, [r3, #0]
 8003fd2:	4606      	mov	r6, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	b125      	cbz	r5, 8003fe2 <__swsetup_r+0x16>
 8003fd8:	69ab      	ldr	r3, [r5, #24]
 8003fda:	b913      	cbnz	r3, 8003fe2 <__swsetup_r+0x16>
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f000 f99b 	bl	8004318 <__sinit>
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	; (800409c <__swsetup_r+0xd0>)
 8003fe4:	429c      	cmp	r4, r3
 8003fe6:	d10f      	bne.n	8004008 <__swsetup_r+0x3c>
 8003fe8:	686c      	ldr	r4, [r5, #4]
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ff0:	0719      	lsls	r1, r3, #28
 8003ff2:	d42c      	bmi.n	800404e <__swsetup_r+0x82>
 8003ff4:	06dd      	lsls	r5, r3, #27
 8003ff6:	d411      	bmi.n	800401c <__swsetup_r+0x50>
 8003ff8:	2309      	movs	r3, #9
 8003ffa:	6033      	str	r3, [r6, #0]
 8003ffc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004000:	81a3      	strh	r3, [r4, #12]
 8004002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004006:	e03e      	b.n	8004086 <__swsetup_r+0xba>
 8004008:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <__swsetup_r+0xd4>)
 800400a:	429c      	cmp	r4, r3
 800400c:	d101      	bne.n	8004012 <__swsetup_r+0x46>
 800400e:	68ac      	ldr	r4, [r5, #8]
 8004010:	e7eb      	b.n	8003fea <__swsetup_r+0x1e>
 8004012:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <__swsetup_r+0xd8>)
 8004014:	429c      	cmp	r4, r3
 8004016:	bf08      	it	eq
 8004018:	68ec      	ldreq	r4, [r5, #12]
 800401a:	e7e6      	b.n	8003fea <__swsetup_r+0x1e>
 800401c:	0758      	lsls	r0, r3, #29
 800401e:	d512      	bpl.n	8004046 <__swsetup_r+0x7a>
 8004020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004022:	b141      	cbz	r1, 8004036 <__swsetup_r+0x6a>
 8004024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004028:	4299      	cmp	r1, r3
 800402a:	d002      	beq.n	8004032 <__swsetup_r+0x66>
 800402c:	4630      	mov	r0, r6
 800402e:	f000 fa93 	bl	8004558 <_free_r>
 8004032:	2300      	movs	r3, #0
 8004034:	6363      	str	r3, [r4, #52]	; 0x34
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800403c:	81a3      	strh	r3, [r4, #12]
 800403e:	2300      	movs	r3, #0
 8004040:	6063      	str	r3, [r4, #4]
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	89a3      	ldrh	r3, [r4, #12]
 8004048:	f043 0308 	orr.w	r3, r3, #8
 800404c:	81a3      	strh	r3, [r4, #12]
 800404e:	6923      	ldr	r3, [r4, #16]
 8004050:	b94b      	cbnz	r3, 8004066 <__swsetup_r+0x9a>
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800405c:	d003      	beq.n	8004066 <__swsetup_r+0x9a>
 800405e:	4621      	mov	r1, r4
 8004060:	4630      	mov	r0, r6
 8004062:	f000 fa31 	bl	80044c8 <__smakebuf_r>
 8004066:	89a0      	ldrh	r0, [r4, #12]
 8004068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800406c:	f010 0301 	ands.w	r3, r0, #1
 8004070:	d00a      	beq.n	8004088 <__swsetup_r+0xbc>
 8004072:	2300      	movs	r3, #0
 8004074:	60a3      	str	r3, [r4, #8]
 8004076:	6963      	ldr	r3, [r4, #20]
 8004078:	425b      	negs	r3, r3
 800407a:	61a3      	str	r3, [r4, #24]
 800407c:	6923      	ldr	r3, [r4, #16]
 800407e:	b943      	cbnz	r3, 8004092 <__swsetup_r+0xc6>
 8004080:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004084:	d1ba      	bne.n	8003ffc <__swsetup_r+0x30>
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	0781      	lsls	r1, r0, #30
 800408a:	bf58      	it	pl
 800408c:	6963      	ldrpl	r3, [r4, #20]
 800408e:	60a3      	str	r3, [r4, #8]
 8004090:	e7f4      	b.n	800407c <__swsetup_r+0xb0>
 8004092:	2000      	movs	r0, #0
 8004094:	e7f7      	b.n	8004086 <__swsetup_r+0xba>
 8004096:	bf00      	nop
 8004098:	20000024 	.word	0x20000024
 800409c:	08005c04 	.word	0x08005c04
 80040a0:	08005c24 	.word	0x08005c24
 80040a4:	08005be4 	.word	0x08005be4

080040a8 <__assert_func>:
 80040a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040aa:	4614      	mov	r4, r2
 80040ac:	461a      	mov	r2, r3
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <__assert_func+0x2c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4605      	mov	r5, r0
 80040b4:	68d8      	ldr	r0, [r3, #12]
 80040b6:	b14c      	cbz	r4, 80040cc <__assert_func+0x24>
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <__assert_func+0x30>)
 80040ba:	9100      	str	r1, [sp, #0]
 80040bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80040c0:	4906      	ldr	r1, [pc, #24]	; (80040dc <__assert_func+0x34>)
 80040c2:	462b      	mov	r3, r5
 80040c4:	f000 f9a6 	bl	8004414 <fiprintf>
 80040c8:	f000 ffd6 	bl	8005078 <abort>
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <__assert_func+0x38>)
 80040ce:	461c      	mov	r4, r3
 80040d0:	e7f3      	b.n	80040ba <__assert_func+0x12>
 80040d2:	bf00      	nop
 80040d4:	20000024 	.word	0x20000024
 80040d8:	08005ba8 	.word	0x08005ba8
 80040dc:	08005bb5 	.word	0x08005bb5
 80040e0:	080059bd 	.word	0x080059bd

080040e4 <__sflush_r>:
 80040e4:	898a      	ldrh	r2, [r1, #12]
 80040e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ea:	4605      	mov	r5, r0
 80040ec:	0710      	lsls	r0, r2, #28
 80040ee:	460c      	mov	r4, r1
 80040f0:	d458      	bmi.n	80041a4 <__sflush_r+0xc0>
 80040f2:	684b      	ldr	r3, [r1, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	dc05      	bgt.n	8004104 <__sflush_r+0x20>
 80040f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	dc02      	bgt.n	8004104 <__sflush_r+0x20>
 80040fe:	2000      	movs	r0, #0
 8004100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004106:	2e00      	cmp	r6, #0
 8004108:	d0f9      	beq.n	80040fe <__sflush_r+0x1a>
 800410a:	2300      	movs	r3, #0
 800410c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004110:	682f      	ldr	r7, [r5, #0]
 8004112:	602b      	str	r3, [r5, #0]
 8004114:	d032      	beq.n	800417c <__sflush_r+0x98>
 8004116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	075a      	lsls	r2, r3, #29
 800411c:	d505      	bpl.n	800412a <__sflush_r+0x46>
 800411e:	6863      	ldr	r3, [r4, #4]
 8004120:	1ac0      	subs	r0, r0, r3
 8004122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004124:	b10b      	cbz	r3, 800412a <__sflush_r+0x46>
 8004126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004128:	1ac0      	subs	r0, r0, r3
 800412a:	2300      	movs	r3, #0
 800412c:	4602      	mov	r2, r0
 800412e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004130:	6a21      	ldr	r1, [r4, #32]
 8004132:	4628      	mov	r0, r5
 8004134:	47b0      	blx	r6
 8004136:	1c43      	adds	r3, r0, #1
 8004138:	89a3      	ldrh	r3, [r4, #12]
 800413a:	d106      	bne.n	800414a <__sflush_r+0x66>
 800413c:	6829      	ldr	r1, [r5, #0]
 800413e:	291d      	cmp	r1, #29
 8004140:	d82c      	bhi.n	800419c <__sflush_r+0xb8>
 8004142:	4a2a      	ldr	r2, [pc, #168]	; (80041ec <__sflush_r+0x108>)
 8004144:	40ca      	lsrs	r2, r1
 8004146:	07d6      	lsls	r6, r2, #31
 8004148:	d528      	bpl.n	800419c <__sflush_r+0xb8>
 800414a:	2200      	movs	r2, #0
 800414c:	6062      	str	r2, [r4, #4]
 800414e:	04d9      	lsls	r1, r3, #19
 8004150:	6922      	ldr	r2, [r4, #16]
 8004152:	6022      	str	r2, [r4, #0]
 8004154:	d504      	bpl.n	8004160 <__sflush_r+0x7c>
 8004156:	1c42      	adds	r2, r0, #1
 8004158:	d101      	bne.n	800415e <__sflush_r+0x7a>
 800415a:	682b      	ldr	r3, [r5, #0]
 800415c:	b903      	cbnz	r3, 8004160 <__sflush_r+0x7c>
 800415e:	6560      	str	r0, [r4, #84]	; 0x54
 8004160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004162:	602f      	str	r7, [r5, #0]
 8004164:	2900      	cmp	r1, #0
 8004166:	d0ca      	beq.n	80040fe <__sflush_r+0x1a>
 8004168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800416c:	4299      	cmp	r1, r3
 800416e:	d002      	beq.n	8004176 <__sflush_r+0x92>
 8004170:	4628      	mov	r0, r5
 8004172:	f000 f9f1 	bl	8004558 <_free_r>
 8004176:	2000      	movs	r0, #0
 8004178:	6360      	str	r0, [r4, #52]	; 0x34
 800417a:	e7c1      	b.n	8004100 <__sflush_r+0x1c>
 800417c:	6a21      	ldr	r1, [r4, #32]
 800417e:	2301      	movs	r3, #1
 8004180:	4628      	mov	r0, r5
 8004182:	47b0      	blx	r6
 8004184:	1c41      	adds	r1, r0, #1
 8004186:	d1c7      	bne.n	8004118 <__sflush_r+0x34>
 8004188:	682b      	ldr	r3, [r5, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0c4      	beq.n	8004118 <__sflush_r+0x34>
 800418e:	2b1d      	cmp	r3, #29
 8004190:	d001      	beq.n	8004196 <__sflush_r+0xb2>
 8004192:	2b16      	cmp	r3, #22
 8004194:	d101      	bne.n	800419a <__sflush_r+0xb6>
 8004196:	602f      	str	r7, [r5, #0]
 8004198:	e7b1      	b.n	80040fe <__sflush_r+0x1a>
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a0:	81a3      	strh	r3, [r4, #12]
 80041a2:	e7ad      	b.n	8004100 <__sflush_r+0x1c>
 80041a4:	690f      	ldr	r7, [r1, #16]
 80041a6:	2f00      	cmp	r7, #0
 80041a8:	d0a9      	beq.n	80040fe <__sflush_r+0x1a>
 80041aa:	0793      	lsls	r3, r2, #30
 80041ac:	680e      	ldr	r6, [r1, #0]
 80041ae:	bf08      	it	eq
 80041b0:	694b      	ldreq	r3, [r1, #20]
 80041b2:	600f      	str	r7, [r1, #0]
 80041b4:	bf18      	it	ne
 80041b6:	2300      	movne	r3, #0
 80041b8:	eba6 0807 	sub.w	r8, r6, r7
 80041bc:	608b      	str	r3, [r1, #8]
 80041be:	f1b8 0f00 	cmp.w	r8, #0
 80041c2:	dd9c      	ble.n	80040fe <__sflush_r+0x1a>
 80041c4:	6a21      	ldr	r1, [r4, #32]
 80041c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041c8:	4643      	mov	r3, r8
 80041ca:	463a      	mov	r2, r7
 80041cc:	4628      	mov	r0, r5
 80041ce:	47b0      	blx	r6
 80041d0:	2800      	cmp	r0, #0
 80041d2:	dc06      	bgt.n	80041e2 <__sflush_r+0xfe>
 80041d4:	89a3      	ldrh	r3, [r4, #12]
 80041d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041da:	81a3      	strh	r3, [r4, #12]
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041e0:	e78e      	b.n	8004100 <__sflush_r+0x1c>
 80041e2:	4407      	add	r7, r0
 80041e4:	eba8 0800 	sub.w	r8, r8, r0
 80041e8:	e7e9      	b.n	80041be <__sflush_r+0xda>
 80041ea:	bf00      	nop
 80041ec:	20400001 	.word	0x20400001

080041f0 <_fflush_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	690b      	ldr	r3, [r1, #16]
 80041f4:	4605      	mov	r5, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	b913      	cbnz	r3, 8004200 <_fflush_r+0x10>
 80041fa:	2500      	movs	r5, #0
 80041fc:	4628      	mov	r0, r5
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
 8004200:	b118      	cbz	r0, 800420a <_fflush_r+0x1a>
 8004202:	6983      	ldr	r3, [r0, #24]
 8004204:	b90b      	cbnz	r3, 800420a <_fflush_r+0x1a>
 8004206:	f000 f887 	bl	8004318 <__sinit>
 800420a:	4b14      	ldr	r3, [pc, #80]	; (800425c <_fflush_r+0x6c>)
 800420c:	429c      	cmp	r4, r3
 800420e:	d11b      	bne.n	8004248 <_fflush_r+0x58>
 8004210:	686c      	ldr	r4, [r5, #4]
 8004212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0ef      	beq.n	80041fa <_fflush_r+0xa>
 800421a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800421c:	07d0      	lsls	r0, r2, #31
 800421e:	d404      	bmi.n	800422a <_fflush_r+0x3a>
 8004220:	0599      	lsls	r1, r3, #22
 8004222:	d402      	bmi.n	800422a <_fflush_r+0x3a>
 8004224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004226:	f000 f927 	bl	8004478 <__retarget_lock_acquire_recursive>
 800422a:	4628      	mov	r0, r5
 800422c:	4621      	mov	r1, r4
 800422e:	f7ff ff59 	bl	80040e4 <__sflush_r>
 8004232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004234:	07da      	lsls	r2, r3, #31
 8004236:	4605      	mov	r5, r0
 8004238:	d4e0      	bmi.n	80041fc <_fflush_r+0xc>
 800423a:	89a3      	ldrh	r3, [r4, #12]
 800423c:	059b      	lsls	r3, r3, #22
 800423e:	d4dd      	bmi.n	80041fc <_fflush_r+0xc>
 8004240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004242:	f000 f91a 	bl	800447a <__retarget_lock_release_recursive>
 8004246:	e7d9      	b.n	80041fc <_fflush_r+0xc>
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <_fflush_r+0x70>)
 800424a:	429c      	cmp	r4, r3
 800424c:	d101      	bne.n	8004252 <_fflush_r+0x62>
 800424e:	68ac      	ldr	r4, [r5, #8]
 8004250:	e7df      	b.n	8004212 <_fflush_r+0x22>
 8004252:	4b04      	ldr	r3, [pc, #16]	; (8004264 <_fflush_r+0x74>)
 8004254:	429c      	cmp	r4, r3
 8004256:	bf08      	it	eq
 8004258:	68ec      	ldreq	r4, [r5, #12]
 800425a:	e7da      	b.n	8004212 <_fflush_r+0x22>
 800425c:	08005c04 	.word	0x08005c04
 8004260:	08005c24 	.word	0x08005c24
 8004264:	08005be4 	.word	0x08005be4

08004268 <std>:
 8004268:	2300      	movs	r3, #0
 800426a:	b510      	push	{r4, lr}
 800426c:	4604      	mov	r4, r0
 800426e:	e9c0 3300 	strd	r3, r3, [r0]
 8004272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004276:	6083      	str	r3, [r0, #8]
 8004278:	8181      	strh	r1, [r0, #12]
 800427a:	6643      	str	r3, [r0, #100]	; 0x64
 800427c:	81c2      	strh	r2, [r0, #14]
 800427e:	6183      	str	r3, [r0, #24]
 8004280:	4619      	mov	r1, r3
 8004282:	2208      	movs	r2, #8
 8004284:	305c      	adds	r0, #92	; 0x5c
 8004286:	f7ff fd0b 	bl	8003ca0 <memset>
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <std+0x38>)
 800428c:	6263      	str	r3, [r4, #36]	; 0x24
 800428e:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <std+0x3c>)
 8004290:	62a3      	str	r3, [r4, #40]	; 0x28
 8004292:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <std+0x40>)
 8004294:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <std+0x44>)
 8004298:	6224      	str	r4, [r4, #32]
 800429a:	6323      	str	r3, [r4, #48]	; 0x30
 800429c:	bd10      	pop	{r4, pc}
 800429e:	bf00      	nop
 80042a0:	08004fcd 	.word	0x08004fcd
 80042a4:	08004fef 	.word	0x08004fef
 80042a8:	08005027 	.word	0x08005027
 80042ac:	0800504b 	.word	0x0800504b

080042b0 <_cleanup_r>:
 80042b0:	4901      	ldr	r1, [pc, #4]	; (80042b8 <_cleanup_r+0x8>)
 80042b2:	f000 b8c1 	b.w	8004438 <_fwalk_reent>
 80042b6:	bf00      	nop
 80042b8:	080041f1 	.word	0x080041f1

080042bc <__sfmoreglue>:
 80042bc:	b570      	push	{r4, r5, r6, lr}
 80042be:	2268      	movs	r2, #104	; 0x68
 80042c0:	1e4d      	subs	r5, r1, #1
 80042c2:	4355      	muls	r5, r2
 80042c4:	460e      	mov	r6, r1
 80042c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042ca:	f000 f9b1 	bl	8004630 <_malloc_r>
 80042ce:	4604      	mov	r4, r0
 80042d0:	b140      	cbz	r0, 80042e4 <__sfmoreglue+0x28>
 80042d2:	2100      	movs	r1, #0
 80042d4:	e9c0 1600 	strd	r1, r6, [r0]
 80042d8:	300c      	adds	r0, #12
 80042da:	60a0      	str	r0, [r4, #8]
 80042dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042e0:	f7ff fcde 	bl	8003ca0 <memset>
 80042e4:	4620      	mov	r0, r4
 80042e6:	bd70      	pop	{r4, r5, r6, pc}

080042e8 <__sfp_lock_acquire>:
 80042e8:	4801      	ldr	r0, [pc, #4]	; (80042f0 <__sfp_lock_acquire+0x8>)
 80042ea:	f000 b8c5 	b.w	8004478 <__retarget_lock_acquire_recursive>
 80042ee:	bf00      	nop
 80042f0:	20000cf5 	.word	0x20000cf5

080042f4 <__sfp_lock_release>:
 80042f4:	4801      	ldr	r0, [pc, #4]	; (80042fc <__sfp_lock_release+0x8>)
 80042f6:	f000 b8c0 	b.w	800447a <__retarget_lock_release_recursive>
 80042fa:	bf00      	nop
 80042fc:	20000cf5 	.word	0x20000cf5

08004300 <__sinit_lock_acquire>:
 8004300:	4801      	ldr	r0, [pc, #4]	; (8004308 <__sinit_lock_acquire+0x8>)
 8004302:	f000 b8b9 	b.w	8004478 <__retarget_lock_acquire_recursive>
 8004306:	bf00      	nop
 8004308:	20000cf6 	.word	0x20000cf6

0800430c <__sinit_lock_release>:
 800430c:	4801      	ldr	r0, [pc, #4]	; (8004314 <__sinit_lock_release+0x8>)
 800430e:	f000 b8b4 	b.w	800447a <__retarget_lock_release_recursive>
 8004312:	bf00      	nop
 8004314:	20000cf6 	.word	0x20000cf6

08004318 <__sinit>:
 8004318:	b510      	push	{r4, lr}
 800431a:	4604      	mov	r4, r0
 800431c:	f7ff fff0 	bl	8004300 <__sinit_lock_acquire>
 8004320:	69a3      	ldr	r3, [r4, #24]
 8004322:	b11b      	cbz	r3, 800432c <__sinit+0x14>
 8004324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004328:	f7ff bff0 	b.w	800430c <__sinit_lock_release>
 800432c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004330:	6523      	str	r3, [r4, #80]	; 0x50
 8004332:	4b13      	ldr	r3, [pc, #76]	; (8004380 <__sinit+0x68>)
 8004334:	4a13      	ldr	r2, [pc, #76]	; (8004384 <__sinit+0x6c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	62a2      	str	r2, [r4, #40]	; 0x28
 800433a:	42a3      	cmp	r3, r4
 800433c:	bf04      	itt	eq
 800433e:	2301      	moveq	r3, #1
 8004340:	61a3      	streq	r3, [r4, #24]
 8004342:	4620      	mov	r0, r4
 8004344:	f000 f820 	bl	8004388 <__sfp>
 8004348:	6060      	str	r0, [r4, #4]
 800434a:	4620      	mov	r0, r4
 800434c:	f000 f81c 	bl	8004388 <__sfp>
 8004350:	60a0      	str	r0, [r4, #8]
 8004352:	4620      	mov	r0, r4
 8004354:	f000 f818 	bl	8004388 <__sfp>
 8004358:	2200      	movs	r2, #0
 800435a:	60e0      	str	r0, [r4, #12]
 800435c:	2104      	movs	r1, #4
 800435e:	6860      	ldr	r0, [r4, #4]
 8004360:	f7ff ff82 	bl	8004268 <std>
 8004364:	68a0      	ldr	r0, [r4, #8]
 8004366:	2201      	movs	r2, #1
 8004368:	2109      	movs	r1, #9
 800436a:	f7ff ff7d 	bl	8004268 <std>
 800436e:	68e0      	ldr	r0, [r4, #12]
 8004370:	2202      	movs	r2, #2
 8004372:	2112      	movs	r1, #18
 8004374:	f7ff ff78 	bl	8004268 <std>
 8004378:	2301      	movs	r3, #1
 800437a:	61a3      	str	r3, [r4, #24]
 800437c:	e7d2      	b.n	8004324 <__sinit+0xc>
 800437e:	bf00      	nop
 8004380:	08005b30 	.word	0x08005b30
 8004384:	080042b1 	.word	0x080042b1

08004388 <__sfp>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	4607      	mov	r7, r0
 800438c:	f7ff ffac 	bl	80042e8 <__sfp_lock_acquire>
 8004390:	4b1e      	ldr	r3, [pc, #120]	; (800440c <__sfp+0x84>)
 8004392:	681e      	ldr	r6, [r3, #0]
 8004394:	69b3      	ldr	r3, [r6, #24]
 8004396:	b913      	cbnz	r3, 800439e <__sfp+0x16>
 8004398:	4630      	mov	r0, r6
 800439a:	f7ff ffbd 	bl	8004318 <__sinit>
 800439e:	3648      	adds	r6, #72	; 0x48
 80043a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043a4:	3b01      	subs	r3, #1
 80043a6:	d503      	bpl.n	80043b0 <__sfp+0x28>
 80043a8:	6833      	ldr	r3, [r6, #0]
 80043aa:	b30b      	cbz	r3, 80043f0 <__sfp+0x68>
 80043ac:	6836      	ldr	r6, [r6, #0]
 80043ae:	e7f7      	b.n	80043a0 <__sfp+0x18>
 80043b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043b4:	b9d5      	cbnz	r5, 80043ec <__sfp+0x64>
 80043b6:	4b16      	ldr	r3, [pc, #88]	; (8004410 <__sfp+0x88>)
 80043b8:	60e3      	str	r3, [r4, #12]
 80043ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043be:	6665      	str	r5, [r4, #100]	; 0x64
 80043c0:	f000 f859 	bl	8004476 <__retarget_lock_init_recursive>
 80043c4:	f7ff ff96 	bl	80042f4 <__sfp_lock_release>
 80043c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043d0:	6025      	str	r5, [r4, #0]
 80043d2:	61a5      	str	r5, [r4, #24]
 80043d4:	2208      	movs	r2, #8
 80043d6:	4629      	mov	r1, r5
 80043d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043dc:	f7ff fc60 	bl	8003ca0 <memset>
 80043e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043e8:	4620      	mov	r0, r4
 80043ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ec:	3468      	adds	r4, #104	; 0x68
 80043ee:	e7d9      	b.n	80043a4 <__sfp+0x1c>
 80043f0:	2104      	movs	r1, #4
 80043f2:	4638      	mov	r0, r7
 80043f4:	f7ff ff62 	bl	80042bc <__sfmoreglue>
 80043f8:	4604      	mov	r4, r0
 80043fa:	6030      	str	r0, [r6, #0]
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d1d5      	bne.n	80043ac <__sfp+0x24>
 8004400:	f7ff ff78 	bl	80042f4 <__sfp_lock_release>
 8004404:	230c      	movs	r3, #12
 8004406:	603b      	str	r3, [r7, #0]
 8004408:	e7ee      	b.n	80043e8 <__sfp+0x60>
 800440a:	bf00      	nop
 800440c:	08005b30 	.word	0x08005b30
 8004410:	ffff0001 	.word	0xffff0001

08004414 <fiprintf>:
 8004414:	b40e      	push	{r1, r2, r3}
 8004416:	b503      	push	{r0, r1, lr}
 8004418:	4601      	mov	r1, r0
 800441a:	ab03      	add	r3, sp, #12
 800441c:	4805      	ldr	r0, [pc, #20]	; (8004434 <fiprintf+0x20>)
 800441e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004422:	6800      	ldr	r0, [r0, #0]
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	f000 fafd 	bl	8004a24 <_vfiprintf_r>
 800442a:	b002      	add	sp, #8
 800442c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004430:	b003      	add	sp, #12
 8004432:	4770      	bx	lr
 8004434:	20000024 	.word	0x20000024

08004438 <_fwalk_reent>:
 8004438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800443c:	4606      	mov	r6, r0
 800443e:	4688      	mov	r8, r1
 8004440:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004444:	2700      	movs	r7, #0
 8004446:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800444a:	f1b9 0901 	subs.w	r9, r9, #1
 800444e:	d505      	bpl.n	800445c <_fwalk_reent+0x24>
 8004450:	6824      	ldr	r4, [r4, #0]
 8004452:	2c00      	cmp	r4, #0
 8004454:	d1f7      	bne.n	8004446 <_fwalk_reent+0xe>
 8004456:	4638      	mov	r0, r7
 8004458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800445c:	89ab      	ldrh	r3, [r5, #12]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d907      	bls.n	8004472 <_fwalk_reent+0x3a>
 8004462:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004466:	3301      	adds	r3, #1
 8004468:	d003      	beq.n	8004472 <_fwalk_reent+0x3a>
 800446a:	4629      	mov	r1, r5
 800446c:	4630      	mov	r0, r6
 800446e:	47c0      	blx	r8
 8004470:	4307      	orrs	r7, r0
 8004472:	3568      	adds	r5, #104	; 0x68
 8004474:	e7e9      	b.n	800444a <_fwalk_reent+0x12>

08004476 <__retarget_lock_init_recursive>:
 8004476:	4770      	bx	lr

08004478 <__retarget_lock_acquire_recursive>:
 8004478:	4770      	bx	lr

0800447a <__retarget_lock_release_recursive>:
 800447a:	4770      	bx	lr

0800447c <__swhatbuf_r>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	460e      	mov	r6, r1
 8004480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004484:	2900      	cmp	r1, #0
 8004486:	b096      	sub	sp, #88	; 0x58
 8004488:	4614      	mov	r4, r2
 800448a:	461d      	mov	r5, r3
 800448c:	da08      	bge.n	80044a0 <__swhatbuf_r+0x24>
 800448e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	602a      	str	r2, [r5, #0]
 8004496:	061a      	lsls	r2, r3, #24
 8004498:	d410      	bmi.n	80044bc <__swhatbuf_r+0x40>
 800449a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800449e:	e00e      	b.n	80044be <__swhatbuf_r+0x42>
 80044a0:	466a      	mov	r2, sp
 80044a2:	f000 fe01 	bl	80050a8 <_fstat_r>
 80044a6:	2800      	cmp	r0, #0
 80044a8:	dbf1      	blt.n	800448e <__swhatbuf_r+0x12>
 80044aa:	9a01      	ldr	r2, [sp, #4]
 80044ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80044b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80044b4:	425a      	negs	r2, r3
 80044b6:	415a      	adcs	r2, r3
 80044b8:	602a      	str	r2, [r5, #0]
 80044ba:	e7ee      	b.n	800449a <__swhatbuf_r+0x1e>
 80044bc:	2340      	movs	r3, #64	; 0x40
 80044be:	2000      	movs	r0, #0
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	b016      	add	sp, #88	; 0x58
 80044c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080044c8 <__smakebuf_r>:
 80044c8:	898b      	ldrh	r3, [r1, #12]
 80044ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80044cc:	079d      	lsls	r5, r3, #30
 80044ce:	4606      	mov	r6, r0
 80044d0:	460c      	mov	r4, r1
 80044d2:	d507      	bpl.n	80044e4 <__smakebuf_r+0x1c>
 80044d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	6123      	str	r3, [r4, #16]
 80044dc:	2301      	movs	r3, #1
 80044de:	6163      	str	r3, [r4, #20]
 80044e0:	b002      	add	sp, #8
 80044e2:	bd70      	pop	{r4, r5, r6, pc}
 80044e4:	ab01      	add	r3, sp, #4
 80044e6:	466a      	mov	r2, sp
 80044e8:	f7ff ffc8 	bl	800447c <__swhatbuf_r>
 80044ec:	9900      	ldr	r1, [sp, #0]
 80044ee:	4605      	mov	r5, r0
 80044f0:	4630      	mov	r0, r6
 80044f2:	f000 f89d 	bl	8004630 <_malloc_r>
 80044f6:	b948      	cbnz	r0, 800450c <__smakebuf_r+0x44>
 80044f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044fc:	059a      	lsls	r2, r3, #22
 80044fe:	d4ef      	bmi.n	80044e0 <__smakebuf_r+0x18>
 8004500:	f023 0303 	bic.w	r3, r3, #3
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	81a3      	strh	r3, [r4, #12]
 800450a:	e7e3      	b.n	80044d4 <__smakebuf_r+0xc>
 800450c:	4b0d      	ldr	r3, [pc, #52]	; (8004544 <__smakebuf_r+0x7c>)
 800450e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004510:	89a3      	ldrh	r3, [r4, #12]
 8004512:	6020      	str	r0, [r4, #0]
 8004514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004518:	81a3      	strh	r3, [r4, #12]
 800451a:	9b00      	ldr	r3, [sp, #0]
 800451c:	6163      	str	r3, [r4, #20]
 800451e:	9b01      	ldr	r3, [sp, #4]
 8004520:	6120      	str	r0, [r4, #16]
 8004522:	b15b      	cbz	r3, 800453c <__smakebuf_r+0x74>
 8004524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004528:	4630      	mov	r0, r6
 800452a:	f000 fdcf 	bl	80050cc <_isatty_r>
 800452e:	b128      	cbz	r0, 800453c <__smakebuf_r+0x74>
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	f023 0303 	bic.w	r3, r3, #3
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	81a3      	strh	r3, [r4, #12]
 800453c:	89a0      	ldrh	r0, [r4, #12]
 800453e:	4305      	orrs	r5, r0
 8004540:	81a5      	strh	r5, [r4, #12]
 8004542:	e7cd      	b.n	80044e0 <__smakebuf_r+0x18>
 8004544:	080042b1 	.word	0x080042b1

08004548 <malloc>:
 8004548:	4b02      	ldr	r3, [pc, #8]	; (8004554 <malloc+0xc>)
 800454a:	4601      	mov	r1, r0
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f000 b86f 	b.w	8004630 <_malloc_r>
 8004552:	bf00      	nop
 8004554:	20000024 	.word	0x20000024

08004558 <_free_r>:
 8004558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800455a:	2900      	cmp	r1, #0
 800455c:	d044      	beq.n	80045e8 <_free_r+0x90>
 800455e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004562:	9001      	str	r0, [sp, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f1a1 0404 	sub.w	r4, r1, #4
 800456a:	bfb8      	it	lt
 800456c:	18e4      	addlt	r4, r4, r3
 800456e:	f000 fde9 	bl	8005144 <__malloc_lock>
 8004572:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <_free_r+0x94>)
 8004574:	9801      	ldr	r0, [sp, #4]
 8004576:	6813      	ldr	r3, [r2, #0]
 8004578:	b933      	cbnz	r3, 8004588 <_free_r+0x30>
 800457a:	6063      	str	r3, [r4, #4]
 800457c:	6014      	str	r4, [r2, #0]
 800457e:	b003      	add	sp, #12
 8004580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004584:	f000 bde4 	b.w	8005150 <__malloc_unlock>
 8004588:	42a3      	cmp	r3, r4
 800458a:	d908      	bls.n	800459e <_free_r+0x46>
 800458c:	6825      	ldr	r5, [r4, #0]
 800458e:	1961      	adds	r1, r4, r5
 8004590:	428b      	cmp	r3, r1
 8004592:	bf01      	itttt	eq
 8004594:	6819      	ldreq	r1, [r3, #0]
 8004596:	685b      	ldreq	r3, [r3, #4]
 8004598:	1949      	addeq	r1, r1, r5
 800459a:	6021      	streq	r1, [r4, #0]
 800459c:	e7ed      	b.n	800457a <_free_r+0x22>
 800459e:	461a      	mov	r2, r3
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	b10b      	cbz	r3, 80045a8 <_free_r+0x50>
 80045a4:	42a3      	cmp	r3, r4
 80045a6:	d9fa      	bls.n	800459e <_free_r+0x46>
 80045a8:	6811      	ldr	r1, [r2, #0]
 80045aa:	1855      	adds	r5, r2, r1
 80045ac:	42a5      	cmp	r5, r4
 80045ae:	d10b      	bne.n	80045c8 <_free_r+0x70>
 80045b0:	6824      	ldr	r4, [r4, #0]
 80045b2:	4421      	add	r1, r4
 80045b4:	1854      	adds	r4, r2, r1
 80045b6:	42a3      	cmp	r3, r4
 80045b8:	6011      	str	r1, [r2, #0]
 80045ba:	d1e0      	bne.n	800457e <_free_r+0x26>
 80045bc:	681c      	ldr	r4, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	6053      	str	r3, [r2, #4]
 80045c2:	4421      	add	r1, r4
 80045c4:	6011      	str	r1, [r2, #0]
 80045c6:	e7da      	b.n	800457e <_free_r+0x26>
 80045c8:	d902      	bls.n	80045d0 <_free_r+0x78>
 80045ca:	230c      	movs	r3, #12
 80045cc:	6003      	str	r3, [r0, #0]
 80045ce:	e7d6      	b.n	800457e <_free_r+0x26>
 80045d0:	6825      	ldr	r5, [r4, #0]
 80045d2:	1961      	adds	r1, r4, r5
 80045d4:	428b      	cmp	r3, r1
 80045d6:	bf04      	itt	eq
 80045d8:	6819      	ldreq	r1, [r3, #0]
 80045da:	685b      	ldreq	r3, [r3, #4]
 80045dc:	6063      	str	r3, [r4, #4]
 80045de:	bf04      	itt	eq
 80045e0:	1949      	addeq	r1, r1, r5
 80045e2:	6021      	streq	r1, [r4, #0]
 80045e4:	6054      	str	r4, [r2, #4]
 80045e6:	e7ca      	b.n	800457e <_free_r+0x26>
 80045e8:	b003      	add	sp, #12
 80045ea:	bd30      	pop	{r4, r5, pc}
 80045ec:	20000cf8 	.word	0x20000cf8

080045f0 <sbrk_aligned>:
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	4e0e      	ldr	r6, [pc, #56]	; (800462c <sbrk_aligned+0x3c>)
 80045f4:	460c      	mov	r4, r1
 80045f6:	6831      	ldr	r1, [r6, #0]
 80045f8:	4605      	mov	r5, r0
 80045fa:	b911      	cbnz	r1, 8004602 <sbrk_aligned+0x12>
 80045fc:	f000 fcd6 	bl	8004fac <_sbrk_r>
 8004600:	6030      	str	r0, [r6, #0]
 8004602:	4621      	mov	r1, r4
 8004604:	4628      	mov	r0, r5
 8004606:	f000 fcd1 	bl	8004fac <_sbrk_r>
 800460a:	1c43      	adds	r3, r0, #1
 800460c:	d00a      	beq.n	8004624 <sbrk_aligned+0x34>
 800460e:	1cc4      	adds	r4, r0, #3
 8004610:	f024 0403 	bic.w	r4, r4, #3
 8004614:	42a0      	cmp	r0, r4
 8004616:	d007      	beq.n	8004628 <sbrk_aligned+0x38>
 8004618:	1a21      	subs	r1, r4, r0
 800461a:	4628      	mov	r0, r5
 800461c:	f000 fcc6 	bl	8004fac <_sbrk_r>
 8004620:	3001      	adds	r0, #1
 8004622:	d101      	bne.n	8004628 <sbrk_aligned+0x38>
 8004624:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004628:	4620      	mov	r0, r4
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	20000cfc 	.word	0x20000cfc

08004630 <_malloc_r>:
 8004630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004634:	1ccd      	adds	r5, r1, #3
 8004636:	f025 0503 	bic.w	r5, r5, #3
 800463a:	3508      	adds	r5, #8
 800463c:	2d0c      	cmp	r5, #12
 800463e:	bf38      	it	cc
 8004640:	250c      	movcc	r5, #12
 8004642:	2d00      	cmp	r5, #0
 8004644:	4607      	mov	r7, r0
 8004646:	db01      	blt.n	800464c <_malloc_r+0x1c>
 8004648:	42a9      	cmp	r1, r5
 800464a:	d905      	bls.n	8004658 <_malloc_r+0x28>
 800464c:	230c      	movs	r3, #12
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	2600      	movs	r6, #0
 8004652:	4630      	mov	r0, r6
 8004654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004658:	4e2e      	ldr	r6, [pc, #184]	; (8004714 <_malloc_r+0xe4>)
 800465a:	f000 fd73 	bl	8005144 <__malloc_lock>
 800465e:	6833      	ldr	r3, [r6, #0]
 8004660:	461c      	mov	r4, r3
 8004662:	bb34      	cbnz	r4, 80046b2 <_malloc_r+0x82>
 8004664:	4629      	mov	r1, r5
 8004666:	4638      	mov	r0, r7
 8004668:	f7ff ffc2 	bl	80045f0 <sbrk_aligned>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	4604      	mov	r4, r0
 8004670:	d14d      	bne.n	800470e <_malloc_r+0xde>
 8004672:	6834      	ldr	r4, [r6, #0]
 8004674:	4626      	mov	r6, r4
 8004676:	2e00      	cmp	r6, #0
 8004678:	d140      	bne.n	80046fc <_malloc_r+0xcc>
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	4631      	mov	r1, r6
 800467e:	4638      	mov	r0, r7
 8004680:	eb04 0803 	add.w	r8, r4, r3
 8004684:	f000 fc92 	bl	8004fac <_sbrk_r>
 8004688:	4580      	cmp	r8, r0
 800468a:	d13a      	bne.n	8004702 <_malloc_r+0xd2>
 800468c:	6821      	ldr	r1, [r4, #0]
 800468e:	3503      	adds	r5, #3
 8004690:	1a6d      	subs	r5, r5, r1
 8004692:	f025 0503 	bic.w	r5, r5, #3
 8004696:	3508      	adds	r5, #8
 8004698:	2d0c      	cmp	r5, #12
 800469a:	bf38      	it	cc
 800469c:	250c      	movcc	r5, #12
 800469e:	4629      	mov	r1, r5
 80046a0:	4638      	mov	r0, r7
 80046a2:	f7ff ffa5 	bl	80045f0 <sbrk_aligned>
 80046a6:	3001      	adds	r0, #1
 80046a8:	d02b      	beq.n	8004702 <_malloc_r+0xd2>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	442b      	add	r3, r5
 80046ae:	6023      	str	r3, [r4, #0]
 80046b0:	e00e      	b.n	80046d0 <_malloc_r+0xa0>
 80046b2:	6822      	ldr	r2, [r4, #0]
 80046b4:	1b52      	subs	r2, r2, r5
 80046b6:	d41e      	bmi.n	80046f6 <_malloc_r+0xc6>
 80046b8:	2a0b      	cmp	r2, #11
 80046ba:	d916      	bls.n	80046ea <_malloc_r+0xba>
 80046bc:	1961      	adds	r1, r4, r5
 80046be:	42a3      	cmp	r3, r4
 80046c0:	6025      	str	r5, [r4, #0]
 80046c2:	bf18      	it	ne
 80046c4:	6059      	strne	r1, [r3, #4]
 80046c6:	6863      	ldr	r3, [r4, #4]
 80046c8:	bf08      	it	eq
 80046ca:	6031      	streq	r1, [r6, #0]
 80046cc:	5162      	str	r2, [r4, r5]
 80046ce:	604b      	str	r3, [r1, #4]
 80046d0:	4638      	mov	r0, r7
 80046d2:	f104 060b 	add.w	r6, r4, #11
 80046d6:	f000 fd3b 	bl	8005150 <__malloc_unlock>
 80046da:	f026 0607 	bic.w	r6, r6, #7
 80046de:	1d23      	adds	r3, r4, #4
 80046e0:	1af2      	subs	r2, r6, r3
 80046e2:	d0b6      	beq.n	8004652 <_malloc_r+0x22>
 80046e4:	1b9b      	subs	r3, r3, r6
 80046e6:	50a3      	str	r3, [r4, r2]
 80046e8:	e7b3      	b.n	8004652 <_malloc_r+0x22>
 80046ea:	6862      	ldr	r2, [r4, #4]
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	bf0c      	ite	eq
 80046f0:	6032      	streq	r2, [r6, #0]
 80046f2:	605a      	strne	r2, [r3, #4]
 80046f4:	e7ec      	b.n	80046d0 <_malloc_r+0xa0>
 80046f6:	4623      	mov	r3, r4
 80046f8:	6864      	ldr	r4, [r4, #4]
 80046fa:	e7b2      	b.n	8004662 <_malloc_r+0x32>
 80046fc:	4634      	mov	r4, r6
 80046fe:	6876      	ldr	r6, [r6, #4]
 8004700:	e7b9      	b.n	8004676 <_malloc_r+0x46>
 8004702:	230c      	movs	r3, #12
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	4638      	mov	r0, r7
 8004708:	f000 fd22 	bl	8005150 <__malloc_unlock>
 800470c:	e7a1      	b.n	8004652 <_malloc_r+0x22>
 800470e:	6025      	str	r5, [r4, #0]
 8004710:	e7de      	b.n	80046d0 <_malloc_r+0xa0>
 8004712:	bf00      	nop
 8004714:	20000cf8 	.word	0x20000cf8

08004718 <__ssputs_r>:
 8004718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800471c:	688e      	ldr	r6, [r1, #8]
 800471e:	429e      	cmp	r6, r3
 8004720:	4682      	mov	sl, r0
 8004722:	460c      	mov	r4, r1
 8004724:	4690      	mov	r8, r2
 8004726:	461f      	mov	r7, r3
 8004728:	d838      	bhi.n	800479c <__ssputs_r+0x84>
 800472a:	898a      	ldrh	r2, [r1, #12]
 800472c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004730:	d032      	beq.n	8004798 <__ssputs_r+0x80>
 8004732:	6825      	ldr	r5, [r4, #0]
 8004734:	6909      	ldr	r1, [r1, #16]
 8004736:	eba5 0901 	sub.w	r9, r5, r1
 800473a:	6965      	ldr	r5, [r4, #20]
 800473c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004740:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004744:	3301      	adds	r3, #1
 8004746:	444b      	add	r3, r9
 8004748:	106d      	asrs	r5, r5, #1
 800474a:	429d      	cmp	r5, r3
 800474c:	bf38      	it	cc
 800474e:	461d      	movcc	r5, r3
 8004750:	0553      	lsls	r3, r2, #21
 8004752:	d531      	bpl.n	80047b8 <__ssputs_r+0xa0>
 8004754:	4629      	mov	r1, r5
 8004756:	f7ff ff6b 	bl	8004630 <_malloc_r>
 800475a:	4606      	mov	r6, r0
 800475c:	b950      	cbnz	r0, 8004774 <__ssputs_r+0x5c>
 800475e:	230c      	movs	r3, #12
 8004760:	f8ca 3000 	str.w	r3, [sl]
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800476a:	81a3      	strh	r3, [r4, #12]
 800476c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004774:	6921      	ldr	r1, [r4, #16]
 8004776:	464a      	mov	r2, r9
 8004778:	f7ff fa84 	bl	8003c84 <memcpy>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004786:	81a3      	strh	r3, [r4, #12]
 8004788:	6126      	str	r6, [r4, #16]
 800478a:	6165      	str	r5, [r4, #20]
 800478c:	444e      	add	r6, r9
 800478e:	eba5 0509 	sub.w	r5, r5, r9
 8004792:	6026      	str	r6, [r4, #0]
 8004794:	60a5      	str	r5, [r4, #8]
 8004796:	463e      	mov	r6, r7
 8004798:	42be      	cmp	r6, r7
 800479a:	d900      	bls.n	800479e <__ssputs_r+0x86>
 800479c:	463e      	mov	r6, r7
 800479e:	6820      	ldr	r0, [r4, #0]
 80047a0:	4632      	mov	r2, r6
 80047a2:	4641      	mov	r1, r8
 80047a4:	f000 fcb4 	bl	8005110 <memmove>
 80047a8:	68a3      	ldr	r3, [r4, #8]
 80047aa:	1b9b      	subs	r3, r3, r6
 80047ac:	60a3      	str	r3, [r4, #8]
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	4433      	add	r3, r6
 80047b2:	6023      	str	r3, [r4, #0]
 80047b4:	2000      	movs	r0, #0
 80047b6:	e7db      	b.n	8004770 <__ssputs_r+0x58>
 80047b8:	462a      	mov	r2, r5
 80047ba:	f000 fccf 	bl	800515c <_realloc_r>
 80047be:	4606      	mov	r6, r0
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d1e1      	bne.n	8004788 <__ssputs_r+0x70>
 80047c4:	6921      	ldr	r1, [r4, #16]
 80047c6:	4650      	mov	r0, sl
 80047c8:	f7ff fec6 	bl	8004558 <_free_r>
 80047cc:	e7c7      	b.n	800475e <__ssputs_r+0x46>
	...

080047d0 <_svfiprintf_r>:
 80047d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d4:	4698      	mov	r8, r3
 80047d6:	898b      	ldrh	r3, [r1, #12]
 80047d8:	061b      	lsls	r3, r3, #24
 80047da:	b09d      	sub	sp, #116	; 0x74
 80047dc:	4607      	mov	r7, r0
 80047de:	460d      	mov	r5, r1
 80047e0:	4614      	mov	r4, r2
 80047e2:	d50e      	bpl.n	8004802 <_svfiprintf_r+0x32>
 80047e4:	690b      	ldr	r3, [r1, #16]
 80047e6:	b963      	cbnz	r3, 8004802 <_svfiprintf_r+0x32>
 80047e8:	2140      	movs	r1, #64	; 0x40
 80047ea:	f7ff ff21 	bl	8004630 <_malloc_r>
 80047ee:	6028      	str	r0, [r5, #0]
 80047f0:	6128      	str	r0, [r5, #16]
 80047f2:	b920      	cbnz	r0, 80047fe <_svfiprintf_r+0x2e>
 80047f4:	230c      	movs	r3, #12
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047fc:	e0d1      	b.n	80049a2 <_svfiprintf_r+0x1d2>
 80047fe:	2340      	movs	r3, #64	; 0x40
 8004800:	616b      	str	r3, [r5, #20]
 8004802:	2300      	movs	r3, #0
 8004804:	9309      	str	r3, [sp, #36]	; 0x24
 8004806:	2320      	movs	r3, #32
 8004808:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800480c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004810:	2330      	movs	r3, #48	; 0x30
 8004812:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049bc <_svfiprintf_r+0x1ec>
 8004816:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800481a:	f04f 0901 	mov.w	r9, #1
 800481e:	4623      	mov	r3, r4
 8004820:	469a      	mov	sl, r3
 8004822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004826:	b10a      	cbz	r2, 800482c <_svfiprintf_r+0x5c>
 8004828:	2a25      	cmp	r2, #37	; 0x25
 800482a:	d1f9      	bne.n	8004820 <_svfiprintf_r+0x50>
 800482c:	ebba 0b04 	subs.w	fp, sl, r4
 8004830:	d00b      	beq.n	800484a <_svfiprintf_r+0x7a>
 8004832:	465b      	mov	r3, fp
 8004834:	4622      	mov	r2, r4
 8004836:	4629      	mov	r1, r5
 8004838:	4638      	mov	r0, r7
 800483a:	f7ff ff6d 	bl	8004718 <__ssputs_r>
 800483e:	3001      	adds	r0, #1
 8004840:	f000 80aa 	beq.w	8004998 <_svfiprintf_r+0x1c8>
 8004844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004846:	445a      	add	r2, fp
 8004848:	9209      	str	r2, [sp, #36]	; 0x24
 800484a:	f89a 3000 	ldrb.w	r3, [sl]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 80a2 	beq.w	8004998 <_svfiprintf_r+0x1c8>
 8004854:	2300      	movs	r3, #0
 8004856:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800485a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800485e:	f10a 0a01 	add.w	sl, sl, #1
 8004862:	9304      	str	r3, [sp, #16]
 8004864:	9307      	str	r3, [sp, #28]
 8004866:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800486a:	931a      	str	r3, [sp, #104]	; 0x68
 800486c:	4654      	mov	r4, sl
 800486e:	2205      	movs	r2, #5
 8004870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004874:	4851      	ldr	r0, [pc, #324]	; (80049bc <_svfiprintf_r+0x1ec>)
 8004876:	f7fb fcb3 	bl	80001e0 <memchr>
 800487a:	9a04      	ldr	r2, [sp, #16]
 800487c:	b9d8      	cbnz	r0, 80048b6 <_svfiprintf_r+0xe6>
 800487e:	06d0      	lsls	r0, r2, #27
 8004880:	bf44      	itt	mi
 8004882:	2320      	movmi	r3, #32
 8004884:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004888:	0711      	lsls	r1, r2, #28
 800488a:	bf44      	itt	mi
 800488c:	232b      	movmi	r3, #43	; 0x2b
 800488e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004892:	f89a 3000 	ldrb.w	r3, [sl]
 8004896:	2b2a      	cmp	r3, #42	; 0x2a
 8004898:	d015      	beq.n	80048c6 <_svfiprintf_r+0xf6>
 800489a:	9a07      	ldr	r2, [sp, #28]
 800489c:	4654      	mov	r4, sl
 800489e:	2000      	movs	r0, #0
 80048a0:	f04f 0c0a 	mov.w	ip, #10
 80048a4:	4621      	mov	r1, r4
 80048a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048aa:	3b30      	subs	r3, #48	; 0x30
 80048ac:	2b09      	cmp	r3, #9
 80048ae:	d94e      	bls.n	800494e <_svfiprintf_r+0x17e>
 80048b0:	b1b0      	cbz	r0, 80048e0 <_svfiprintf_r+0x110>
 80048b2:	9207      	str	r2, [sp, #28]
 80048b4:	e014      	b.n	80048e0 <_svfiprintf_r+0x110>
 80048b6:	eba0 0308 	sub.w	r3, r0, r8
 80048ba:	fa09 f303 	lsl.w	r3, r9, r3
 80048be:	4313      	orrs	r3, r2
 80048c0:	9304      	str	r3, [sp, #16]
 80048c2:	46a2      	mov	sl, r4
 80048c4:	e7d2      	b.n	800486c <_svfiprintf_r+0x9c>
 80048c6:	9b03      	ldr	r3, [sp, #12]
 80048c8:	1d19      	adds	r1, r3, #4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	9103      	str	r1, [sp, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bfbb      	ittet	lt
 80048d2:	425b      	neglt	r3, r3
 80048d4:	f042 0202 	orrlt.w	r2, r2, #2
 80048d8:	9307      	strge	r3, [sp, #28]
 80048da:	9307      	strlt	r3, [sp, #28]
 80048dc:	bfb8      	it	lt
 80048de:	9204      	strlt	r2, [sp, #16]
 80048e0:	7823      	ldrb	r3, [r4, #0]
 80048e2:	2b2e      	cmp	r3, #46	; 0x2e
 80048e4:	d10c      	bne.n	8004900 <_svfiprintf_r+0x130>
 80048e6:	7863      	ldrb	r3, [r4, #1]
 80048e8:	2b2a      	cmp	r3, #42	; 0x2a
 80048ea:	d135      	bne.n	8004958 <_svfiprintf_r+0x188>
 80048ec:	9b03      	ldr	r3, [sp, #12]
 80048ee:	1d1a      	adds	r2, r3, #4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	9203      	str	r2, [sp, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bfb8      	it	lt
 80048f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80048fc:	3402      	adds	r4, #2
 80048fe:	9305      	str	r3, [sp, #20]
 8004900:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049cc <_svfiprintf_r+0x1fc>
 8004904:	7821      	ldrb	r1, [r4, #0]
 8004906:	2203      	movs	r2, #3
 8004908:	4650      	mov	r0, sl
 800490a:	f7fb fc69 	bl	80001e0 <memchr>
 800490e:	b140      	cbz	r0, 8004922 <_svfiprintf_r+0x152>
 8004910:	2340      	movs	r3, #64	; 0x40
 8004912:	eba0 000a 	sub.w	r0, r0, sl
 8004916:	fa03 f000 	lsl.w	r0, r3, r0
 800491a:	9b04      	ldr	r3, [sp, #16]
 800491c:	4303      	orrs	r3, r0
 800491e:	3401      	adds	r4, #1
 8004920:	9304      	str	r3, [sp, #16]
 8004922:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004926:	4826      	ldr	r0, [pc, #152]	; (80049c0 <_svfiprintf_r+0x1f0>)
 8004928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800492c:	2206      	movs	r2, #6
 800492e:	f7fb fc57 	bl	80001e0 <memchr>
 8004932:	2800      	cmp	r0, #0
 8004934:	d038      	beq.n	80049a8 <_svfiprintf_r+0x1d8>
 8004936:	4b23      	ldr	r3, [pc, #140]	; (80049c4 <_svfiprintf_r+0x1f4>)
 8004938:	bb1b      	cbnz	r3, 8004982 <_svfiprintf_r+0x1b2>
 800493a:	9b03      	ldr	r3, [sp, #12]
 800493c:	3307      	adds	r3, #7
 800493e:	f023 0307 	bic.w	r3, r3, #7
 8004942:	3308      	adds	r3, #8
 8004944:	9303      	str	r3, [sp, #12]
 8004946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004948:	4433      	add	r3, r6
 800494a:	9309      	str	r3, [sp, #36]	; 0x24
 800494c:	e767      	b.n	800481e <_svfiprintf_r+0x4e>
 800494e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004952:	460c      	mov	r4, r1
 8004954:	2001      	movs	r0, #1
 8004956:	e7a5      	b.n	80048a4 <_svfiprintf_r+0xd4>
 8004958:	2300      	movs	r3, #0
 800495a:	3401      	adds	r4, #1
 800495c:	9305      	str	r3, [sp, #20]
 800495e:	4619      	mov	r1, r3
 8004960:	f04f 0c0a 	mov.w	ip, #10
 8004964:	4620      	mov	r0, r4
 8004966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800496a:	3a30      	subs	r2, #48	; 0x30
 800496c:	2a09      	cmp	r2, #9
 800496e:	d903      	bls.n	8004978 <_svfiprintf_r+0x1a8>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0c5      	beq.n	8004900 <_svfiprintf_r+0x130>
 8004974:	9105      	str	r1, [sp, #20]
 8004976:	e7c3      	b.n	8004900 <_svfiprintf_r+0x130>
 8004978:	fb0c 2101 	mla	r1, ip, r1, r2
 800497c:	4604      	mov	r4, r0
 800497e:	2301      	movs	r3, #1
 8004980:	e7f0      	b.n	8004964 <_svfiprintf_r+0x194>
 8004982:	ab03      	add	r3, sp, #12
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	462a      	mov	r2, r5
 8004988:	4b0f      	ldr	r3, [pc, #60]	; (80049c8 <_svfiprintf_r+0x1f8>)
 800498a:	a904      	add	r1, sp, #16
 800498c:	4638      	mov	r0, r7
 800498e:	f3af 8000 	nop.w
 8004992:	1c42      	adds	r2, r0, #1
 8004994:	4606      	mov	r6, r0
 8004996:	d1d6      	bne.n	8004946 <_svfiprintf_r+0x176>
 8004998:	89ab      	ldrh	r3, [r5, #12]
 800499a:	065b      	lsls	r3, r3, #25
 800499c:	f53f af2c 	bmi.w	80047f8 <_svfiprintf_r+0x28>
 80049a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049a2:	b01d      	add	sp, #116	; 0x74
 80049a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a8:	ab03      	add	r3, sp, #12
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	462a      	mov	r2, r5
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <_svfiprintf_r+0x1f8>)
 80049b0:	a904      	add	r1, sp, #16
 80049b2:	4638      	mov	r0, r7
 80049b4:	f000 f9d4 	bl	8004d60 <_printf_i>
 80049b8:	e7eb      	b.n	8004992 <_svfiprintf_r+0x1c2>
 80049ba:	bf00      	nop
 80049bc:	08005c44 	.word	0x08005c44
 80049c0:	08005c4e 	.word	0x08005c4e
 80049c4:	00000000 	.word	0x00000000
 80049c8:	08004719 	.word	0x08004719
 80049cc:	08005c4a 	.word	0x08005c4a

080049d0 <__sfputc_r>:
 80049d0:	6893      	ldr	r3, [r2, #8]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	b410      	push	{r4}
 80049d8:	6093      	str	r3, [r2, #8]
 80049da:	da08      	bge.n	80049ee <__sfputc_r+0x1e>
 80049dc:	6994      	ldr	r4, [r2, #24]
 80049de:	42a3      	cmp	r3, r4
 80049e0:	db01      	blt.n	80049e6 <__sfputc_r+0x16>
 80049e2:	290a      	cmp	r1, #10
 80049e4:	d103      	bne.n	80049ee <__sfputc_r+0x1e>
 80049e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049ea:	f7ff ba9d 	b.w	8003f28 <__swbuf_r>
 80049ee:	6813      	ldr	r3, [r2, #0]
 80049f0:	1c58      	adds	r0, r3, #1
 80049f2:	6010      	str	r0, [r2, #0]
 80049f4:	7019      	strb	r1, [r3, #0]
 80049f6:	4608      	mov	r0, r1
 80049f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <__sfputs_r>:
 80049fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a00:	4606      	mov	r6, r0
 8004a02:	460f      	mov	r7, r1
 8004a04:	4614      	mov	r4, r2
 8004a06:	18d5      	adds	r5, r2, r3
 8004a08:	42ac      	cmp	r4, r5
 8004a0a:	d101      	bne.n	8004a10 <__sfputs_r+0x12>
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	e007      	b.n	8004a20 <__sfputs_r+0x22>
 8004a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a14:	463a      	mov	r2, r7
 8004a16:	4630      	mov	r0, r6
 8004a18:	f7ff ffda 	bl	80049d0 <__sfputc_r>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d1f3      	bne.n	8004a08 <__sfputs_r+0xa>
 8004a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a24 <_vfiprintf_r>:
 8004a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a28:	460d      	mov	r5, r1
 8004a2a:	b09d      	sub	sp, #116	; 0x74
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	4698      	mov	r8, r3
 8004a30:	4606      	mov	r6, r0
 8004a32:	b118      	cbz	r0, 8004a3c <_vfiprintf_r+0x18>
 8004a34:	6983      	ldr	r3, [r0, #24]
 8004a36:	b90b      	cbnz	r3, 8004a3c <_vfiprintf_r+0x18>
 8004a38:	f7ff fc6e 	bl	8004318 <__sinit>
 8004a3c:	4b89      	ldr	r3, [pc, #548]	; (8004c64 <_vfiprintf_r+0x240>)
 8004a3e:	429d      	cmp	r5, r3
 8004a40:	d11b      	bne.n	8004a7a <_vfiprintf_r+0x56>
 8004a42:	6875      	ldr	r5, [r6, #4]
 8004a44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a46:	07d9      	lsls	r1, r3, #31
 8004a48:	d405      	bmi.n	8004a56 <_vfiprintf_r+0x32>
 8004a4a:	89ab      	ldrh	r3, [r5, #12]
 8004a4c:	059a      	lsls	r2, r3, #22
 8004a4e:	d402      	bmi.n	8004a56 <_vfiprintf_r+0x32>
 8004a50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a52:	f7ff fd11 	bl	8004478 <__retarget_lock_acquire_recursive>
 8004a56:	89ab      	ldrh	r3, [r5, #12]
 8004a58:	071b      	lsls	r3, r3, #28
 8004a5a:	d501      	bpl.n	8004a60 <_vfiprintf_r+0x3c>
 8004a5c:	692b      	ldr	r3, [r5, #16]
 8004a5e:	b9eb      	cbnz	r3, 8004a9c <_vfiprintf_r+0x78>
 8004a60:	4629      	mov	r1, r5
 8004a62:	4630      	mov	r0, r6
 8004a64:	f7ff fab2 	bl	8003fcc <__swsetup_r>
 8004a68:	b1c0      	cbz	r0, 8004a9c <_vfiprintf_r+0x78>
 8004a6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a6c:	07dc      	lsls	r4, r3, #31
 8004a6e:	d50e      	bpl.n	8004a8e <_vfiprintf_r+0x6a>
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a74:	b01d      	add	sp, #116	; 0x74
 8004a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7a:	4b7b      	ldr	r3, [pc, #492]	; (8004c68 <_vfiprintf_r+0x244>)
 8004a7c:	429d      	cmp	r5, r3
 8004a7e:	d101      	bne.n	8004a84 <_vfiprintf_r+0x60>
 8004a80:	68b5      	ldr	r5, [r6, #8]
 8004a82:	e7df      	b.n	8004a44 <_vfiprintf_r+0x20>
 8004a84:	4b79      	ldr	r3, [pc, #484]	; (8004c6c <_vfiprintf_r+0x248>)
 8004a86:	429d      	cmp	r5, r3
 8004a88:	bf08      	it	eq
 8004a8a:	68f5      	ldreq	r5, [r6, #12]
 8004a8c:	e7da      	b.n	8004a44 <_vfiprintf_r+0x20>
 8004a8e:	89ab      	ldrh	r3, [r5, #12]
 8004a90:	0598      	lsls	r0, r3, #22
 8004a92:	d4ed      	bmi.n	8004a70 <_vfiprintf_r+0x4c>
 8004a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a96:	f7ff fcf0 	bl	800447a <__retarget_lock_release_recursive>
 8004a9a:	e7e9      	b.n	8004a70 <_vfiprintf_r+0x4c>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004aa0:	2320      	movs	r3, #32
 8004aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aaa:	2330      	movs	r3, #48	; 0x30
 8004aac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004c70 <_vfiprintf_r+0x24c>
 8004ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ab4:	f04f 0901 	mov.w	r9, #1
 8004ab8:	4623      	mov	r3, r4
 8004aba:	469a      	mov	sl, r3
 8004abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ac0:	b10a      	cbz	r2, 8004ac6 <_vfiprintf_r+0xa2>
 8004ac2:	2a25      	cmp	r2, #37	; 0x25
 8004ac4:	d1f9      	bne.n	8004aba <_vfiprintf_r+0x96>
 8004ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8004aca:	d00b      	beq.n	8004ae4 <_vfiprintf_r+0xc0>
 8004acc:	465b      	mov	r3, fp
 8004ace:	4622      	mov	r2, r4
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7ff ff93 	bl	80049fe <__sfputs_r>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	f000 80aa 	beq.w	8004c32 <_vfiprintf_r+0x20e>
 8004ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ae0:	445a      	add	r2, fp
 8004ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80a2 	beq.w	8004c32 <_vfiprintf_r+0x20e>
 8004aee:	2300      	movs	r3, #0
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004af8:	f10a 0a01 	add.w	sl, sl, #1
 8004afc:	9304      	str	r3, [sp, #16]
 8004afe:	9307      	str	r3, [sp, #28]
 8004b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b04:	931a      	str	r3, [sp, #104]	; 0x68
 8004b06:	4654      	mov	r4, sl
 8004b08:	2205      	movs	r2, #5
 8004b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b0e:	4858      	ldr	r0, [pc, #352]	; (8004c70 <_vfiprintf_r+0x24c>)
 8004b10:	f7fb fb66 	bl	80001e0 <memchr>
 8004b14:	9a04      	ldr	r2, [sp, #16]
 8004b16:	b9d8      	cbnz	r0, 8004b50 <_vfiprintf_r+0x12c>
 8004b18:	06d1      	lsls	r1, r2, #27
 8004b1a:	bf44      	itt	mi
 8004b1c:	2320      	movmi	r3, #32
 8004b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b22:	0713      	lsls	r3, r2, #28
 8004b24:	bf44      	itt	mi
 8004b26:	232b      	movmi	r3, #43	; 0x2b
 8004b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b30:	2b2a      	cmp	r3, #42	; 0x2a
 8004b32:	d015      	beq.n	8004b60 <_vfiprintf_r+0x13c>
 8004b34:	9a07      	ldr	r2, [sp, #28]
 8004b36:	4654      	mov	r4, sl
 8004b38:	2000      	movs	r0, #0
 8004b3a:	f04f 0c0a 	mov.w	ip, #10
 8004b3e:	4621      	mov	r1, r4
 8004b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b44:	3b30      	subs	r3, #48	; 0x30
 8004b46:	2b09      	cmp	r3, #9
 8004b48:	d94e      	bls.n	8004be8 <_vfiprintf_r+0x1c4>
 8004b4a:	b1b0      	cbz	r0, 8004b7a <_vfiprintf_r+0x156>
 8004b4c:	9207      	str	r2, [sp, #28]
 8004b4e:	e014      	b.n	8004b7a <_vfiprintf_r+0x156>
 8004b50:	eba0 0308 	sub.w	r3, r0, r8
 8004b54:	fa09 f303 	lsl.w	r3, r9, r3
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	9304      	str	r3, [sp, #16]
 8004b5c:	46a2      	mov	sl, r4
 8004b5e:	e7d2      	b.n	8004b06 <_vfiprintf_r+0xe2>
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	1d19      	adds	r1, r3, #4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	9103      	str	r1, [sp, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bfbb      	ittet	lt
 8004b6c:	425b      	neglt	r3, r3
 8004b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8004b72:	9307      	strge	r3, [sp, #28]
 8004b74:	9307      	strlt	r3, [sp, #28]
 8004b76:	bfb8      	it	lt
 8004b78:	9204      	strlt	r2, [sp, #16]
 8004b7a:	7823      	ldrb	r3, [r4, #0]
 8004b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b7e:	d10c      	bne.n	8004b9a <_vfiprintf_r+0x176>
 8004b80:	7863      	ldrb	r3, [r4, #1]
 8004b82:	2b2a      	cmp	r3, #42	; 0x2a
 8004b84:	d135      	bne.n	8004bf2 <_vfiprintf_r+0x1ce>
 8004b86:	9b03      	ldr	r3, [sp, #12]
 8004b88:	1d1a      	adds	r2, r3, #4
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	9203      	str	r2, [sp, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bfb8      	it	lt
 8004b92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004b96:	3402      	adds	r4, #2
 8004b98:	9305      	str	r3, [sp, #20]
 8004b9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004c80 <_vfiprintf_r+0x25c>
 8004b9e:	7821      	ldrb	r1, [r4, #0]
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	4650      	mov	r0, sl
 8004ba4:	f7fb fb1c 	bl	80001e0 <memchr>
 8004ba8:	b140      	cbz	r0, 8004bbc <_vfiprintf_r+0x198>
 8004baa:	2340      	movs	r3, #64	; 0x40
 8004bac:	eba0 000a 	sub.w	r0, r0, sl
 8004bb0:	fa03 f000 	lsl.w	r0, r3, r0
 8004bb4:	9b04      	ldr	r3, [sp, #16]
 8004bb6:	4303      	orrs	r3, r0
 8004bb8:	3401      	adds	r4, #1
 8004bba:	9304      	str	r3, [sp, #16]
 8004bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc0:	482c      	ldr	r0, [pc, #176]	; (8004c74 <_vfiprintf_r+0x250>)
 8004bc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bc6:	2206      	movs	r2, #6
 8004bc8:	f7fb fb0a 	bl	80001e0 <memchr>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d03f      	beq.n	8004c50 <_vfiprintf_r+0x22c>
 8004bd0:	4b29      	ldr	r3, [pc, #164]	; (8004c78 <_vfiprintf_r+0x254>)
 8004bd2:	bb1b      	cbnz	r3, 8004c1c <_vfiprintf_r+0x1f8>
 8004bd4:	9b03      	ldr	r3, [sp, #12]
 8004bd6:	3307      	adds	r3, #7
 8004bd8:	f023 0307 	bic.w	r3, r3, #7
 8004bdc:	3308      	adds	r3, #8
 8004bde:	9303      	str	r3, [sp, #12]
 8004be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be2:	443b      	add	r3, r7
 8004be4:	9309      	str	r3, [sp, #36]	; 0x24
 8004be6:	e767      	b.n	8004ab8 <_vfiprintf_r+0x94>
 8004be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bec:	460c      	mov	r4, r1
 8004bee:	2001      	movs	r0, #1
 8004bf0:	e7a5      	b.n	8004b3e <_vfiprintf_r+0x11a>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	3401      	adds	r4, #1
 8004bf6:	9305      	str	r3, [sp, #20]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	f04f 0c0a 	mov.w	ip, #10
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c04:	3a30      	subs	r2, #48	; 0x30
 8004c06:	2a09      	cmp	r2, #9
 8004c08:	d903      	bls.n	8004c12 <_vfiprintf_r+0x1ee>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0c5      	beq.n	8004b9a <_vfiprintf_r+0x176>
 8004c0e:	9105      	str	r1, [sp, #20]
 8004c10:	e7c3      	b.n	8004b9a <_vfiprintf_r+0x176>
 8004c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c16:	4604      	mov	r4, r0
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e7f0      	b.n	8004bfe <_vfiprintf_r+0x1da>
 8004c1c:	ab03      	add	r3, sp, #12
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	462a      	mov	r2, r5
 8004c22:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <_vfiprintf_r+0x258>)
 8004c24:	a904      	add	r1, sp, #16
 8004c26:	4630      	mov	r0, r6
 8004c28:	f3af 8000 	nop.w
 8004c2c:	4607      	mov	r7, r0
 8004c2e:	1c78      	adds	r0, r7, #1
 8004c30:	d1d6      	bne.n	8004be0 <_vfiprintf_r+0x1bc>
 8004c32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c34:	07d9      	lsls	r1, r3, #31
 8004c36:	d405      	bmi.n	8004c44 <_vfiprintf_r+0x220>
 8004c38:	89ab      	ldrh	r3, [r5, #12]
 8004c3a:	059a      	lsls	r2, r3, #22
 8004c3c:	d402      	bmi.n	8004c44 <_vfiprintf_r+0x220>
 8004c3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c40:	f7ff fc1b 	bl	800447a <__retarget_lock_release_recursive>
 8004c44:	89ab      	ldrh	r3, [r5, #12]
 8004c46:	065b      	lsls	r3, r3, #25
 8004c48:	f53f af12 	bmi.w	8004a70 <_vfiprintf_r+0x4c>
 8004c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c4e:	e711      	b.n	8004a74 <_vfiprintf_r+0x50>
 8004c50:	ab03      	add	r3, sp, #12
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	462a      	mov	r2, r5
 8004c56:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <_vfiprintf_r+0x258>)
 8004c58:	a904      	add	r1, sp, #16
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	f000 f880 	bl	8004d60 <_printf_i>
 8004c60:	e7e4      	b.n	8004c2c <_vfiprintf_r+0x208>
 8004c62:	bf00      	nop
 8004c64:	08005c04 	.word	0x08005c04
 8004c68:	08005c24 	.word	0x08005c24
 8004c6c:	08005be4 	.word	0x08005be4
 8004c70:	08005c44 	.word	0x08005c44
 8004c74:	08005c4e 	.word	0x08005c4e
 8004c78:	00000000 	.word	0x00000000
 8004c7c:	080049ff 	.word	0x080049ff
 8004c80:	08005c4a 	.word	0x08005c4a

08004c84 <_printf_common>:
 8004c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	4616      	mov	r6, r2
 8004c8a:	4699      	mov	r9, r3
 8004c8c:	688a      	ldr	r2, [r1, #8]
 8004c8e:	690b      	ldr	r3, [r1, #16]
 8004c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c94:	4293      	cmp	r3, r2
 8004c96:	bfb8      	it	lt
 8004c98:	4613      	movlt	r3, r2
 8004c9a:	6033      	str	r3, [r6, #0]
 8004c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	b10a      	cbz	r2, 8004caa <_printf_common+0x26>
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	6033      	str	r3, [r6, #0]
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	0699      	lsls	r1, r3, #26
 8004cae:	bf42      	ittt	mi
 8004cb0:	6833      	ldrmi	r3, [r6, #0]
 8004cb2:	3302      	addmi	r3, #2
 8004cb4:	6033      	strmi	r3, [r6, #0]
 8004cb6:	6825      	ldr	r5, [r4, #0]
 8004cb8:	f015 0506 	ands.w	r5, r5, #6
 8004cbc:	d106      	bne.n	8004ccc <_printf_common+0x48>
 8004cbe:	f104 0a19 	add.w	sl, r4, #25
 8004cc2:	68e3      	ldr	r3, [r4, #12]
 8004cc4:	6832      	ldr	r2, [r6, #0]
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	42ab      	cmp	r3, r5
 8004cca:	dc26      	bgt.n	8004d1a <_printf_common+0x96>
 8004ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cd0:	1e13      	subs	r3, r2, #0
 8004cd2:	6822      	ldr	r2, [r4, #0]
 8004cd4:	bf18      	it	ne
 8004cd6:	2301      	movne	r3, #1
 8004cd8:	0692      	lsls	r2, r2, #26
 8004cda:	d42b      	bmi.n	8004d34 <_printf_common+0xb0>
 8004cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	47c0      	blx	r8
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d01e      	beq.n	8004d28 <_printf_common+0xa4>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	68e5      	ldr	r5, [r4, #12]
 8004cee:	6832      	ldr	r2, [r6, #0]
 8004cf0:	f003 0306 	and.w	r3, r3, #6
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	bf08      	it	eq
 8004cf8:	1aad      	subeq	r5, r5, r2
 8004cfa:	68a3      	ldr	r3, [r4, #8]
 8004cfc:	6922      	ldr	r2, [r4, #16]
 8004cfe:	bf0c      	ite	eq
 8004d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d04:	2500      	movne	r5, #0
 8004d06:	4293      	cmp	r3, r2
 8004d08:	bfc4      	itt	gt
 8004d0a:	1a9b      	subgt	r3, r3, r2
 8004d0c:	18ed      	addgt	r5, r5, r3
 8004d0e:	2600      	movs	r6, #0
 8004d10:	341a      	adds	r4, #26
 8004d12:	42b5      	cmp	r5, r6
 8004d14:	d11a      	bne.n	8004d4c <_printf_common+0xc8>
 8004d16:	2000      	movs	r0, #0
 8004d18:	e008      	b.n	8004d2c <_printf_common+0xa8>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4652      	mov	r2, sl
 8004d1e:	4649      	mov	r1, r9
 8004d20:	4638      	mov	r0, r7
 8004d22:	47c0      	blx	r8
 8004d24:	3001      	adds	r0, #1
 8004d26:	d103      	bne.n	8004d30 <_printf_common+0xac>
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d30:	3501      	adds	r5, #1
 8004d32:	e7c6      	b.n	8004cc2 <_printf_common+0x3e>
 8004d34:	18e1      	adds	r1, r4, r3
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	2030      	movs	r0, #48	; 0x30
 8004d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d3e:	4422      	add	r2, r4
 8004d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d48:	3302      	adds	r3, #2
 8004d4a:	e7c7      	b.n	8004cdc <_printf_common+0x58>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	4622      	mov	r2, r4
 8004d50:	4649      	mov	r1, r9
 8004d52:	4638      	mov	r0, r7
 8004d54:	47c0      	blx	r8
 8004d56:	3001      	adds	r0, #1
 8004d58:	d0e6      	beq.n	8004d28 <_printf_common+0xa4>
 8004d5a:	3601      	adds	r6, #1
 8004d5c:	e7d9      	b.n	8004d12 <_printf_common+0x8e>
	...

08004d60 <_printf_i>:
 8004d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d64:	7e0f      	ldrb	r7, [r1, #24]
 8004d66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d68:	2f78      	cmp	r7, #120	; 0x78
 8004d6a:	4691      	mov	r9, r2
 8004d6c:	4680      	mov	r8, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	469a      	mov	sl, r3
 8004d72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d76:	d807      	bhi.n	8004d88 <_printf_i+0x28>
 8004d78:	2f62      	cmp	r7, #98	; 0x62
 8004d7a:	d80a      	bhi.n	8004d92 <_printf_i+0x32>
 8004d7c:	2f00      	cmp	r7, #0
 8004d7e:	f000 80d8 	beq.w	8004f32 <_printf_i+0x1d2>
 8004d82:	2f58      	cmp	r7, #88	; 0x58
 8004d84:	f000 80a3 	beq.w	8004ece <_printf_i+0x16e>
 8004d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d90:	e03a      	b.n	8004e08 <_printf_i+0xa8>
 8004d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d96:	2b15      	cmp	r3, #21
 8004d98:	d8f6      	bhi.n	8004d88 <_printf_i+0x28>
 8004d9a:	a101      	add	r1, pc, #4	; (adr r1, 8004da0 <_printf_i+0x40>)
 8004d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004da0:	08004df9 	.word	0x08004df9
 8004da4:	08004e0d 	.word	0x08004e0d
 8004da8:	08004d89 	.word	0x08004d89
 8004dac:	08004d89 	.word	0x08004d89
 8004db0:	08004d89 	.word	0x08004d89
 8004db4:	08004d89 	.word	0x08004d89
 8004db8:	08004e0d 	.word	0x08004e0d
 8004dbc:	08004d89 	.word	0x08004d89
 8004dc0:	08004d89 	.word	0x08004d89
 8004dc4:	08004d89 	.word	0x08004d89
 8004dc8:	08004d89 	.word	0x08004d89
 8004dcc:	08004f19 	.word	0x08004f19
 8004dd0:	08004e3d 	.word	0x08004e3d
 8004dd4:	08004efb 	.word	0x08004efb
 8004dd8:	08004d89 	.word	0x08004d89
 8004ddc:	08004d89 	.word	0x08004d89
 8004de0:	08004f3b 	.word	0x08004f3b
 8004de4:	08004d89 	.word	0x08004d89
 8004de8:	08004e3d 	.word	0x08004e3d
 8004dec:	08004d89 	.word	0x08004d89
 8004df0:	08004d89 	.word	0x08004d89
 8004df4:	08004f03 	.word	0x08004f03
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	1d1a      	adds	r2, r3, #4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	602a      	str	r2, [r5, #0]
 8004e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0a3      	b.n	8004f54 <_printf_i+0x1f4>
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	6829      	ldr	r1, [r5, #0]
 8004e10:	0606      	lsls	r6, r0, #24
 8004e12:	f101 0304 	add.w	r3, r1, #4
 8004e16:	d50a      	bpl.n	8004e2e <_printf_i+0xce>
 8004e18:	680e      	ldr	r6, [r1, #0]
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	2e00      	cmp	r6, #0
 8004e1e:	da03      	bge.n	8004e28 <_printf_i+0xc8>
 8004e20:	232d      	movs	r3, #45	; 0x2d
 8004e22:	4276      	negs	r6, r6
 8004e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e28:	485e      	ldr	r0, [pc, #376]	; (8004fa4 <_printf_i+0x244>)
 8004e2a:	230a      	movs	r3, #10
 8004e2c:	e019      	b.n	8004e62 <_printf_i+0x102>
 8004e2e:	680e      	ldr	r6, [r1, #0]
 8004e30:	602b      	str	r3, [r5, #0]
 8004e32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e36:	bf18      	it	ne
 8004e38:	b236      	sxthne	r6, r6
 8004e3a:	e7ef      	b.n	8004e1c <_printf_i+0xbc>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	6820      	ldr	r0, [r4, #0]
 8004e40:	1d19      	adds	r1, r3, #4
 8004e42:	6029      	str	r1, [r5, #0]
 8004e44:	0601      	lsls	r1, r0, #24
 8004e46:	d501      	bpl.n	8004e4c <_printf_i+0xec>
 8004e48:	681e      	ldr	r6, [r3, #0]
 8004e4a:	e002      	b.n	8004e52 <_printf_i+0xf2>
 8004e4c:	0646      	lsls	r6, r0, #25
 8004e4e:	d5fb      	bpl.n	8004e48 <_printf_i+0xe8>
 8004e50:	881e      	ldrh	r6, [r3, #0]
 8004e52:	4854      	ldr	r0, [pc, #336]	; (8004fa4 <_printf_i+0x244>)
 8004e54:	2f6f      	cmp	r7, #111	; 0x6f
 8004e56:	bf0c      	ite	eq
 8004e58:	2308      	moveq	r3, #8
 8004e5a:	230a      	movne	r3, #10
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e62:	6865      	ldr	r5, [r4, #4]
 8004e64:	60a5      	str	r5, [r4, #8]
 8004e66:	2d00      	cmp	r5, #0
 8004e68:	bfa2      	ittt	ge
 8004e6a:	6821      	ldrge	r1, [r4, #0]
 8004e6c:	f021 0104 	bicge.w	r1, r1, #4
 8004e70:	6021      	strge	r1, [r4, #0]
 8004e72:	b90e      	cbnz	r6, 8004e78 <_printf_i+0x118>
 8004e74:	2d00      	cmp	r5, #0
 8004e76:	d04d      	beq.n	8004f14 <_printf_i+0x1b4>
 8004e78:	4615      	mov	r5, r2
 8004e7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e7e:	fb03 6711 	mls	r7, r3, r1, r6
 8004e82:	5dc7      	ldrb	r7, [r0, r7]
 8004e84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e88:	4637      	mov	r7, r6
 8004e8a:	42bb      	cmp	r3, r7
 8004e8c:	460e      	mov	r6, r1
 8004e8e:	d9f4      	bls.n	8004e7a <_printf_i+0x11a>
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d10b      	bne.n	8004eac <_printf_i+0x14c>
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	07de      	lsls	r6, r3, #31
 8004e98:	d508      	bpl.n	8004eac <_printf_i+0x14c>
 8004e9a:	6923      	ldr	r3, [r4, #16]
 8004e9c:	6861      	ldr	r1, [r4, #4]
 8004e9e:	4299      	cmp	r1, r3
 8004ea0:	bfde      	ittt	le
 8004ea2:	2330      	movle	r3, #48	; 0x30
 8004ea4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ea8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004eac:	1b52      	subs	r2, r2, r5
 8004eae:	6122      	str	r2, [r4, #16]
 8004eb0:	f8cd a000 	str.w	sl, [sp]
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	aa03      	add	r2, sp, #12
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4640      	mov	r0, r8
 8004ebc:	f7ff fee2 	bl	8004c84 <_printf_common>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d14c      	bne.n	8004f5e <_printf_i+0x1fe>
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ec8:	b004      	add	sp, #16
 8004eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ece:	4835      	ldr	r0, [pc, #212]	; (8004fa4 <_printf_i+0x244>)
 8004ed0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ed4:	6829      	ldr	r1, [r5, #0]
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004edc:	6029      	str	r1, [r5, #0]
 8004ede:	061d      	lsls	r5, r3, #24
 8004ee0:	d514      	bpl.n	8004f0c <_printf_i+0x1ac>
 8004ee2:	07df      	lsls	r7, r3, #31
 8004ee4:	bf44      	itt	mi
 8004ee6:	f043 0320 	orrmi.w	r3, r3, #32
 8004eea:	6023      	strmi	r3, [r4, #0]
 8004eec:	b91e      	cbnz	r6, 8004ef6 <_printf_i+0x196>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	f023 0320 	bic.w	r3, r3, #32
 8004ef4:	6023      	str	r3, [r4, #0]
 8004ef6:	2310      	movs	r3, #16
 8004ef8:	e7b0      	b.n	8004e5c <_printf_i+0xfc>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	f043 0320 	orr.w	r3, r3, #32
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	2378      	movs	r3, #120	; 0x78
 8004f04:	4828      	ldr	r0, [pc, #160]	; (8004fa8 <_printf_i+0x248>)
 8004f06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f0a:	e7e3      	b.n	8004ed4 <_printf_i+0x174>
 8004f0c:	0659      	lsls	r1, r3, #25
 8004f0e:	bf48      	it	mi
 8004f10:	b2b6      	uxthmi	r6, r6
 8004f12:	e7e6      	b.n	8004ee2 <_printf_i+0x182>
 8004f14:	4615      	mov	r5, r2
 8004f16:	e7bb      	b.n	8004e90 <_printf_i+0x130>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	6826      	ldr	r6, [r4, #0]
 8004f1c:	6961      	ldr	r1, [r4, #20]
 8004f1e:	1d18      	adds	r0, r3, #4
 8004f20:	6028      	str	r0, [r5, #0]
 8004f22:	0635      	lsls	r5, r6, #24
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	d501      	bpl.n	8004f2c <_printf_i+0x1cc>
 8004f28:	6019      	str	r1, [r3, #0]
 8004f2a:	e002      	b.n	8004f32 <_printf_i+0x1d2>
 8004f2c:	0670      	lsls	r0, r6, #25
 8004f2e:	d5fb      	bpl.n	8004f28 <_printf_i+0x1c8>
 8004f30:	8019      	strh	r1, [r3, #0]
 8004f32:	2300      	movs	r3, #0
 8004f34:	6123      	str	r3, [r4, #16]
 8004f36:	4615      	mov	r5, r2
 8004f38:	e7ba      	b.n	8004eb0 <_printf_i+0x150>
 8004f3a:	682b      	ldr	r3, [r5, #0]
 8004f3c:	1d1a      	adds	r2, r3, #4
 8004f3e:	602a      	str	r2, [r5, #0]
 8004f40:	681d      	ldr	r5, [r3, #0]
 8004f42:	6862      	ldr	r2, [r4, #4]
 8004f44:	2100      	movs	r1, #0
 8004f46:	4628      	mov	r0, r5
 8004f48:	f7fb f94a 	bl	80001e0 <memchr>
 8004f4c:	b108      	cbz	r0, 8004f52 <_printf_i+0x1f2>
 8004f4e:	1b40      	subs	r0, r0, r5
 8004f50:	6060      	str	r0, [r4, #4]
 8004f52:	6863      	ldr	r3, [r4, #4]
 8004f54:	6123      	str	r3, [r4, #16]
 8004f56:	2300      	movs	r3, #0
 8004f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f5c:	e7a8      	b.n	8004eb0 <_printf_i+0x150>
 8004f5e:	6923      	ldr	r3, [r4, #16]
 8004f60:	462a      	mov	r2, r5
 8004f62:	4649      	mov	r1, r9
 8004f64:	4640      	mov	r0, r8
 8004f66:	47d0      	blx	sl
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d0ab      	beq.n	8004ec4 <_printf_i+0x164>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	079b      	lsls	r3, r3, #30
 8004f70:	d413      	bmi.n	8004f9a <_printf_i+0x23a>
 8004f72:	68e0      	ldr	r0, [r4, #12]
 8004f74:	9b03      	ldr	r3, [sp, #12]
 8004f76:	4298      	cmp	r0, r3
 8004f78:	bfb8      	it	lt
 8004f7a:	4618      	movlt	r0, r3
 8004f7c:	e7a4      	b.n	8004ec8 <_printf_i+0x168>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	4632      	mov	r2, r6
 8004f82:	4649      	mov	r1, r9
 8004f84:	4640      	mov	r0, r8
 8004f86:	47d0      	blx	sl
 8004f88:	3001      	adds	r0, #1
 8004f8a:	d09b      	beq.n	8004ec4 <_printf_i+0x164>
 8004f8c:	3501      	adds	r5, #1
 8004f8e:	68e3      	ldr	r3, [r4, #12]
 8004f90:	9903      	ldr	r1, [sp, #12]
 8004f92:	1a5b      	subs	r3, r3, r1
 8004f94:	42ab      	cmp	r3, r5
 8004f96:	dcf2      	bgt.n	8004f7e <_printf_i+0x21e>
 8004f98:	e7eb      	b.n	8004f72 <_printf_i+0x212>
 8004f9a:	2500      	movs	r5, #0
 8004f9c:	f104 0619 	add.w	r6, r4, #25
 8004fa0:	e7f5      	b.n	8004f8e <_printf_i+0x22e>
 8004fa2:	bf00      	nop
 8004fa4:	08005c55 	.word	0x08005c55
 8004fa8:	08005c66 	.word	0x08005c66

08004fac <_sbrk_r>:
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	4d06      	ldr	r5, [pc, #24]	; (8004fc8 <_sbrk_r+0x1c>)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	4608      	mov	r0, r1
 8004fb6:	602b      	str	r3, [r5, #0]
 8004fb8:	f7fe fe14 	bl	8003be4 <_sbrk>
 8004fbc:	1c43      	adds	r3, r0, #1
 8004fbe:	d102      	bne.n	8004fc6 <_sbrk_r+0x1a>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	b103      	cbz	r3, 8004fc6 <_sbrk_r+0x1a>
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	bd38      	pop	{r3, r4, r5, pc}
 8004fc8:	20000d00 	.word	0x20000d00

08004fcc <__sread>:
 8004fcc:	b510      	push	{r4, lr}
 8004fce:	460c      	mov	r4, r1
 8004fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd4:	f000 f8f2 	bl	80051bc <_read_r>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	bfab      	itete	ge
 8004fdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fde:	89a3      	ldrhlt	r3, [r4, #12]
 8004fe0:	181b      	addge	r3, r3, r0
 8004fe2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fe6:	bfac      	ite	ge
 8004fe8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fea:	81a3      	strhlt	r3, [r4, #12]
 8004fec:	bd10      	pop	{r4, pc}

08004fee <__swrite>:
 8004fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff2:	461f      	mov	r7, r3
 8004ff4:	898b      	ldrh	r3, [r1, #12]
 8004ff6:	05db      	lsls	r3, r3, #23
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	4616      	mov	r6, r2
 8004ffe:	d505      	bpl.n	800500c <__swrite+0x1e>
 8005000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005004:	2302      	movs	r3, #2
 8005006:	2200      	movs	r2, #0
 8005008:	f000 f870 	bl	80050ec <_lseek_r>
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005016:	81a3      	strh	r3, [r4, #12]
 8005018:	4632      	mov	r2, r6
 800501a:	463b      	mov	r3, r7
 800501c:	4628      	mov	r0, r5
 800501e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005022:	f000 b817 	b.w	8005054 <_write_r>

08005026 <__sseek>:
 8005026:	b510      	push	{r4, lr}
 8005028:	460c      	mov	r4, r1
 800502a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800502e:	f000 f85d 	bl	80050ec <_lseek_r>
 8005032:	1c43      	adds	r3, r0, #1
 8005034:	89a3      	ldrh	r3, [r4, #12]
 8005036:	bf15      	itete	ne
 8005038:	6560      	strne	r0, [r4, #84]	; 0x54
 800503a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800503e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005042:	81a3      	strheq	r3, [r4, #12]
 8005044:	bf18      	it	ne
 8005046:	81a3      	strhne	r3, [r4, #12]
 8005048:	bd10      	pop	{r4, pc}

0800504a <__sclose>:
 800504a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800504e:	f000 b81b 	b.w	8005088 <_close_r>
	...

08005054 <_write_r>:
 8005054:	b538      	push	{r3, r4, r5, lr}
 8005056:	4d07      	ldr	r5, [pc, #28]	; (8005074 <_write_r+0x20>)
 8005058:	4604      	mov	r4, r0
 800505a:	4608      	mov	r0, r1
 800505c:	4611      	mov	r1, r2
 800505e:	2200      	movs	r2, #0
 8005060:	602a      	str	r2, [r5, #0]
 8005062:	461a      	mov	r2, r3
 8005064:	f7fe fdb0 	bl	8003bc8 <_write>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_write_r+0x1e>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	b103      	cbz	r3, 8005072 <_write_r+0x1e>
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	20000d00 	.word	0x20000d00

08005078 <abort>:
 8005078:	b508      	push	{r3, lr}
 800507a:	2006      	movs	r0, #6
 800507c:	f000 f8d8 	bl	8005230 <raise>
 8005080:	2001      	movs	r0, #1
 8005082:	f7fe fd94 	bl	8003bae <_exit>
	...

08005088 <_close_r>:
 8005088:	b538      	push	{r3, r4, r5, lr}
 800508a:	4d06      	ldr	r5, [pc, #24]	; (80050a4 <_close_r+0x1c>)
 800508c:	2300      	movs	r3, #0
 800508e:	4604      	mov	r4, r0
 8005090:	4608      	mov	r0, r1
 8005092:	602b      	str	r3, [r5, #0]
 8005094:	f7fe fdc0 	bl	8003c18 <_close>
 8005098:	1c43      	adds	r3, r0, #1
 800509a:	d102      	bne.n	80050a2 <_close_r+0x1a>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	b103      	cbz	r3, 80050a2 <_close_r+0x1a>
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	bd38      	pop	{r3, r4, r5, pc}
 80050a4:	20000d00 	.word	0x20000d00

080050a8 <_fstat_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4d07      	ldr	r5, [pc, #28]	; (80050c8 <_fstat_r+0x20>)
 80050ac:	2300      	movs	r3, #0
 80050ae:	4604      	mov	r4, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	602b      	str	r3, [r5, #0]
 80050b6:	f7fe fdb2 	bl	8003c1e <_fstat>
 80050ba:	1c43      	adds	r3, r0, #1
 80050bc:	d102      	bne.n	80050c4 <_fstat_r+0x1c>
 80050be:	682b      	ldr	r3, [r5, #0]
 80050c0:	b103      	cbz	r3, 80050c4 <_fstat_r+0x1c>
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	bd38      	pop	{r3, r4, r5, pc}
 80050c6:	bf00      	nop
 80050c8:	20000d00 	.word	0x20000d00

080050cc <_isatty_r>:
 80050cc:	b538      	push	{r3, r4, r5, lr}
 80050ce:	4d06      	ldr	r5, [pc, #24]	; (80050e8 <_isatty_r+0x1c>)
 80050d0:	2300      	movs	r3, #0
 80050d2:	4604      	mov	r4, r0
 80050d4:	4608      	mov	r0, r1
 80050d6:	602b      	str	r3, [r5, #0]
 80050d8:	f7fe fda6 	bl	8003c28 <_isatty>
 80050dc:	1c43      	adds	r3, r0, #1
 80050de:	d102      	bne.n	80050e6 <_isatty_r+0x1a>
 80050e0:	682b      	ldr	r3, [r5, #0]
 80050e2:	b103      	cbz	r3, 80050e6 <_isatty_r+0x1a>
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	20000d00 	.word	0x20000d00

080050ec <_lseek_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4d07      	ldr	r5, [pc, #28]	; (800510c <_lseek_r+0x20>)
 80050f0:	4604      	mov	r4, r0
 80050f2:	4608      	mov	r0, r1
 80050f4:	4611      	mov	r1, r2
 80050f6:	2200      	movs	r2, #0
 80050f8:	602a      	str	r2, [r5, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f7fe fd96 	bl	8003c2c <_lseek>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d102      	bne.n	800510a <_lseek_r+0x1e>
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	b103      	cbz	r3, 800510a <_lseek_r+0x1e>
 8005108:	6023      	str	r3, [r4, #0]
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	20000d00 	.word	0x20000d00

08005110 <memmove>:
 8005110:	4288      	cmp	r0, r1
 8005112:	b510      	push	{r4, lr}
 8005114:	eb01 0402 	add.w	r4, r1, r2
 8005118:	d902      	bls.n	8005120 <memmove+0x10>
 800511a:	4284      	cmp	r4, r0
 800511c:	4623      	mov	r3, r4
 800511e:	d807      	bhi.n	8005130 <memmove+0x20>
 8005120:	1e43      	subs	r3, r0, #1
 8005122:	42a1      	cmp	r1, r4
 8005124:	d008      	beq.n	8005138 <memmove+0x28>
 8005126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800512a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800512e:	e7f8      	b.n	8005122 <memmove+0x12>
 8005130:	4402      	add	r2, r0
 8005132:	4601      	mov	r1, r0
 8005134:	428a      	cmp	r2, r1
 8005136:	d100      	bne.n	800513a <memmove+0x2a>
 8005138:	bd10      	pop	{r4, pc}
 800513a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800513e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005142:	e7f7      	b.n	8005134 <memmove+0x24>

08005144 <__malloc_lock>:
 8005144:	4801      	ldr	r0, [pc, #4]	; (800514c <__malloc_lock+0x8>)
 8005146:	f7ff b997 	b.w	8004478 <__retarget_lock_acquire_recursive>
 800514a:	bf00      	nop
 800514c:	20000cf4 	.word	0x20000cf4

08005150 <__malloc_unlock>:
 8005150:	4801      	ldr	r0, [pc, #4]	; (8005158 <__malloc_unlock+0x8>)
 8005152:	f7ff b992 	b.w	800447a <__retarget_lock_release_recursive>
 8005156:	bf00      	nop
 8005158:	20000cf4 	.word	0x20000cf4

0800515c <_realloc_r>:
 800515c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005160:	4680      	mov	r8, r0
 8005162:	4614      	mov	r4, r2
 8005164:	460e      	mov	r6, r1
 8005166:	b921      	cbnz	r1, 8005172 <_realloc_r+0x16>
 8005168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800516c:	4611      	mov	r1, r2
 800516e:	f7ff ba5f 	b.w	8004630 <_malloc_r>
 8005172:	b92a      	cbnz	r2, 8005180 <_realloc_r+0x24>
 8005174:	f7ff f9f0 	bl	8004558 <_free_r>
 8005178:	4625      	mov	r5, r4
 800517a:	4628      	mov	r0, r5
 800517c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005180:	f000 f872 	bl	8005268 <_malloc_usable_size_r>
 8005184:	4284      	cmp	r4, r0
 8005186:	4607      	mov	r7, r0
 8005188:	d802      	bhi.n	8005190 <_realloc_r+0x34>
 800518a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800518e:	d812      	bhi.n	80051b6 <_realloc_r+0x5a>
 8005190:	4621      	mov	r1, r4
 8005192:	4640      	mov	r0, r8
 8005194:	f7ff fa4c 	bl	8004630 <_malloc_r>
 8005198:	4605      	mov	r5, r0
 800519a:	2800      	cmp	r0, #0
 800519c:	d0ed      	beq.n	800517a <_realloc_r+0x1e>
 800519e:	42bc      	cmp	r4, r7
 80051a0:	4622      	mov	r2, r4
 80051a2:	4631      	mov	r1, r6
 80051a4:	bf28      	it	cs
 80051a6:	463a      	movcs	r2, r7
 80051a8:	f7fe fd6c 	bl	8003c84 <memcpy>
 80051ac:	4631      	mov	r1, r6
 80051ae:	4640      	mov	r0, r8
 80051b0:	f7ff f9d2 	bl	8004558 <_free_r>
 80051b4:	e7e1      	b.n	800517a <_realloc_r+0x1e>
 80051b6:	4635      	mov	r5, r6
 80051b8:	e7df      	b.n	800517a <_realloc_r+0x1e>
	...

080051bc <_read_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4d07      	ldr	r5, [pc, #28]	; (80051dc <_read_r+0x20>)
 80051c0:	4604      	mov	r4, r0
 80051c2:	4608      	mov	r0, r1
 80051c4:	4611      	mov	r1, r2
 80051c6:	2200      	movs	r2, #0
 80051c8:	602a      	str	r2, [r5, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f7fe fcf5 	bl	8003bba <_read>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d102      	bne.n	80051da <_read_r+0x1e>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	b103      	cbz	r3, 80051da <_read_r+0x1e>
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	20000d00 	.word	0x20000d00

080051e0 <_raise_r>:
 80051e0:	291f      	cmp	r1, #31
 80051e2:	b538      	push	{r3, r4, r5, lr}
 80051e4:	4604      	mov	r4, r0
 80051e6:	460d      	mov	r5, r1
 80051e8:	d904      	bls.n	80051f4 <_raise_r+0x14>
 80051ea:	2316      	movs	r3, #22
 80051ec:	6003      	str	r3, [r0, #0]
 80051ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051f2:	bd38      	pop	{r3, r4, r5, pc}
 80051f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80051f6:	b112      	cbz	r2, 80051fe <_raise_r+0x1e>
 80051f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051fc:	b94b      	cbnz	r3, 8005212 <_raise_r+0x32>
 80051fe:	4620      	mov	r0, r4
 8005200:	f000 f830 	bl	8005264 <_getpid_r>
 8005204:	462a      	mov	r2, r5
 8005206:	4601      	mov	r1, r0
 8005208:	4620      	mov	r0, r4
 800520a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800520e:	f000 b817 	b.w	8005240 <_kill_r>
 8005212:	2b01      	cmp	r3, #1
 8005214:	d00a      	beq.n	800522c <_raise_r+0x4c>
 8005216:	1c59      	adds	r1, r3, #1
 8005218:	d103      	bne.n	8005222 <_raise_r+0x42>
 800521a:	2316      	movs	r3, #22
 800521c:	6003      	str	r3, [r0, #0]
 800521e:	2001      	movs	r0, #1
 8005220:	e7e7      	b.n	80051f2 <_raise_r+0x12>
 8005222:	2400      	movs	r4, #0
 8005224:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005228:	4628      	mov	r0, r5
 800522a:	4798      	blx	r3
 800522c:	2000      	movs	r0, #0
 800522e:	e7e0      	b.n	80051f2 <_raise_r+0x12>

08005230 <raise>:
 8005230:	4b02      	ldr	r3, [pc, #8]	; (800523c <raise+0xc>)
 8005232:	4601      	mov	r1, r0
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	f7ff bfd3 	b.w	80051e0 <_raise_r>
 800523a:	bf00      	nop
 800523c:	20000024 	.word	0x20000024

08005240 <_kill_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4d07      	ldr	r5, [pc, #28]	; (8005260 <_kill_r+0x20>)
 8005244:	2300      	movs	r3, #0
 8005246:	4604      	mov	r4, r0
 8005248:	4608      	mov	r0, r1
 800524a:	4611      	mov	r1, r2
 800524c:	602b      	str	r3, [r5, #0]
 800524e:	f7fe fca6 	bl	8003b9e <_kill>
 8005252:	1c43      	adds	r3, r0, #1
 8005254:	d102      	bne.n	800525c <_kill_r+0x1c>
 8005256:	682b      	ldr	r3, [r5, #0]
 8005258:	b103      	cbz	r3, 800525c <_kill_r+0x1c>
 800525a:	6023      	str	r3, [r4, #0]
 800525c:	bd38      	pop	{r3, r4, r5, pc}
 800525e:	bf00      	nop
 8005260:	20000d00 	.word	0x20000d00

08005264 <_getpid_r>:
 8005264:	f7fe bc99 	b.w	8003b9a <_getpid>

08005268 <_malloc_usable_size_r>:
 8005268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800526c:	1f18      	subs	r0, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	bfbc      	itt	lt
 8005272:	580b      	ldrlt	r3, [r1, r0]
 8005274:	18c0      	addlt	r0, r0, r3
 8005276:	4770      	bx	lr

08005278 <_init>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr

08005284 <_fini>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr
